
OT1_OMNICAR_ST417.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c90  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005e18  08005e18  00015e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e38  08005e38  0002003c  2**0
                  CONTENTS
  4 .ARM          00000008  08005e38  08005e38  00015e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e40  08005e40  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e40  08005e40  00015e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e44  08005e44  00015e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08005e48  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  20000040  08005e84  00020040  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  08005e84  000202d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f89b  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020d1  00000000  00000000  0002f907  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e60  00000000  00000000  000319d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d58  00000000  00000000  00032838  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022667  00000000  00000000  00033590  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b054  00000000  00000000  00055bf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d0da5  00000000  00000000  00060c4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001319f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b98  00000000  00000000  00131a6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000040 	.word	0x20000040
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005e00 	.word	0x08005e00

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000044 	.word	0x20000044
 80001c4:	08005e00 	.word	0x08005e00

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b096      	sub	sp, #88	; 0x58
 80004cc:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ce:	f002 f9b9 	bl	8002844 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d2:	f000 f8ad 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d6:	f000 fbef 	bl	8000cb8 <MX_GPIO_Init>
  MX_SPI2_Init();
 80004da:	f000 f99b 	bl	8000814 <MX_SPI2_Init>
  MX_TIM1_Init();
 80004de:	f000 f9cf 	bl	8000880 <MX_TIM1_Init>
  MX_ADC1_Init();
 80004e2:	f000 f90f 	bl	8000704 <MX_ADC1_Init>
  MX_TIM4_Init();
 80004e6:	f000 fa93 	bl	8000a10 <MX_TIM4_Init>
  MX_TIM8_Init();
 80004ea:	f000 fb09 	bl	8000b00 <MX_TIM8_Init>
  MX_SPI1_Init();
 80004ee:	f000 f95b 	bl	80007a8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* NRF - INIT*/
  NRF24_begin(GPIOD, CSN_Pin, GPIOB, CE_Pin, hspi2);              						// initialization of all register into there reset value
 80004f2:	4b3e      	ldr	r3, [pc, #248]	; (80005ec <main+0x124>)
 80004f4:	4668      	mov	r0, sp
 80004f6:	4619      	mov	r1, r3
 80004f8:	2358      	movs	r3, #88	; 0x58
 80004fa:	461a      	mov	r2, r3
 80004fc:	f005 fc6c 	bl	8005dd8 <memcpy>
 8000500:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000504:	4a3a      	ldr	r2, [pc, #232]	; (80005f0 <main+0x128>)
 8000506:	f44f 7180 	mov.w	r1, #256	; 0x100
 800050a:	483a      	ldr	r0, [pc, #232]	; (80005f4 <main+0x12c>)
 800050c:	f001 f80c 	bl	8001528 <NRF24_begin>
  NRF24_receptionInit(RxpipeAddrs, channel, payload_size);        						// function call for initialization of reception
 8000510:	4b39      	ldr	r3, [pc, #228]	; (80005f8 <main+0x130>)
 8000512:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000516:	4b39      	ldr	r3, [pc, #228]	; (80005fc <main+0x134>)
 8000518:	781a      	ldrb	r2, [r3, #0]
 800051a:	4b39      	ldr	r3, [pc, #228]	; (8000600 <main+0x138>)
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	f001 fb9b 	bl	8001c58 <NRF24_receptionInit>

  /* MOTORS - INIT */
  init_pwm_motors(&htim1, channel_array);												// function call for initialization of motors PWM
 8000522:	4938      	ldr	r1, [pc, #224]	; (8000604 <main+0x13c>)
 8000524:	4838      	ldr	r0, [pc, #224]	; (8000608 <main+0x140>)
 8000526:	f001 fc31 	bl	8001d8c <init_pwm_motors>

  /* SERVO */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);												// start PWM at TIM4 - CHANNEL4 for servo motor
 800052a:	210c      	movs	r1, #12
 800052c:	4837      	ldr	r0, [pc, #220]	; (800060c <main+0x144>)
 800052e:	f004 fa59 	bl	80049e4 <HAL_TIM_PWM_Start>
  /* ULTRA SON */
  //sensors_init_pwm(&htim8, channel_array);												// function call for initialization of PWM sensor

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);									// DELETE ?
 8000532:	2100      	movs	r1, #0
 8000534:	4836      	ldr	r0, [pc, #216]	; (8000610 <main+0x148>)
 8000536:	f004 fa55 	bl	80049e4 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_2);
 800053a:	2104      	movs	r1, #4
 800053c:	4834      	ldr	r0, [pc, #208]	; (8000610 <main+0x148>)
 800053e:	f004 fac5 	bl	8004acc <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8000542:	2108      	movs	r1, #8
 8000544:	4832      	ldr	r0, [pc, #200]	; (8000610 <main+0x148>)
 8000546:	f004 fa4d 	bl	80049e4 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_4);
 800054a:	210c      	movs	r1, #12
 800054c:	4830      	ldr	r0, [pc, #192]	; (8000610 <main+0x148>)
 800054e:	f004 fabd 	bl	8004acc <HAL_TIM_IC_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	/* DATA RECEIVE */
	NRF24_dataReception(myRxData, 3, myAckPayload, 3);									// function call for data reception
 8000552:	2303      	movs	r3, #3
 8000554:	4a2f      	ldr	r2, [pc, #188]	; (8000614 <main+0x14c>)
 8000556:	2103      	movs	r1, #3
 8000558:	482f      	ldr	r0, [pc, #188]	; (8000618 <main+0x150>)
 800055a:	f001 fba2 	bl	8001ca2 <NRF24_dataReception>

	/* ACTIVATE SENSORS */
	if(myRxData[2] == 1)																// check into the third case of myRxData
 800055e:	4b2e      	ldr	r3, [pc, #184]	; (8000618 <main+0x150>)
 8000560:	789b      	ldrb	r3, [r3, #2]
 8000562:	2b01      	cmp	r3, #1
 8000564:	d125      	bne.n	80005b2 <main+0xea>
	{
		HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
 8000566:	2201      	movs	r2, #1
 8000568:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800056c:	4821      	ldr	r0, [pc, #132]	; (80005f4 <main+0x12c>)
 800056e:	f003 f863 	bl	8003638 <HAL_GPIO_WritePin>
		sensors_start_servo(&htim4, TIM_CHANNEL_4);										// function call for start the servomotor
 8000572:	210c      	movs	r1, #12
 8000574:	4825      	ldr	r0, [pc, #148]	; (800060c <main+0x144>)
 8000576:	f002 f8b9 	bl	80026ec <sensors_start_servo>

		//calculated_distance();
		//calculated_distance_2();

		dst = sensors_calculated_distance();								 //ERROR	// function call to calculate distance with ultra-sonic sensor 1 and store the return data into dst
 800057a:	f002 f83f 	bl	80025fc <sensors_calculated_distance>
 800057e:	4603      	mov	r3, r0
 8000580:	461a      	mov	r2, r3
 8000582:	4b26      	ldr	r3, [pc, #152]	; (800061c <main+0x154>)
 8000584:	701a      	strb	r2, [r3, #0]
		dst_2 = sensors_calculated_distance_2();										// function call to calculate distance with ultre-sonic sensor 2 and store the return data into dst_2
 8000586:	f002 f875 	bl	8002674 <sensors_calculated_distance_2>
 800058a:	4603      	mov	r3, r0
 800058c:	461a      	mov	r2, r3
 800058e:	4b24      	ldr	r3, [pc, #144]	; (8000620 <main+0x158>)
 8000590:	701a      	strb	r2, [r3, #0]

		if(dst_2 || dst)																		// check if dst_2 is true
 8000592:	4b23      	ldr	r3, [pc, #140]	; (8000620 <main+0x158>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d103      	bne.n	80005a2 <main+0xda>
 800059a:	4b20      	ldr	r3, [pc, #128]	; (800061c <main+0x154>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d003      	beq.n	80005aa <main+0xe2>
		{
			myAckPayload[2] = 1;														// store 1 into the third case of "myAckPayload" array
 80005a2:	4b1c      	ldr	r3, [pc, #112]	; (8000614 <main+0x14c>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	709a      	strb	r2, [r3, #2]
 80005a8:	e009      	b.n	80005be <main+0xf6>
		}
		else
		{
			myAckPayload[2] = 0;														// store 0 into the third case of "myAckPayload" array
 80005aa:	4b1a      	ldr	r3, [pc, #104]	; (8000614 <main+0x14c>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	709a      	strb	r2, [r3, #2]
 80005b0:	e005      	b.n	80005be <main+0xf6>
		}
	}
	else
	{
		HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005b8:	480e      	ldr	r0, [pc, #56]	; (80005f4 <main+0x12c>)
 80005ba:	f003 f83d 	bl	8003638 <HAL_GPIO_WritePin>
	}

	HAL_Delay(5);																		// to have the same time for ack
 80005be:	2005      	movs	r0, #5
 80005c0:	f002 f9b2 	bl	8002928 <HAL_Delay>

	motors_management(&htim1, channel_array, myRxData);									// function call to set the PWM for the engine management
 80005c4:	4a14      	ldr	r2, [pc, #80]	; (8000618 <main+0x150>)
 80005c6:	490f      	ldr	r1, [pc, #60]	; (8000604 <main+0x13c>)
 80005c8:	480f      	ldr	r0, [pc, #60]	; (8000608 <main+0x140>)
 80005ca:	f001 fc0f 	bl	8001dec <motors_management>
	motors_direction(GPIOB, GPIOE, gpio_pin_array, myRxData);							// function call to start the motor direction
 80005ce:	4b12      	ldr	r3, [pc, #72]	; (8000618 <main+0x150>)
 80005d0:	4a14      	ldr	r2, [pc, #80]	; (8000624 <main+0x15c>)
 80005d2:	4915      	ldr	r1, [pc, #84]	; (8000628 <main+0x160>)
 80005d4:	4806      	ldr	r0, [pc, #24]	; (80005f0 <main+0x128>)
 80005d6:	f001 fc57 	bl	8001e88 <motors_direction>

	myAckPayload[0] = battery_getBatteryLevel(&hadc1);									// store the percentage of battery into the first case of the ack array
 80005da:	4814      	ldr	r0, [pc, #80]	; (800062c <main+0x164>)
 80005dc:	f001 fb84 	bl	8001ce8 <battery_getBatteryLevel>
 80005e0:	4603      	mov	r3, r0
 80005e2:	461a      	mov	r2, r3
 80005e4:	4b0b      	ldr	r3, [pc, #44]	; (8000614 <main+0x14c>)
 80005e6:	701a      	strb	r2, [r3, #0]
	NRF24_dataReception(myRxData, 3, myAckPayload, 3);									// function call for data reception
 80005e8:	e7b3      	b.n	8000552 <main+0x8a>
 80005ea:	bf00      	nop
 80005ec:	20000110 	.word	0x20000110
 80005f0:	40020400 	.word	0x40020400
 80005f4:	40020c00 	.word	0x40020c00
 80005f8:	20000000 	.word	0x20000000
 80005fc:	20000008 	.word	0x20000008
 8000600:	20000009 	.word	0x20000009
 8000604:	2000000c 	.word	0x2000000c
 8000608:	20000234 	.word	0x20000234
 800060c:	200001a8 	.word	0x200001a8
 8000610:	20000168 	.word	0x20000168
 8000614:	2000010c 	.word	0x2000010c
 8000618:	200001e8 	.word	0x200001e8
 800061c:	2000005c 	.word	0x2000005c
 8000620:	2000005d 	.word	0x2000005d
 8000624:	2000001c 	.word	0x2000001c
 8000628:	40021000 	.word	0x40021000
 800062c:	200001ec 	.word	0x200001ec

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b094      	sub	sp, #80	; 0x50
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 0320 	add.w	r3, r7, #32
 800063a:	2230      	movs	r2, #48	; 0x30
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f005 fbd5 	bl	8005dee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	f107 030c 	add.w	r3, r7, #12
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	4b28      	ldr	r3, [pc, #160]	; (80006fc <SystemClock_Config+0xcc>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	4a27      	ldr	r2, [pc, #156]	; (80006fc <SystemClock_Config+0xcc>)
 800065e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000662:	6413      	str	r3, [r2, #64]	; 0x40
 8000664:	4b25      	ldr	r3, [pc, #148]	; (80006fc <SystemClock_Config+0xcc>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000670:	2300      	movs	r3, #0
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	4b22      	ldr	r3, [pc, #136]	; (8000700 <SystemClock_Config+0xd0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a21      	ldr	r2, [pc, #132]	; (8000700 <SystemClock_Config+0xd0>)
 800067a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800067e:	6013      	str	r3, [r2, #0]
 8000680:	4b1f      	ldr	r3, [pc, #124]	; (8000700 <SystemClock_Config+0xd0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800068c:	2302      	movs	r3, #2
 800068e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000690:	2301      	movs	r3, #1
 8000692:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000694:	2310      	movs	r3, #16
 8000696:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000698:	2302      	movs	r3, #2
 800069a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800069c:	2300      	movs	r3, #0
 800069e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006a0:	2308      	movs	r3, #8
 80006a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80006a4:	2354      	movs	r3, #84	; 0x54
 80006a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006ac:	2304      	movs	r3, #4
 80006ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b0:	f107 0320 	add.w	r3, r7, #32
 80006b4:	4618      	mov	r0, r3
 80006b6:	f002 ffd9 	bl	800366c <HAL_RCC_OscConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006c0:	f000 fbb8 	bl	8000e34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c4:	230f      	movs	r3, #15
 80006c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c8:	2302      	movs	r3, #2
 80006ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2102      	movs	r1, #2
 80006e2:	4618      	mov	r0, r3
 80006e4:	f003 fa32 	bl	8003b4c <HAL_RCC_ClockConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ee:	f000 fba1 	bl	8000e34 <Error_Handler>
  }
}
 80006f2:	bf00      	nop
 80006f4:	3750      	adds	r7, #80	; 0x50
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800
 8000700:	40007000 	.word	0x40007000

08000704 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800070a:	463b      	mov	r3, r7
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000716:	4b21      	ldr	r3, [pc, #132]	; (800079c <MX_ADC1_Init+0x98>)
 8000718:	4a21      	ldr	r2, [pc, #132]	; (80007a0 <MX_ADC1_Init+0x9c>)
 800071a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800071c:	4b1f      	ldr	r3, [pc, #124]	; (800079c <MX_ADC1_Init+0x98>)
 800071e:	2200      	movs	r2, #0
 8000720:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000722:	4b1e      	ldr	r3, [pc, #120]	; (800079c <MX_ADC1_Init+0x98>)
 8000724:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000728:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800072a:	4b1c      	ldr	r3, [pc, #112]	; (800079c <MX_ADC1_Init+0x98>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000730:	4b1a      	ldr	r3, [pc, #104]	; (800079c <MX_ADC1_Init+0x98>)
 8000732:	2201      	movs	r2, #1
 8000734:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000736:	4b19      	ldr	r3, [pc, #100]	; (800079c <MX_ADC1_Init+0x98>)
 8000738:	2200      	movs	r2, #0
 800073a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800073e:	4b17      	ldr	r3, [pc, #92]	; (800079c <MX_ADC1_Init+0x98>)
 8000740:	2200      	movs	r2, #0
 8000742:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000744:	4b15      	ldr	r3, [pc, #84]	; (800079c <MX_ADC1_Init+0x98>)
 8000746:	4a17      	ldr	r2, [pc, #92]	; (80007a4 <MX_ADC1_Init+0xa0>)
 8000748:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800074a:	4b14      	ldr	r3, [pc, #80]	; (800079c <MX_ADC1_Init+0x98>)
 800074c:	2200      	movs	r2, #0
 800074e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <MX_ADC1_Init+0x98>)
 8000752:	2201      	movs	r2, #1
 8000754:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_ADC1_Init+0x98>)
 8000758:	2200      	movs	r2, #0
 800075a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800075e:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_ADC1_Init+0x98>)
 8000760:	2201      	movs	r2, #1
 8000762:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000764:	480d      	ldr	r0, [pc, #52]	; (800079c <MX_ADC1_Init+0x98>)
 8000766:	f002 f901 	bl	800296c <HAL_ADC_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000770:	f000 fb60 	bl	8000e34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000774:	230a      	movs	r3, #10
 8000776:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000778:	2301      	movs	r3, #1
 800077a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800077c:	2300      	movs	r3, #0
 800077e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000780:	463b      	mov	r3, r7
 8000782:	4619      	mov	r1, r3
 8000784:	4805      	ldr	r0, [pc, #20]	; (800079c <MX_ADC1_Init+0x98>)
 8000786:	f002 fa8d 	bl	8002ca4 <HAL_ADC_ConfigChannel>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000790:	f000 fb50 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	200001ec 	.word	0x200001ec
 80007a0:	40012000 	.word	0x40012000
 80007a4:	0f000001 	.word	0x0f000001

080007a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007ac:	4b17      	ldr	r3, [pc, #92]	; (800080c <MX_SPI1_Init+0x64>)
 80007ae:	4a18      	ldr	r2, [pc, #96]	; (8000810 <MX_SPI1_Init+0x68>)
 80007b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007b2:	4b16      	ldr	r3, [pc, #88]	; (800080c <MX_SPI1_Init+0x64>)
 80007b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007ba:	4b14      	ldr	r3, [pc, #80]	; (800080c <MX_SPI1_Init+0x64>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007c0:	4b12      	ldr	r3, [pc, #72]	; (800080c <MX_SPI1_Init+0x64>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007c6:	4b11      	ldr	r3, [pc, #68]	; (800080c <MX_SPI1_Init+0x64>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007cc:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_SPI1_Init+0x64>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <MX_SPI1_Init+0x64>)
 80007d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80007da:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_SPI1_Init+0x64>)
 80007dc:	2210      	movs	r2, #16
 80007de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007e0:	4b0a      	ldr	r3, [pc, #40]	; (800080c <MX_SPI1_Init+0x64>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_SPI1_Init+0x64>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ec:	4b07      	ldr	r3, [pc, #28]	; (800080c <MX_SPI1_Init+0x64>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_SPI1_Init+0x64>)
 80007f4:	220a      	movs	r2, #10
 80007f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007f8:	4804      	ldr	r0, [pc, #16]	; (800080c <MX_SPI1_Init+0x64>)
 80007fa:	f003 fb3f 	bl	8003e7c <HAL_SPI_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000804:	f000 fb16 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000274 	.word	0x20000274
 8000810:	40013000 	.word	0x40013000

08000814 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000818:	4b17      	ldr	r3, [pc, #92]	; (8000878 <MX_SPI2_Init+0x64>)
 800081a:	4a18      	ldr	r2, [pc, #96]	; (800087c <MX_SPI2_Init+0x68>)
 800081c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800081e:	4b16      	ldr	r3, [pc, #88]	; (8000878 <MX_SPI2_Init+0x64>)
 8000820:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000824:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000826:	4b14      	ldr	r3, [pc, #80]	; (8000878 <MX_SPI2_Init+0x64>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800082c:	4b12      	ldr	r3, [pc, #72]	; (8000878 <MX_SPI2_Init+0x64>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000832:	4b11      	ldr	r3, [pc, #68]	; (8000878 <MX_SPI2_Init+0x64>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000838:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <MX_SPI2_Init+0x64>)
 800083a:	2200      	movs	r2, #0
 800083c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <MX_SPI2_Init+0x64>)
 8000840:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000844:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000846:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <MX_SPI2_Init+0x64>)
 8000848:	2210      	movs	r2, #16
 800084a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800084c:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <MX_SPI2_Init+0x64>)
 800084e:	2200      	movs	r2, #0
 8000850:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <MX_SPI2_Init+0x64>)
 8000854:	2200      	movs	r2, #0
 8000856:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000858:	4b07      	ldr	r3, [pc, #28]	; (8000878 <MX_SPI2_Init+0x64>)
 800085a:	2200      	movs	r2, #0
 800085c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <MX_SPI2_Init+0x64>)
 8000860:	220a      	movs	r2, #10
 8000862:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000864:	4804      	ldr	r0, [pc, #16]	; (8000878 <MX_SPI2_Init+0x64>)
 8000866:	f003 fb09 	bl	8003e7c <HAL_SPI_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000870:	f000 fae0 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20000110 	.word	0x20000110
 800087c:	40003800 	.word	0x40003800

08000880 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b096      	sub	sp, #88	; 0x58
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000886:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000894:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800089e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
 80008ac:	611a      	str	r2, [r3, #16]
 80008ae:	615a      	str	r2, [r3, #20]
 80008b0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	2220      	movs	r2, #32
 80008b6:	2100      	movs	r1, #0
 80008b8:	4618      	mov	r0, r3
 80008ba:	f005 fa98 	bl	8005dee <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008be:	4b52      	ldr	r3, [pc, #328]	; (8000a08 <MX_TIM1_Init+0x188>)
 80008c0:	4a52      	ldr	r2, [pc, #328]	; (8000a0c <MX_TIM1_Init+0x18c>)
 80008c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 60000;
 80008c4:	4b50      	ldr	r3, [pc, #320]	; (8000a08 <MX_TIM1_Init+0x188>)
 80008c6:	f64e 2260 	movw	r2, #60000	; 0xea60
 80008ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008cc:	4b4e      	ldr	r3, [pc, #312]	; (8000a08 <MX_TIM1_Init+0x188>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 14;
 80008d2:	4b4d      	ldr	r3, [pc, #308]	; (8000a08 <MX_TIM1_Init+0x188>)
 80008d4:	220e      	movs	r2, #14
 80008d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d8:	4b4b      	ldr	r3, [pc, #300]	; (8000a08 <MX_TIM1_Init+0x188>)
 80008da:	2200      	movs	r2, #0
 80008dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008de:	4b4a      	ldr	r3, [pc, #296]	; (8000a08 <MX_TIM1_Init+0x188>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e4:	4b48      	ldr	r3, [pc, #288]	; (8000a08 <MX_TIM1_Init+0x188>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008ea:	4847      	ldr	r0, [pc, #284]	; (8000a08 <MX_TIM1_Init+0x188>)
 80008ec:	f004 f81a 	bl	8004924 <HAL_TIM_Base_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80008f6:	f000 fa9d 	bl	8000e34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008fe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000900:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000904:	4619      	mov	r1, r3
 8000906:	4840      	ldr	r0, [pc, #256]	; (8000a08 <MX_TIM1_Init+0x188>)
 8000908:	f004 fbb2 	bl	8005070 <HAL_TIM_ConfigClockSource>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000912:	f000 fa8f 	bl	8000e34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000916:	483c      	ldr	r0, [pc, #240]	; (8000a08 <MX_TIM1_Init+0x188>)
 8000918:	f004 f82f 	bl	800497a <HAL_TIM_PWM_Init>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000922:	f000 fa87 	bl	8000e34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000926:	2300      	movs	r3, #0
 8000928:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800092a:	2300      	movs	r3, #0
 800092c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800092e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000932:	4619      	mov	r1, r3
 8000934:	4834      	ldr	r0, [pc, #208]	; (8000a08 <MX_TIM1_Init+0x188>)
 8000936:	f005 f923 	bl	8005b80 <HAL_TIMEx_MasterConfigSynchronization>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000940:	f000 fa78 	bl	8000e34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000944:	2360      	movs	r3, #96	; 0x60
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800094c:	2300      	movs	r3, #0
 800094e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000950:	2300      	movs	r3, #0
 8000952:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000954:	2300      	movs	r3, #0
 8000956:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000958:	2300      	movs	r3, #0
 800095a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800095c:	2300      	movs	r3, #0
 800095e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000960:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000964:	2200      	movs	r2, #0
 8000966:	4619      	mov	r1, r3
 8000968:	4827      	ldr	r0, [pc, #156]	; (8000a08 <MX_TIM1_Init+0x188>)
 800096a:	f004 fabb 	bl	8004ee4 <HAL_TIM_PWM_ConfigChannel>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000974:	f000 fa5e 	bl	8000e34 <Error_Handler>
  }
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8000978:	2308      	movs	r3, #8
 800097a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800097c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000980:	2204      	movs	r2, #4
 8000982:	4619      	mov	r1, r3
 8000984:	4820      	ldr	r0, [pc, #128]	; (8000a08 <MX_TIM1_Init+0x188>)
 8000986:	f004 faad 	bl	8004ee4 <HAL_TIM_PWM_ConfigChannel>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000990:	f000 fa50 	bl	8000e34 <Error_Handler>
  }
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000994:	2300      	movs	r3, #0
 8000996:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000998:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099c:	2208      	movs	r2, #8
 800099e:	4619      	mov	r1, r3
 80009a0:	4819      	ldr	r0, [pc, #100]	; (8000a08 <MX_TIM1_Init+0x188>)
 80009a2:	f004 fa9f 	bl	8004ee4 <HAL_TIM_PWM_ConfigChannel>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 80009ac:	f000 fa42 	bl	8000e34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b4:	220c      	movs	r2, #12
 80009b6:	4619      	mov	r1, r3
 80009b8:	4813      	ldr	r0, [pc, #76]	; (8000a08 <MX_TIM1_Init+0x188>)
 80009ba:	f004 fa93 	bl	8004ee4 <HAL_TIM_PWM_ConfigChannel>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 80009c4:	f000 fa36 	bl	8000e34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009c8:	2300      	movs	r3, #0
 80009ca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009cc:	2300      	movs	r3, #0
 80009ce:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009d0:	2300      	movs	r3, #0
 80009d2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009e0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009e2:	2300      	movs	r3, #0
 80009e4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	4619      	mov	r1, r3
 80009ea:	4807      	ldr	r0, [pc, #28]	; (8000a08 <MX_TIM1_Init+0x188>)
 80009ec:	f005 f944 	bl	8005c78 <HAL_TIMEx_ConfigBreakDeadTime>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 80009f6:	f000 fa1d 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009fa:	4803      	ldr	r0, [pc, #12]	; (8000a08 <MX_TIM1_Init+0x188>)
 80009fc:	f000 fb90 	bl	8001120 <HAL_TIM_MspPostInit>

}
 8000a00:	bf00      	nop
 8000a02:	3758      	adds	r7, #88	; 0x58
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000234 	.word	0x20000234
 8000a0c:	40010000 	.word	0x40010000

08000a10 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08e      	sub	sp, #56	; 0x38
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a24:	f107 0320 	add.w	r3, r7, #32
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]
 8000a3c:	615a      	str	r2, [r3, #20]
 8000a3e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a40:	4b2d      	ldr	r3, [pc, #180]	; (8000af8 <MX_TIM4_Init+0xe8>)
 8000a42:	4a2e      	ldr	r2, [pc, #184]	; (8000afc <MX_TIM4_Init+0xec>)
 8000a44:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1680;
 8000a46:	4b2c      	ldr	r3, [pc, #176]	; (8000af8 <MX_TIM4_Init+0xe8>)
 8000a48:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8000a4c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a4e:	4b2a      	ldr	r3, [pc, #168]	; (8000af8 <MX_TIM4_Init+0xe8>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8000a54:	4b28      	ldr	r3, [pc, #160]	; (8000af8 <MX_TIM4_Init+0xe8>)
 8000a56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a5a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a5c:	4b26      	ldr	r3, [pc, #152]	; (8000af8 <MX_TIM4_Init+0xe8>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a62:	4b25      	ldr	r3, [pc, #148]	; (8000af8 <MX_TIM4_Init+0xe8>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a68:	4823      	ldr	r0, [pc, #140]	; (8000af8 <MX_TIM4_Init+0xe8>)
 8000a6a:	f003 ff5b 	bl	8004924 <HAL_TIM_Base_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000a74:	f000 f9de 	bl	8000e34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000a7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a82:	4619      	mov	r1, r3
 8000a84:	481c      	ldr	r0, [pc, #112]	; (8000af8 <MX_TIM4_Init+0xe8>)
 8000a86:	f004 faf3 	bl	8005070 <HAL_TIM_ConfigClockSource>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000a90:	f000 f9d0 	bl	8000e34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a94:	4818      	ldr	r0, [pc, #96]	; (8000af8 <MX_TIM4_Init+0xe8>)
 8000a96:	f003 ff70 	bl	800497a <HAL_TIM_PWM_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000aa0:	f000 f9c8 	bl	8000e34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000aac:	f107 0320 	add.w	r3, r7, #32
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4811      	ldr	r0, [pc, #68]	; (8000af8 <MX_TIM4_Init+0xe8>)
 8000ab4:	f005 f864 	bl	8005b80 <HAL_TIMEx_MasterConfigSynchronization>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000abe:	f000 f9b9 	bl	8000e34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ac2:	2360      	movs	r3, #96	; 0x60
 8000ac4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ad2:	1d3b      	adds	r3, r7, #4
 8000ad4:	220c      	movs	r2, #12
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4807      	ldr	r0, [pc, #28]	; (8000af8 <MX_TIM4_Init+0xe8>)
 8000ada:	f004 fa03 	bl	8004ee4 <HAL_TIM_PWM_ConfigChannel>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000ae4:	f000 f9a6 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000ae8:	4803      	ldr	r0, [pc, #12]	; (8000af8 <MX_TIM4_Init+0xe8>)
 8000aea:	f000 fb19 	bl	8001120 <HAL_TIM_MspPostInit>

}
 8000aee:	bf00      	nop
 8000af0:	3738      	adds	r7, #56	; 0x38
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	200001a8 	.word	0x200001a8
 8000afc:	40000800 	.word	0x40000800

08000b00 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b09a      	sub	sp, #104	; 0x68
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b06:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
 8000b12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b14:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b1e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	60da      	str	r2, [r3, #12]
 8000b2c:	611a      	str	r2, [r3, #16]
 8000b2e:	615a      	str	r2, [r3, #20]
 8000b30:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000b32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	605a      	str	r2, [r3, #4]
 8000b3c:	609a      	str	r2, [r3, #8]
 8000b3e:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	2220      	movs	r2, #32
 8000b44:	2100      	movs	r1, #0
 8000b46:	4618      	mov	r0, r3
 8000b48:	f005 f951 	bl	8005dee <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000b4c:	4b58      	ldr	r3, [pc, #352]	; (8000cb0 <MX_TIM8_Init+0x1b0>)
 8000b4e:	4a59      	ldr	r2, [pc, #356]	; (8000cb4 <MX_TIM8_Init+0x1b4>)
 8000b50:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 84-1;
 8000b52:	4b57      	ldr	r3, [pc, #348]	; (8000cb0 <MX_TIM8_Init+0x1b0>)
 8000b54:	2253      	movs	r2, #83	; 0x53
 8000b56:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b58:	4b55      	ldr	r3, [pc, #340]	; (8000cb0 <MX_TIM8_Init+0x1b0>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 10000;
 8000b5e:	4b54      	ldr	r3, [pc, #336]	; (8000cb0 <MX_TIM8_Init+0x1b0>)
 8000b60:	f242 7210 	movw	r2, #10000	; 0x2710
 8000b64:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b66:	4b52      	ldr	r3, [pc, #328]	; (8000cb0 <MX_TIM8_Init+0x1b0>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000b6c:	4b50      	ldr	r3, [pc, #320]	; (8000cb0 <MX_TIM8_Init+0x1b0>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b72:	4b4f      	ldr	r3, [pc, #316]	; (8000cb0 <MX_TIM8_Init+0x1b0>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000b78:	484d      	ldr	r0, [pc, #308]	; (8000cb0 <MX_TIM8_Init+0x1b0>)
 8000b7a:	f003 fed3 	bl	8004924 <HAL_TIM_Base_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_TIM8_Init+0x88>
  {
    Error_Handler();
 8000b84:	f000 f956 	bl	8000e34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b8c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000b8e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b92:	4619      	mov	r1, r3
 8000b94:	4846      	ldr	r0, [pc, #280]	; (8000cb0 <MX_TIM8_Init+0x1b0>)
 8000b96:	f004 fa6b 	bl	8005070 <HAL_TIM_ConfigClockSource>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8000ba0:	f000 f948 	bl	8000e34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000ba4:	4842      	ldr	r0, [pc, #264]	; (8000cb0 <MX_TIM8_Init+0x1b0>)
 8000ba6:	f003 fee8 	bl	800497a <HAL_TIM_PWM_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_TIM8_Init+0xb4>
  {
    Error_Handler();
 8000bb0:	f000 f940 	bl	8000e34 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8000bb4:	483e      	ldr	r0, [pc, #248]	; (8000cb0 <MX_TIM8_Init+0x1b0>)
 8000bb6:	f003 ff53 	bl	8004a60 <HAL_TIM_IC_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000bc0:	f000 f938 	bl	8000e34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000bcc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4837      	ldr	r0, [pc, #220]	; (8000cb0 <MX_TIM8_Init+0x1b0>)
 8000bd4:	f004 ffd4 	bl	8005b80 <HAL_TIMEx_MasterConfigSynchronization>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_TIM8_Init+0xe2>
  {
    Error_Handler();
 8000bde:	f000 f929 	bl	8000e34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000be2:	2360      	movs	r3, #96	; 0x60
 8000be4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 10;
 8000be6:	230a      	movs	r3, #10
 8000be8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bea:	2300      	movs	r3, #0
 8000bec:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bfe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c02:	2200      	movs	r2, #0
 8000c04:	4619      	mov	r1, r3
 8000c06:	482a      	ldr	r0, [pc, #168]	; (8000cb0 <MX_TIM8_Init+0x1b0>)
 8000c08:	f004 f96c 	bl	8004ee4 <HAL_TIM_PWM_ConfigChannel>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 8000c12:	f000 f90f 	bl	8000e34 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c16:	2300      	movs	r3, #0
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigIC.ICFilter = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000c26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2a:	2204      	movs	r2, #4
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4820      	ldr	r0, [pc, #128]	; (8000cb0 <MX_TIM8_Init+0x1b0>)
 8000c30:	f004 f8bc 	bl	8004dac <HAL_TIM_IC_ConfigChannel>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 8000c3a:	f000 f8fb 	bl	8000e34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c3e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c42:	2208      	movs	r2, #8
 8000c44:	4619      	mov	r1, r3
 8000c46:	481a      	ldr	r0, [pc, #104]	; (8000cb0 <MX_TIM8_Init+0x1b0>)
 8000c48:	f004 f94c 	bl	8004ee4 <HAL_TIM_PWM_ConfigChannel>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_TIM8_Init+0x156>
  {
    Error_Handler();
 8000c52:	f000 f8ef 	bl	8000e34 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000c56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5a:	220c      	movs	r2, #12
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4814      	ldr	r0, [pc, #80]	; (8000cb0 <MX_TIM8_Init+0x1b0>)
 8000c60:	f004 f8a4 	bl	8004dac <HAL_TIM_IC_ConfigChannel>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_TIM8_Init+0x16e>
  {
    Error_Handler();
 8000c6a:	f000 f8e3 	bl	8000e34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c72:	2300      	movs	r3, #0
 8000c74:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c86:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4807      	ldr	r0, [pc, #28]	; (8000cb0 <MX_TIM8_Init+0x1b0>)
 8000c92:	f004 fff1 	bl	8005c78 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM8_Init+0x1a0>
  {
    Error_Handler();
 8000c9c:	f000 f8ca 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000ca0:	4803      	ldr	r0, [pc, #12]	; (8000cb0 <MX_TIM8_Init+0x1b0>)
 8000ca2:	f000 fa3d 	bl	8001120 <HAL_TIM_MspPostInit>

}
 8000ca6:	bf00      	nop
 8000ca8:	3768      	adds	r7, #104	; 0x68
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000168 	.word	0x20000168
 8000cb4:	40010400 	.word	0x40010400

08000cb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08a      	sub	sp, #40	; 0x28
 8000cbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]
 8000ccc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
 8000cd2:	4b53      	ldr	r3, [pc, #332]	; (8000e20 <MX_GPIO_Init+0x168>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a52      	ldr	r2, [pc, #328]	; (8000e20 <MX_GPIO_Init+0x168>)
 8000cd8:	f043 0304 	orr.w	r3, r3, #4
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b50      	ldr	r3, [pc, #320]	; (8000e20 <MX_GPIO_Init+0x168>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0304 	and.w	r3, r3, #4
 8000ce6:	613b      	str	r3, [r7, #16]
 8000ce8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	4b4c      	ldr	r3, [pc, #304]	; (8000e20 <MX_GPIO_Init+0x168>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a4b      	ldr	r2, [pc, #300]	; (8000e20 <MX_GPIO_Init+0x168>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b49      	ldr	r3, [pc, #292]	; (8000e20 <MX_GPIO_Init+0x168>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	4b45      	ldr	r3, [pc, #276]	; (8000e20 <MX_GPIO_Init+0x168>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a44      	ldr	r2, [pc, #272]	; (8000e20 <MX_GPIO_Init+0x168>)
 8000d10:	f043 0302 	orr.w	r3, r3, #2
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b42      	ldr	r3, [pc, #264]	; (8000e20 <MX_GPIO_Init+0x168>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0302 	and.w	r3, r3, #2
 8000d1e:	60bb      	str	r3, [r7, #8]
 8000d20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	4b3e      	ldr	r3, [pc, #248]	; (8000e20 <MX_GPIO_Init+0x168>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a3d      	ldr	r2, [pc, #244]	; (8000e20 <MX_GPIO_Init+0x168>)
 8000d2c:	f043 0310 	orr.w	r3, r3, #16
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b3b      	ldr	r3, [pc, #236]	; (8000e20 <MX_GPIO_Init+0x168>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0310 	and.w	r3, r3, #16
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	603b      	str	r3, [r7, #0]
 8000d42:	4b37      	ldr	r3, [pc, #220]	; (8000e20 <MX_GPIO_Init+0x168>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	4a36      	ldr	r2, [pc, #216]	; (8000e20 <MX_GPIO_Init+0x168>)
 8000d48:	f043 0308 	orr.w	r3, r3, #8
 8000d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4e:	4b34      	ldr	r3, [pc, #208]	; (8000e20 <MX_GPIO_Init+0x168>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	f003 0308 	and.w	r3, r3, #8
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2110      	movs	r1, #16
 8000d5e:	4831      	ldr	r0, [pc, #196]	; (8000e24 <MX_GPIO_Init+0x16c>)
 8000d60:	f002 fc6a 	bl	8003638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN1_A_Pin|IN1_D_Pin|IN2_D_Pin|CE_Pin, GPIO_PIN_RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	f641 4104 	movw	r1, #7172	; 0x1c04
 8000d6a:	482f      	ldr	r0, [pc, #188]	; (8000e28 <MX_GPIO_Init+0x170>)
 8000d6c:	f002 fc64 	bl	8003638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, IN2_A_Pin|IN1_B_Pin|IN2_B_Pin|IN1_C_Pin
 8000d70:	2200      	movs	r2, #0
 8000d72:	f649 1180 	movw	r1, #39296	; 0x9980
 8000d76:	482d      	ldr	r0, [pc, #180]	; (8000e2c <MX_GPIO_Init+0x174>)
 8000d78:	f002 fc5e 	bl	8003638 <HAL_GPIO_WritePin>
                          |IN2_C_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CSN_Pin|USER_LED_Pin, GPIO_PIN_RESET);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000d82:	482b      	ldr	r0, [pc, #172]	; (8000e30 <MX_GPIO_Init+0x178>)
 8000d84:	f002 fc58 	bl	8003638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8000d88:	2310      	movs	r3, #16
 8000d8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d94:	2300      	movs	r3, #0
 8000d96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4821      	ldr	r0, [pc, #132]	; (8000e24 <MX_GPIO_Init+0x16c>)
 8000da0:	f002 fab0 	bl	8003304 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT1_DRY_Pin */
  GPIO_InitStruct.Pin = INT1_DRY_Pin;
 8000da4:	2320      	movs	r3, #32
 8000da6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da8:	2300      	movs	r3, #0
 8000daa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT1_DRY_GPIO_Port, &GPIO_InitStruct);
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	4619      	mov	r1, r3
 8000db6:	481b      	ldr	r0, [pc, #108]	; (8000e24 <MX_GPIO_Init+0x16c>)
 8000db8:	f002 faa4 	bl	8003304 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_A_Pin IN1_D_Pin IN2_D_Pin CE_Pin */
  GPIO_InitStruct.Pin = IN1_A_Pin|IN1_D_Pin|IN2_D_Pin|CE_Pin;
 8000dbc:	f641 4304 	movw	r3, #7172	; 0x1c04
 8000dc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dce:	f107 0314 	add.w	r3, r7, #20
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4814      	ldr	r0, [pc, #80]	; (8000e28 <MX_GPIO_Init+0x170>)
 8000dd6:	f002 fa95 	bl	8003304 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN2_A_Pin IN1_B_Pin IN2_B_Pin IN1_C_Pin
                           IN2_C_Pin */
  GPIO_InitStruct.Pin = IN2_A_Pin|IN1_B_Pin|IN2_B_Pin|IN1_C_Pin
 8000dda:	f649 1380 	movw	r3, #39296	; 0x9980
 8000dde:	617b      	str	r3, [r7, #20]
                          |IN2_C_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de0:	2301      	movs	r3, #1
 8000de2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	2300      	movs	r3, #0
 8000dea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	4619      	mov	r1, r3
 8000df2:	480e      	ldr	r0, [pc, #56]	; (8000e2c <MX_GPIO_Init+0x174>)
 8000df4:	f002 fa86 	bl	8003304 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSN_Pin USER_LED_Pin */
  GPIO_InitStruct.Pin = CSN_Pin|USER_LED_Pin;
 8000df8:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000dfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e06:	2300      	movs	r3, #0
 8000e08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e0a:	f107 0314 	add.w	r3, r7, #20
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4807      	ldr	r0, [pc, #28]	; (8000e30 <MX_GPIO_Init+0x178>)
 8000e12:	f002 fa77 	bl	8003304 <HAL_GPIO_Init>

}
 8000e16:	bf00      	nop
 8000e18:	3728      	adds	r7, #40	; 0x28
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40020800 	.word	0x40020800
 8000e28:	40020400 	.word	0x40020400
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	40020c00 	.word	0x40020c00

08000e34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
	...

08000e44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	607b      	str	r3, [r7, #4]
 8000e4e:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <HAL_MspInit+0x4c>)
 8000e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e52:	4a0f      	ldr	r2, [pc, #60]	; (8000e90 <HAL_MspInit+0x4c>)
 8000e54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e58:	6453      	str	r3, [r2, #68]	; 0x44
 8000e5a:	4b0d      	ldr	r3, [pc, #52]	; (8000e90 <HAL_MspInit+0x4c>)
 8000e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e62:	607b      	str	r3, [r7, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	603b      	str	r3, [r7, #0]
 8000e6a:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <HAL_MspInit+0x4c>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	4a08      	ldr	r2, [pc, #32]	; (8000e90 <HAL_MspInit+0x4c>)
 8000e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e74:	6413      	str	r3, [r2, #64]	; 0x40
 8000e76:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <HAL_MspInit+0x4c>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7e:	603b      	str	r3, [r7, #0]
 8000e80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	40023800 	.word	0x40023800

08000e94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08a      	sub	sp, #40	; 0x28
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a17      	ldr	r2, [pc, #92]	; (8000f10 <HAL_ADC_MspInit+0x7c>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d127      	bne.n	8000f06 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	613b      	str	r3, [r7, #16]
 8000eba:	4b16      	ldr	r3, [pc, #88]	; (8000f14 <HAL_ADC_MspInit+0x80>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ebe:	4a15      	ldr	r2, [pc, #84]	; (8000f14 <HAL_ADC_MspInit+0x80>)
 8000ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ec6:	4b13      	ldr	r3, [pc, #76]	; (8000f14 <HAL_ADC_MspInit+0x80>)
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ece:	613b      	str	r3, [r7, #16]
 8000ed0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <HAL_ADC_MspInit+0x80>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	4a0e      	ldr	r2, [pc, #56]	; (8000f14 <HAL_ADC_MspInit+0x80>)
 8000edc:	f043 0304 	orr.w	r3, r3, #4
 8000ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee2:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <HAL_ADC_MspInit+0x80>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	f003 0304 	and.w	r3, r3, #4
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000efa:	f107 0314 	add.w	r3, r7, #20
 8000efe:	4619      	mov	r1, r3
 8000f00:	4805      	ldr	r0, [pc, #20]	; (8000f18 <HAL_ADC_MspInit+0x84>)
 8000f02:	f002 f9ff 	bl	8003304 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f06:	bf00      	nop
 8000f08:	3728      	adds	r7, #40	; 0x28
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40012000 	.word	0x40012000
 8000f14:	40023800 	.word	0x40023800
 8000f18:	40020800 	.word	0x40020800

08000f1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08c      	sub	sp, #48	; 0x30
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	f107 031c 	add.w	r3, r7, #28
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a32      	ldr	r2, [pc, #200]	; (8001004 <HAL_SPI_MspInit+0xe8>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d12c      	bne.n	8000f98 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61bb      	str	r3, [r7, #24]
 8000f42:	4b31      	ldr	r3, [pc, #196]	; (8001008 <HAL_SPI_MspInit+0xec>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f46:	4a30      	ldr	r2, [pc, #192]	; (8001008 <HAL_SPI_MspInit+0xec>)
 8000f48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f4e:	4b2e      	ldr	r3, [pc, #184]	; (8001008 <HAL_SPI_MspInit+0xec>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f56:	61bb      	str	r3, [r7, #24]
 8000f58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
 8000f5e:	4b2a      	ldr	r3, [pc, #168]	; (8001008 <HAL_SPI_MspInit+0xec>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a29      	ldr	r2, [pc, #164]	; (8001008 <HAL_SPI_MspInit+0xec>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6a:	4b27      	ldr	r3, [pc, #156]	; (8001008 <HAL_SPI_MspInit+0xec>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	617b      	str	r3, [r7, #20]
 8000f74:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f76:	23e0      	movs	r3, #224	; 0xe0
 8000f78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f82:	2303      	movs	r3, #3
 8000f84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f86:	2305      	movs	r3, #5
 8000f88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8a:	f107 031c 	add.w	r3, r7, #28
 8000f8e:	4619      	mov	r1, r3
 8000f90:	481e      	ldr	r0, [pc, #120]	; (800100c <HAL_SPI_MspInit+0xf0>)
 8000f92:	f002 f9b7 	bl	8003304 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000f96:	e031      	b.n	8000ffc <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a1c      	ldr	r2, [pc, #112]	; (8001010 <HAL_SPI_MspInit+0xf4>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d12c      	bne.n	8000ffc <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	613b      	str	r3, [r7, #16]
 8000fa6:	4b18      	ldr	r3, [pc, #96]	; (8001008 <HAL_SPI_MspInit+0xec>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	4a17      	ldr	r2, [pc, #92]	; (8001008 <HAL_SPI_MspInit+0xec>)
 8000fac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb2:	4b15      	ldr	r3, [pc, #84]	; (8001008 <HAL_SPI_MspInit+0xec>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	4b11      	ldr	r3, [pc, #68]	; (8001008 <HAL_SPI_MspInit+0xec>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a10      	ldr	r2, [pc, #64]	; (8001008 <HAL_SPI_MspInit+0xec>)
 8000fc8:	f043 0302 	orr.w	r3, r3, #2
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <HAL_SPI_MspInit+0xec>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000fda:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000fde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fec:	2305      	movs	r3, #5
 8000fee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff0:	f107 031c 	add.w	r3, r7, #28
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4807      	ldr	r0, [pc, #28]	; (8001014 <HAL_SPI_MspInit+0xf8>)
 8000ff8:	f002 f984 	bl	8003304 <HAL_GPIO_Init>
}
 8000ffc:	bf00      	nop
 8000ffe:	3730      	adds	r7, #48	; 0x30
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40013000 	.word	0x40013000
 8001008:	40023800 	.word	0x40023800
 800100c:	40020000 	.word	0x40020000
 8001010:	40003800 	.word	0x40003800
 8001014:	40020400 	.word	0x40020400

08001018 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08c      	sub	sp, #48	; 0x30
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 031c 	add.w	r3, r7, #28
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a35      	ldr	r2, [pc, #212]	; (800110c <HAL_TIM_Base_MspInit+0xf4>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d10e      	bne.n	8001058 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	61bb      	str	r3, [r7, #24]
 800103e:	4b34      	ldr	r3, [pc, #208]	; (8001110 <HAL_TIM_Base_MspInit+0xf8>)
 8001040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001042:	4a33      	ldr	r2, [pc, #204]	; (8001110 <HAL_TIM_Base_MspInit+0xf8>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6453      	str	r3, [r2, #68]	; 0x44
 800104a:	4b31      	ldr	r3, [pc, #196]	; (8001110 <HAL_TIM_Base_MspInit+0xf8>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	61bb      	str	r3, [r7, #24]
 8001054:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001056:	e055      	b.n	8001104 <HAL_TIM_Base_MspInit+0xec>
  else if(htim_base->Instance==TIM4)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a2d      	ldr	r2, [pc, #180]	; (8001114 <HAL_TIM_Base_MspInit+0xfc>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d10e      	bne.n	8001080 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
 8001066:	4b2a      	ldr	r3, [pc, #168]	; (8001110 <HAL_TIM_Base_MspInit+0xf8>)
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	4a29      	ldr	r2, [pc, #164]	; (8001110 <HAL_TIM_Base_MspInit+0xf8>)
 800106c:	f043 0304 	orr.w	r3, r3, #4
 8001070:	6413      	str	r3, [r2, #64]	; 0x40
 8001072:	4b27      	ldr	r3, [pc, #156]	; (8001110 <HAL_TIM_Base_MspInit+0xf8>)
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	f003 0304 	and.w	r3, r3, #4
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	697b      	ldr	r3, [r7, #20]
}
 800107e:	e041      	b.n	8001104 <HAL_TIM_Base_MspInit+0xec>
  else if(htim_base->Instance==TIM8)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a24      	ldr	r2, [pc, #144]	; (8001118 <HAL_TIM_Base_MspInit+0x100>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d13c      	bne.n	8001104 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
 800108e:	4b20      	ldr	r3, [pc, #128]	; (8001110 <HAL_TIM_Base_MspInit+0xf8>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	4a1f      	ldr	r2, [pc, #124]	; (8001110 <HAL_TIM_Base_MspInit+0xf8>)
 8001094:	f043 0302 	orr.w	r3, r3, #2
 8001098:	6453      	str	r3, [r2, #68]	; 0x44
 800109a:	4b1d      	ldr	r3, [pc, #116]	; (8001110 <HAL_TIM_Base_MspInit+0xf8>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	4b19      	ldr	r3, [pc, #100]	; (8001110 <HAL_TIM_Base_MspInit+0xf8>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	4a18      	ldr	r2, [pc, #96]	; (8001110 <HAL_TIM_Base_MspInit+0xf8>)
 80010b0:	f043 0304 	orr.w	r3, r3, #4
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4b16      	ldr	r3, [pc, #88]	; (8001110 <HAL_TIM_Base_MspInit+0xf8>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f003 0304 	and.w	r3, r3, #4
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 80010c2:	f44f 7320 	mov.w	r3, #640	; 0x280
 80010c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c8:	2302      	movs	r3, #2
 80010ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d0:	2300      	movs	r3, #0
 80010d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80010d4:	2303      	movs	r3, #3
 80010d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d8:	f107 031c 	add.w	r3, r7, #28
 80010dc:	4619      	mov	r1, r3
 80010de:	480f      	ldr	r0, [pc, #60]	; (800111c <HAL_TIM_Base_MspInit+0x104>)
 80010e0:	f002 f910 	bl	8003304 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2100      	movs	r1, #0
 80010e8:	202b      	movs	r0, #43	; 0x2b
 80010ea:	f002 f8d4 	bl	8003296 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80010ee:	202b      	movs	r0, #43	; 0x2b
 80010f0:	f002 f8ed 	bl	80032ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 80010f4:	2200      	movs	r2, #0
 80010f6:	2100      	movs	r1, #0
 80010f8:	202e      	movs	r0, #46	; 0x2e
 80010fa:	f002 f8cc 	bl	8003296 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80010fe:	202e      	movs	r0, #46	; 0x2e
 8001100:	f002 f8e5 	bl	80032ce <HAL_NVIC_EnableIRQ>
}
 8001104:	bf00      	nop
 8001106:	3730      	adds	r7, #48	; 0x30
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40010000 	.word	0x40010000
 8001110:	40023800 	.word	0x40023800
 8001114:	40000800 	.word	0x40000800
 8001118:	40010400 	.word	0x40010400
 800111c:	40020800 	.word	0x40020800

08001120 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08a      	sub	sp, #40	; 0x28
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a37      	ldr	r2, [pc, #220]	; (800121c <HAL_TIM_MspPostInit+0xfc>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d11f      	bne.n	8001182 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]
 8001146:	4b36      	ldr	r3, [pc, #216]	; (8001220 <HAL_TIM_MspPostInit+0x100>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a35      	ldr	r2, [pc, #212]	; (8001220 <HAL_TIM_MspPostInit+0x100>)
 800114c:	f043 0310 	orr.w	r3, r3, #16
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b33      	ldr	r3, [pc, #204]	; (8001220 <HAL_TIM_MspPostInit+0x100>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0310 	and.w	r3, r3, #16
 800115a:	613b      	str	r3, [r7, #16]
 800115c:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE10     ------> TIM1_CH2N
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_14;
 800115e:	f44f 43cc 	mov.w	r3, #26112	; 0x6600
 8001162:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001164:	2302      	movs	r3, #2
 8001166:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116c:	2300      	movs	r3, #0
 800116e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001170:	2301      	movs	r3, #1
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	4619      	mov	r1, r3
 800117a:	482a      	ldr	r0, [pc, #168]	; (8001224 <HAL_TIM_MspPostInit+0x104>)
 800117c:	f002 f8c2 	bl	8003304 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001180:	e048      	b.n	8001214 <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM4)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a28      	ldr	r2, [pc, #160]	; (8001228 <HAL_TIM_MspPostInit+0x108>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d11f      	bne.n	80011cc <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800118c:	2300      	movs	r3, #0
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	4b23      	ldr	r3, [pc, #140]	; (8001220 <HAL_TIM_MspPostInit+0x100>)
 8001192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001194:	4a22      	ldr	r2, [pc, #136]	; (8001220 <HAL_TIM_MspPostInit+0x100>)
 8001196:	f043 0308 	orr.w	r3, r3, #8
 800119a:	6313      	str	r3, [r2, #48]	; 0x30
 800119c:	4b20      	ldr	r3, [pc, #128]	; (8001220 <HAL_TIM_MspPostInit+0x100>)
 800119e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a0:	f003 0308 	and.w	r3, r3, #8
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80011a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ae:	2302      	movs	r3, #2
 80011b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b6:	2300      	movs	r3, #0
 80011b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80011ba:	2302      	movs	r3, #2
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	4619      	mov	r1, r3
 80011c4:	4819      	ldr	r0, [pc, #100]	; (800122c <HAL_TIM_MspPostInit+0x10c>)
 80011c6:	f002 f89d 	bl	8003304 <HAL_GPIO_Init>
}
 80011ca:	e023      	b.n	8001214 <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM8)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a17      	ldr	r2, [pc, #92]	; (8001230 <HAL_TIM_MspPostInit+0x110>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d11e      	bne.n	8001214 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	4b11      	ldr	r3, [pc, #68]	; (8001220 <HAL_TIM_MspPostInit+0x100>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a10      	ldr	r2, [pc, #64]	; (8001220 <HAL_TIM_MspPostInit+0x100>)
 80011e0:	f043 0304 	orr.w	r3, r3, #4
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <HAL_TIM_MspPostInit+0x100>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f003 0304 	and.w	r3, r3, #4
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 80011f2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80011f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f8:	2302      	movs	r3, #2
 80011fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001200:	2300      	movs	r3, #0
 8001202:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001204:	2303      	movs	r3, #3
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	4619      	mov	r1, r3
 800120e:	4809      	ldr	r0, [pc, #36]	; (8001234 <HAL_TIM_MspPostInit+0x114>)
 8001210:	f002 f878 	bl	8003304 <HAL_GPIO_Init>
}
 8001214:	bf00      	nop
 8001216:	3728      	adds	r7, #40	; 0x28
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40010000 	.word	0x40010000
 8001220:	40023800 	.word	0x40023800
 8001224:	40021000 	.word	0x40021000
 8001228:	40000800 	.word	0x40000800
 800122c:	40020c00 	.word	0x40020c00
 8001230:	40010400 	.word	0x40010400
 8001234:	40020800 	.word	0x40020800

08001238 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800124a:	e7fe      	b.n	800124a <HardFault_Handler+0x4>

0800124c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001250:	e7fe      	b.n	8001250 <MemManage_Handler+0x4>

08001252 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001256:	e7fe      	b.n	8001256 <BusFault_Handler+0x4>

08001258 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800125c:	e7fe      	b.n	800125c <UsageFault_Handler+0x4>

0800125e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800128c:	f001 fb2c 	bl	80028e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}

08001294 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001298:	4802      	ldr	r0, [pc, #8]	; (80012a4 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 800129a:	f003 fc7f 	bl	8004b9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000168 	.word	0x20000168

080012a8 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80012ac:	4802      	ldr	r0, [pc, #8]	; (80012b8 <TIM8_CC_IRQHandler+0x10>)
 80012ae:	f003 fc75 	bl	8004b9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000168 	.word	0x20000168

080012bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012c0:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <SystemInit+0x28>)
 80012c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012c6:	4a07      	ldr	r2, [pc, #28]	; (80012e4 <SystemInit+0x28>)
 80012c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012d0:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <SystemInit+0x28>)
 80012d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012d6:	609a      	str	r2, [r3, #8]
#endif
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <NRF24_DelayMicroSeconds>:
static SPI_HandleTypeDef nrf24_hspi;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 80012f4:	4b0a      	ldr	r3, [pc, #40]	; (8001320 <NRF24_DelayMicroSeconds+0x38>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a0a      	ldr	r2, [pc, #40]	; (8001324 <NRF24_DelayMicroSeconds+0x3c>)
 80012fa:	fba2 2303 	umull	r2, r3, r2, r3
 80012fe:	0c9a      	lsrs	r2, r3, #18
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	fb02 f303 	mul.w	r3, r2, r3
 8001306:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8001308:	bf00      	nop
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	1e5a      	subs	r2, r3, #1
 800130e:	60fa      	str	r2, [r7, #12]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d1fa      	bne.n	800130a <NRF24_DelayMicroSeconds+0x22>
}
 8001314:	bf00      	nop
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	2000002c 	.word	0x2000002c
 8001324:	165e9f81 	.word	0x165e9f81

08001328 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d008      	beq.n	8001348 <NRF24_csn+0x20>
 8001336:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <NRF24_csn+0x38>)
 8001338:	6818      	ldr	r0, [r3, #0]
 800133a:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <NRF24_csn+0x3c>)
 800133c:	881b      	ldrh	r3, [r3, #0]
 800133e:	2201      	movs	r2, #1
 8001340:	4619      	mov	r1, r3
 8001342:	f002 f979 	bl	8003638 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8001346:	e007      	b.n	8001358 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8001348:	4b05      	ldr	r3, [pc, #20]	; (8001360 <NRF24_csn+0x38>)
 800134a:	6818      	ldr	r0, [r3, #0]
 800134c:	4b05      	ldr	r3, [pc, #20]	; (8001364 <NRF24_csn+0x3c>)
 800134e:	881b      	ldrh	r3, [r3, #0]
 8001350:	2200      	movs	r2, #0
 8001352:	4619      	mov	r1, r3
 8001354:	f002 f970 	bl	8003638 <HAL_GPIO_WritePin>
}
 8001358:	bf00      	nop
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	2000006c 	.word	0x2000006c
 8001364:	20000074 	.word	0x20000074

08001368 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_CE_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d008      	beq.n	8001388 <NRF24_ce+0x20>
 8001376:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <NRF24_ce+0x38>)
 8001378:	6818      	ldr	r0, [r3, #0]
 800137a:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <NRF24_ce+0x3c>)
 800137c:	881b      	ldrh	r3, [r3, #0]
 800137e:	2201      	movs	r2, #1
 8001380:	4619      	mov	r1, r3
 8001382:	f002 f959 	bl	8003638 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_CE_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8001386:	e007      	b.n	8001398 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_CE_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <NRF24_ce+0x38>)
 800138a:	6818      	ldr	r0, [r3, #0]
 800138c:	4b05      	ldr	r3, [pc, #20]	; (80013a4 <NRF24_ce+0x3c>)
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	2200      	movs	r2, #0
 8001392:	4619      	mov	r1, r3
 8001394:	f002 f950 	bl	8003638 <HAL_GPIO_WritePin>
}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20000070 	.word	0x20000070
 80013a4:	20000076 	.word	0x20000076

080013a8 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 80013b2:	2000      	movs	r0, #0
 80013b4:	f7ff ffb8 	bl	8001328 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	f003 031f 	and.w	r3, r3, #31
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80013c2:	f107 010c 	add.w	r1, r7, #12
 80013c6:	2364      	movs	r3, #100	; 0x64
 80013c8:	2201      	movs	r2, #1
 80013ca:	480a      	ldr	r0, [pc, #40]	; (80013f4 <NRF24_read_register+0x4c>)
 80013cc:	f002 fdba 	bl	8003f44 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 80013d0:	f107 030c 	add.w	r3, r7, #12
 80013d4:	1c59      	adds	r1, r3, #1
 80013d6:	2364      	movs	r3, #100	; 0x64
 80013d8:	2201      	movs	r2, #1
 80013da:	4806      	ldr	r0, [pc, #24]	; (80013f4 <NRF24_read_register+0x4c>)
 80013dc:	f002 fee6 	bl	80041ac <HAL_SPI_Receive>
	retData = spiBuf[1];
 80013e0:	7b7b      	ldrb	r3, [r7, #13]
 80013e2:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 80013e4:	2001      	movs	r0, #1
 80013e6:	f7ff ff9f 	bl	8001328 <NRF24_csn>
	return retData;
 80013ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20000078 	.word	0x20000078

080013f8 <NRF24_write_register>:
	//Bring CSN high
	NRF24_csn(1);
}
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	460a      	mov	r2, r1
 8001402:	71fb      	strb	r3, [r7, #7]
 8001404:	4613      	mov	r3, r2
 8001406:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8001408:	2000      	movs	r0, #0
 800140a:	f7ff ff8d 	bl	8001328 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	f043 0320 	orr.w	r3, r3, #32
 8001414:	b2db      	uxtb	r3, r3
 8001416:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8001418:	79bb      	ldrb	r3, [r7, #6]
 800141a:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 800141c:	f107 010c 	add.w	r1, r7, #12
 8001420:	2364      	movs	r3, #100	; 0x64
 8001422:	2202      	movs	r2, #2
 8001424:	4804      	ldr	r0, [pc, #16]	; (8001438 <NRF24_write_register+0x40>)
 8001426:	f002 fd8d 	bl	8003f44 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800142a:	2001      	movs	r0, #1
 800142c:	f7ff ff7c 	bl	8001328 <NRF24_csn>
}
 8001430:	bf00      	nop
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000078 	.word	0x20000078

0800143c <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	6039      	str	r1, [r7, #0]
 8001446:	71fb      	strb	r3, [r7, #7]
 8001448:	4613      	mov	r3, r2
 800144a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800144c:	2000      	movs	r0, #0
 800144e:	f7ff ff6b 	bl	8001328 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	f043 0320 	orr.w	r3, r3, #32
 8001458:	b2db      	uxtb	r3, r3
 800145a:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800145c:	f107 010c 	add.w	r1, r7, #12
 8001460:	2364      	movs	r3, #100	; 0x64
 8001462:	2201      	movs	r2, #1
 8001464:	4808      	ldr	r0, [pc, #32]	; (8001488 <NRF24_write_registerN+0x4c>)
 8001466:	f002 fd6d 	bl	8003f44 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 800146a:	79bb      	ldrb	r3, [r7, #6]
 800146c:	b29a      	uxth	r2, r3
 800146e:	2364      	movs	r3, #100	; 0x64
 8001470:	6839      	ldr	r1, [r7, #0]
 8001472:	4805      	ldr	r0, [pc, #20]	; (8001488 <NRF24_write_registerN+0x4c>)
 8001474:	f002 fd66 	bl	8003f44 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8001478:	2001      	movs	r0, #1
 800147a:	f7ff ff55 	bl	8001328 <NRF24_csn>
}
 800147e:	bf00      	nop
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000078 	.word	0x20000078

0800148c <NRF24_read_payload>:
	//Bring CSN high
	NRF24_csn(1);
}
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	460b      	mov	r3, r1
 8001496:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8001498:	f000 fa0a 	bl	80018b0 <NRF24_getPayloadSize>
 800149c:	4603      	mov	r3, r0
 800149e:	461a      	mov	r2, r3
 80014a0:	78fb      	ldrb	r3, [r7, #3]
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d303      	bcc.n	80014ae <NRF24_read_payload+0x22>
 80014a6:	f000 fa03 	bl	80018b0 <NRF24_getPayloadSize>
 80014aa:	4603      	mov	r3, r0
 80014ac:	e000      	b.n	80014b0 <NRF24_read_payload+0x24>
 80014ae:	78fb      	ldrb	r3, [r7, #3]
 80014b0:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80014b2:	2000      	movs	r0, #0
 80014b4:	f7ff ff38 	bl	8001328 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 80014b8:	2361      	movs	r3, #97	; 0x61
 80014ba:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 80014bc:	f107 010e 	add.w	r1, r7, #14
 80014c0:	2364      	movs	r3, #100	; 0x64
 80014c2:	2201      	movs	r2, #1
 80014c4:	4808      	ldr	r0, [pc, #32]	; (80014e8 <NRF24_read_payload+0x5c>)
 80014c6:	f002 fd3d 	bl	8003f44 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	2364      	movs	r3, #100	; 0x64
 80014d0:	6879      	ldr	r1, [r7, #4]
 80014d2:	4805      	ldr	r0, [pc, #20]	; (80014e8 <NRF24_read_payload+0x5c>)
 80014d4:	f002 fe6a 	bl	80041ac <HAL_SPI_Receive>
	NRF24_csn(1);
 80014d8:	2001      	movs	r0, #1
 80014da:	f7ff ff25 	bl	8001328 <NRF24_csn>
}
 80014de:	bf00      	nop
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000078 	.word	0x20000078

080014ec <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 80014f0:	21ff      	movs	r1, #255	; 0xff
 80014f2:	20e1      	movs	r0, #225	; 0xe1
 80014f4:	f7ff ff80 	bl	80013f8 <NRF24_write_register>
}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}

080014fc <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8001500:	21ff      	movs	r1, #255	; 0xff
 8001502:	20e2      	movs	r0, #226	; 0xe2
 8001504:	f7ff ff78 	bl	80013f8 <NRF24_write_register>
}
 8001508:	bf00      	nop
 800150a:	bd80      	pop	{r7, pc}

0800150c <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8001512:	2007      	movs	r0, #7
 8001514:	f7ff ff48 	bl	80013a8 <NRF24_read_register>
 8001518:	4603      	mov	r3, r0
 800151a:	71fb      	strb	r3, [r7, #7]
	return statReg;
 800151c:	79fb      	ldrb	r3, [r7, #7]
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
	...

08001528 <NRF24_begin>:
//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, GPIO_TypeDef *nrf24CEPORT, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	607a      	str	r2, [r7, #4]
 8001532:	461a      	mov	r2, r3
 8001534:	460b      	mov	r3, r1
 8001536:	817b      	strh	r3, [r7, #10]
 8001538:	4613      	mov	r3, r2
 800153a:	813b      	strh	r3, [r7, #8]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 800153c:	4b65      	ldr	r3, [pc, #404]	; (80016d4 <NRF24_begin+0x1ac>)
 800153e:	4618      	mov	r0, r3
 8001540:	f107 0120 	add.w	r1, r7, #32
 8001544:	2358      	movs	r3, #88	; 0x58
 8001546:	461a      	mov	r2, r3
 8001548:	f004 fc46 	bl	8005dd8 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 800154c:	4a62      	ldr	r2, [pc, #392]	; (80016d8 <NRF24_begin+0x1b0>)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	6013      	str	r3, [r2, #0]
	nrf24_CE_PORT = nrf24CEPORT;
 8001552:	4a62      	ldr	r2, [pc, #392]	; (80016dc <NRF24_begin+0x1b4>)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8001558:	4a61      	ldr	r2, [pc, #388]	; (80016e0 <NRF24_begin+0x1b8>)
 800155a:	897b      	ldrh	r3, [r7, #10]
 800155c:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 800155e:	4a61      	ldr	r2, [pc, #388]	; (80016e4 <NRF24_begin+0x1bc>)
 8001560:	893b      	ldrh	r3, [r7, #8]
 8001562:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 8001564:	2001      	movs	r0, #1
 8001566:	f7ff fedf 	bl	8001328 <NRF24_csn>
	NRF24_ce(0);
 800156a:	2000      	movs	r0, #0
 800156c:	f7ff fefc 	bl	8001368 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8001570:	2005      	movs	r0, #5
 8001572:	f001 f9d9 	bl	8002928 <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8001576:	2108      	movs	r1, #8
 8001578:	2000      	movs	r0, #0
 800157a:	f7ff ff3d 	bl	80013f8 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 800157e:	213f      	movs	r1, #63	; 0x3f
 8001580:	2001      	movs	r0, #1
 8001582:	f7ff ff39 	bl	80013f8 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8001586:	2103      	movs	r1, #3
 8001588:	2002      	movs	r0, #2
 800158a:	f7ff ff35 	bl	80013f8 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 800158e:	2103      	movs	r1, #3
 8001590:	2003      	movs	r0, #3
 8001592:	f7ff ff31 	bl	80013f8 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8001596:	2103      	movs	r1, #3
 8001598:	2004      	movs	r0, #4
 800159a:	f7ff ff2d 	bl	80013f8 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 800159e:	2102      	movs	r1, #2
 80015a0:	2005      	movs	r0, #5
 80015a2:	f7ff ff29 	bl	80013f8 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 80015a6:	210f      	movs	r1, #15
 80015a8:	2006      	movs	r0, #6
 80015aa:	f7ff ff25 	bl	80013f8 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 80015ae:	210e      	movs	r1, #14
 80015b0:	2007      	movs	r0, #7
 80015b2:	f7ff ff21 	bl	80013f8 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 80015b6:	2100      	movs	r1, #0
 80015b8:	2008      	movs	r0, #8
 80015ba:	f7ff ff1d 	bl	80013f8 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 80015be:	2100      	movs	r1, #0
 80015c0:	2009      	movs	r0, #9
 80015c2:	f7ff ff19 	bl	80013f8 <NRF24_write_register>

	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7;
 80015c6:	23e7      	movs	r3, #231	; 0xe7
 80015c8:	753b      	strb	r3, [r7, #20]
	pipeAddrVar[3]=0xE7;
 80015ca:	23e7      	movs	r3, #231	; 0xe7
 80015cc:	74fb      	strb	r3, [r7, #19]
	pipeAddrVar[2]=0xE7;
 80015ce:	23e7      	movs	r3, #231	; 0xe7
 80015d0:	74bb      	strb	r3, [r7, #18]
	pipeAddrVar[1]=0xE7;
 80015d2:	23e7      	movs	r3, #231	; 0xe7
 80015d4:	747b      	strb	r3, [r7, #17]
	pipeAddrVar[0]=0xE7;
 80015d6:	23e7      	movs	r3, #231	; 0xe7
 80015d8:	743b      	strb	r3, [r7, #16]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 80015da:	f107 0310 	add.w	r3, r7, #16
 80015de:	2205      	movs	r2, #5
 80015e0:	4619      	mov	r1, r3
 80015e2:	200a      	movs	r0, #10
 80015e4:	f7ff ff2a 	bl	800143c <NRF24_write_registerN>

	pipeAddrVar[4]=0xC2;
 80015e8:	23c2      	movs	r3, #194	; 0xc2
 80015ea:	753b      	strb	r3, [r7, #20]
	pipeAddrVar[3]=0xC2;
 80015ec:	23c2      	movs	r3, #194	; 0xc2
 80015ee:	74fb      	strb	r3, [r7, #19]
	pipeAddrVar[2]=0xC2;
 80015f0:	23c2      	movs	r3, #194	; 0xc2
 80015f2:	74bb      	strb	r3, [r7, #18]
	pipeAddrVar[1]=0xC2;
 80015f4:	23c2      	movs	r3, #194	; 0xc2
 80015f6:	747b      	strb	r3, [r7, #17]
	pipeAddrVar[0]=0xC2;
 80015f8:	23c2      	movs	r3, #194	; 0xc2
 80015fa:	743b      	strb	r3, [r7, #16]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 80015fc:	f107 0310 	add.w	r3, r7, #16
 8001600:	2205      	movs	r2, #5
 8001602:	4619      	mov	r1, r3
 8001604:	200b      	movs	r0, #11
 8001606:	f7ff ff19 	bl	800143c <NRF24_write_registerN>

	NRF24_write_register(0x0C, 0xC3);
 800160a:	21c3      	movs	r1, #195	; 0xc3
 800160c:	200c      	movs	r0, #12
 800160e:	f7ff fef3 	bl	80013f8 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8001612:	21c4      	movs	r1, #196	; 0xc4
 8001614:	200d      	movs	r0, #13
 8001616:	f7ff feef 	bl	80013f8 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 800161a:	21c5      	movs	r1, #197	; 0xc5
 800161c:	200e      	movs	r0, #14
 800161e:	f7ff feeb 	bl	80013f8 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8001622:	21c6      	movs	r1, #198	; 0xc6
 8001624:	200f      	movs	r0, #15
 8001626:	f7ff fee7 	bl	80013f8 <NRF24_write_register>

	pipeAddrVar[4]=0xE7;
 800162a:	23e7      	movs	r3, #231	; 0xe7
 800162c:	753b      	strb	r3, [r7, #20]
	pipeAddrVar[3]=0xE7;
 800162e:	23e7      	movs	r3, #231	; 0xe7
 8001630:	74fb      	strb	r3, [r7, #19]
	pipeAddrVar[2]=0xE7;
 8001632:	23e7      	movs	r3, #231	; 0xe7
 8001634:	74bb      	strb	r3, [r7, #18]
	pipeAddrVar[1]=0xE7;
 8001636:	23e7      	movs	r3, #231	; 0xe7
 8001638:	747b      	strb	r3, [r7, #17]
	pipeAddrVar[0]=0xE7;
 800163a:	23e7      	movs	r3, #231	; 0xe7
 800163c:	743b      	strb	r3, [r7, #16]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 800163e:	f107 0310 	add.w	r3, r7, #16
 8001642:	2205      	movs	r2, #5
 8001644:	4619      	mov	r1, r3
 8001646:	2010      	movs	r0, #16
 8001648:	f7ff fef8 	bl	800143c <NRF24_write_registerN>

	NRF24_write_register(0x11, 0);
 800164c:	2100      	movs	r1, #0
 800164e:	2011      	movs	r0, #17
 8001650:	f7ff fed2 	bl	80013f8 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8001654:	2100      	movs	r1, #0
 8001656:	2012      	movs	r0, #18
 8001658:	f7ff fece 	bl	80013f8 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 800165c:	2100      	movs	r1, #0
 800165e:	2013      	movs	r0, #19
 8001660:	f7ff feca 	bl	80013f8 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8001664:	2100      	movs	r1, #0
 8001666:	2014      	movs	r0, #20
 8001668:	f7ff fec6 	bl	80013f8 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 800166c:	2100      	movs	r1, #0
 800166e:	2015      	movs	r0, #21
 8001670:	f7ff fec2 	bl	80013f8 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8001674:	2100      	movs	r1, #0
 8001676:	2016      	movs	r0, #22
 8001678:	f7ff febe 	bl	80013f8 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 800167c:	f000 fad2 	bl	8001c24 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8001680:	2100      	movs	r1, #0
 8001682:	201c      	movs	r0, #28
 8001684:	f7ff feb8 	bl	80013f8 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8001688:	2100      	movs	r1, #0
 800168a:	201d      	movs	r0, #29
 800168c:	f7ff feb4 	bl	80013f8 <NRF24_write_register>

	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8001690:	210f      	movs	r1, #15
 8001692:	200f      	movs	r0, #15
 8001694:	f000 f8c4 	bl	8001820 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8001698:	2003      	movs	r0, #3
 800169a:	f000 f9aa 	bl	80019f2 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 800169e:	2001      	movs	r0, #1
 80016a0:	f000 f9e0 	bl	8001a64 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 80016a4:	2002      	movs	r0, #2
 80016a6:	f000 fa23 	bl	8001af0 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 80016aa:	f000 f975 	bl	8001998 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 80016ae:	2020      	movs	r0, #32
 80016b0:	f000 f8e6 	bl	8001880 <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 80016b4:	f000 faad 	bl	8001c12 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 80016b8:	204c      	movs	r0, #76	; 0x4c
 80016ba:	f000 f8cc 	bl	8001856 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 80016be:	f7ff ff15 	bl	80014ec <NRF24_flush_tx>
	NRF24_flush_rx();
 80016c2:	f7ff ff1b 	bl	80014fc <NRF24_flush_rx>

	NRF24_powerDown();
 80016c6:	f000 fa3b 	bl	8001b40 <NRF24_powerDown>

}
 80016ca:	bf00      	nop
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000078 	.word	0x20000078
 80016d8:	2000006c 	.word	0x2000006c
 80016dc:	20000070 	.word	0x20000070
 80016e0:	20000074 	.word	0x20000074
 80016e4:	20000076 	.word	0x20000076

080016e8 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 80016e8:	b598      	push	{r3, r4, r7, lr}
 80016ea:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 80016ec:	2000      	movs	r0, #0
 80016ee:	f7ff fe5b 	bl	80013a8 <NRF24_read_register>
 80016f2:	4603      	mov	r3, r0
 80016f4:	f043 0303 	orr.w	r3, r3, #3
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	4619      	mov	r1, r3
 80016fc:	2000      	movs	r0, #0
 80016fe:	f7ff fe7b 	bl	80013f8 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8001702:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <NRF24_startListening+0x48>)
 8001704:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001708:	4323      	orrs	r3, r4
 800170a:	d004      	beq.n	8001716 <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 800170c:	2205      	movs	r2, #5
 800170e:	4908      	ldr	r1, [pc, #32]	; (8001730 <NRF24_startListening+0x48>)
 8001710:	200a      	movs	r0, #10
 8001712:	f7ff fe93 	bl	800143c <NRF24_write_registerN>

	//Flush buffers
	NRF24_flush_tx();
 8001716:	f7ff fee9 	bl	80014ec <NRF24_flush_tx>
	NRF24_flush_rx();
 800171a:	f7ff feef 	bl	80014fc <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 800171e:	2001      	movs	r0, #1
 8001720:	f7ff fe22 	bl	8001368 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8001724:	2096      	movs	r0, #150	; 0x96
 8001726:	f7ff fddf 	bl	80012e8 <NRF24_DelayMicroSeconds>
}
 800172a:	bf00      	nop
 800172c:	bd98      	pop	{r3, r4, r7, pc}
 800172e:	bf00      	nop
 8001730:	20000060 	.word	0x20000060

08001734 <NRF24_available>:
	return retStatus;
}

//16. Check for available data to read
bool NRF24_available(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8001738:	2000      	movs	r0, #0
 800173a:	f000 fa10 	bl	8001b5e <NRF24_availablePipe>
 800173e:	4603      	mov	r3, r0
}
 8001740:	4618      	mov	r0, r3
 8001742:	bd80      	pop	{r7, pc}

08001744 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	460b      	mov	r3, r1
 800174e:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8001750:	78fb      	ldrb	r3, [r7, #3]
 8001752:	4619      	mov	r1, r3
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff fe99 	bl	800148c <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 800175a:	2017      	movs	r0, #23
 800175c:	f7ff fe24 	bl	80013a8 <NRF24_read_register>
 8001760:	4603      	mov	r3, r0
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8001768:	f7ff fec8 	bl	80014fc <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 800176c:	f000 f8ac 	bl	80018c8 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8001770:	7bfb      	ldrb	r3, [r7, #15]
 8001772:	2b00      	cmp	r3, #0
 8001774:	bf14      	ite	ne
 8001776:	2301      	movne	r3, #1
 8001778:	2300      	moveq	r3, #0
 800177a:	b2db      	uxtb	r3, r3
}
 800177c:	4618      	mov	r0, r3
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
	NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8001784:	b590      	push	{r4, r7, lr}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	4601      	mov	r1, r0
 800178c:	e9c7 2300 	strd	r2, r3, [r7]
 8001790:	460b      	mov	r3, r1
 8001792:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8001794:	7bfb      	ldrb	r3, [r7, #15]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d104      	bne.n	80017a4 <NRF24_openReadingPipe+0x20>
		pipe0_reading_address = address;
 800179a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800179e:	4a1c      	ldr	r2, [pc, #112]	; (8001810 <NRF24_openReadingPipe+0x8c>)
 80017a0:	e9c2 3400 	strd	r3, r4, [r2]

	if(number <= 6)
 80017a4:	7bfb      	ldrb	r3, [r7, #15]
 80017a6:	2b06      	cmp	r3, #6
 80017a8:	d82d      	bhi.n	8001806 <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 80017aa:	7bfb      	ldrb	r3, [r7, #15]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d808      	bhi.n	80017c2 <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 80017b0:	7bfb      	ldrb	r3, [r7, #15]
 80017b2:	4a18      	ldr	r2, [pc, #96]	; (8001814 <NRF24_openReadingPipe+0x90>)
 80017b4:	5cd3      	ldrb	r3, [r2, r3]
 80017b6:	4639      	mov	r1, r7
 80017b8:	2205      	movs	r2, #5
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff fe3e 	bl	800143c <NRF24_write_registerN>
 80017c0:	e007      	b.n	80017d2 <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 80017c2:	7bfb      	ldrb	r3, [r7, #15]
 80017c4:	4a13      	ldr	r2, [pc, #76]	; (8001814 <NRF24_openReadingPipe+0x90>)
 80017c6:	5cd3      	ldrb	r3, [r2, r3]
 80017c8:	4639      	mov	r1, r7
 80017ca:	2201      	movs	r2, #1
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff fe35 	bl	800143c <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
 80017d4:	4a10      	ldr	r2, [pc, #64]	; (8001818 <NRF24_openReadingPipe+0x94>)
 80017d6:	5cd2      	ldrb	r2, [r2, r3]
 80017d8:	4b10      	ldr	r3, [pc, #64]	; (800181c <NRF24_openReadingPipe+0x98>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	4619      	mov	r1, r3
 80017de:	4610      	mov	r0, r2
 80017e0:	f7ff fe0a 	bl	80013f8 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 80017e4:	2002      	movs	r0, #2
 80017e6:	f7ff fddf 	bl	80013a8 <NRF24_read_register>
 80017ea:	4603      	mov	r3, r0
 80017ec:	b25a      	sxtb	r2, r3
 80017ee:	7bfb      	ldrb	r3, [r7, #15]
 80017f0:	2101      	movs	r1, #1
 80017f2:	fa01 f303 	lsl.w	r3, r1, r3
 80017f6:	b25b      	sxtb	r3, r3
 80017f8:	4313      	orrs	r3, r2
 80017fa:	b25b      	sxtb	r3, r3
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	4619      	mov	r1, r3
 8001800:	2002      	movs	r0, #2
 8001802:	f7ff fdf9 	bl	80013f8 <NRF24_write_register>
	}

}
 8001806:	bf00      	nop
 8001808:	3714      	adds	r7, #20
 800180a:	46bd      	mov	sp, r7
 800180c:	bd90      	pop	{r4, r7, pc}
 800180e:	bf00      	nop
 8001810:	20000060 	.word	0x20000060
 8001814:	08005e28 	.word	0x08005e28
 8001818:	08005e30 	.word	0x08005e30
 800181c:	20000068 	.word	0x20000068

08001820 <NRF24_setRetries>:

//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	460a      	mov	r2, r1
 800182a:	71fb      	strb	r3, [r7, #7]
 800182c:	4613      	mov	r3, r2
 800182e:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	011b      	lsls	r3, r3, #4
 8001834:	b25a      	sxtb	r2, r3
 8001836:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800183a:	f003 030f 	and.w	r3, r3, #15
 800183e:	b25b      	sxtb	r3, r3
 8001840:	4313      	orrs	r3, r2
 8001842:	b25b      	sxtb	r3, r3
 8001844:	b2db      	uxtb	r3, r3
 8001846:	4619      	mov	r1, r3
 8001848:	2004      	movs	r0, #4
 800184a:	f7ff fdd5 	bl	80013f8 <NRF24_write_register>
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b084      	sub	sp, #16
 800185a:	af00      	add	r7, sp, #0
 800185c:	4603      	mov	r3, r0
 800185e:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8001860:	237f      	movs	r3, #127	; 0x7f
 8001862:	73fb      	strb	r3, [r7, #15]
	NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8001864:	7bfa      	ldrb	r2, [r7, #15]
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	4293      	cmp	r3, r2
 800186a:	bf28      	it	cs
 800186c:	4613      	movcs	r3, r2
 800186e:	b2db      	uxtb	r3, r3
 8001870:	4619      	mov	r1, r3
 8001872:	2005      	movs	r0, #5
 8001874:	f7ff fdc0 	bl	80013f8 <NRF24_write_register>
}
 8001878:	bf00      	nop
 800187a:	3710      	adds	r7, #16
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 800188a:	2320      	movs	r3, #32
 800188c:	73fb      	strb	r3, [r7, #15]
	payload_size = MIN(size,max_payload_size);
 800188e:	7bfa      	ldrb	r2, [r7, #15]
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	4293      	cmp	r3, r2
 8001894:	bf28      	it	cs
 8001896:	4613      	movcs	r3, r2
 8001898:	b2da      	uxtb	r2, r3
 800189a:	4b04      	ldr	r3, [pc, #16]	; (80018ac <NRF24_setPayloadSize+0x2c>)
 800189c:	701a      	strb	r2, [r3, #0]
}
 800189e:	bf00      	nop
 80018a0:	3714      	adds	r7, #20
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	20000068 	.word	0x20000068

080018b0 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
	return payload_size;
 80018b4:	4b03      	ldr	r3, [pc, #12]	; (80018c4 <NRF24_getPayloadSize+0x14>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	20000068 	.word	0x20000068

080018c8 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 80018cc:	2060      	movs	r0, #96	; 0x60
 80018ce:	f7ff fd6b 	bl	80013a8 <NRF24_read_register>
 80018d2:	4603      	mov	r3, r0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <NRF24_enableAckPayload>:
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 80018dc:	201d      	movs	r0, #29
 80018de:	f7ff fd63 	bl	80013a8 <NRF24_read_register>
 80018e2:	4603      	mov	r3, r0
 80018e4:	f043 0306 	orr.w	r3, r3, #6
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	4619      	mov	r1, r3
 80018ec:	201d      	movs	r0, #29
 80018ee:	f7ff fd83 	bl	80013f8 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 80018f2:	201d      	movs	r0, #29
 80018f4:	f7ff fd58 	bl	80013a8 <NRF24_read_register>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10c      	bne.n	8001918 <NRF24_enableAckPayload+0x40>
	{
		NRF24_ACTIVATE_cmd();
 80018fe:	f000 f991 	bl	8001c24 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8001902:	201d      	movs	r0, #29
 8001904:	f7ff fd50 	bl	80013a8 <NRF24_read_register>
 8001908:	4603      	mov	r3, r0
 800190a:	f043 0306 	orr.w	r3, r3, #6
 800190e:	b2db      	uxtb	r3, r3
 8001910:	4619      	mov	r1, r3
 8001912:	201d      	movs	r0, #29
 8001914:	f7ff fd70 	bl	80013f8 <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8001918:	201c      	movs	r0, #28
 800191a:	f7ff fd45 	bl	80013a8 <NRF24_read_register>
 800191e:	4603      	mov	r3, r0
 8001920:	f043 0303 	orr.w	r3, r3, #3
 8001924:	b2db      	uxtb	r3, r3
 8001926:	4619      	mov	r1, r3
 8001928:	201c      	movs	r0, #28
 800192a:	f7ff fd65 	bl	80013f8 <NRF24_write_register>
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
	...

08001934 <NRF24_enableDynamicPayloads>:

//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8001938:	201d      	movs	r0, #29
 800193a:	f7ff fd35 	bl	80013a8 <NRF24_read_register>
 800193e:	4603      	mov	r3, r0
 8001940:	f043 0304 	orr.w	r3, r3, #4
 8001944:	b2db      	uxtb	r3, r3
 8001946:	4619      	mov	r1, r3
 8001948:	201d      	movs	r0, #29
 800194a:	f7ff fd55 	bl	80013f8 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 800194e:	201d      	movs	r0, #29
 8001950:	f7ff fd2a 	bl	80013a8 <NRF24_read_register>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d10c      	bne.n	8001974 <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 800195a:	f000 f963 	bl	8001c24 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 800195e:	201d      	movs	r0, #29
 8001960:	f7ff fd22 	bl	80013a8 <NRF24_read_register>
 8001964:	4603      	mov	r3, r0
 8001966:	f043 0304 	orr.w	r3, r3, #4
 800196a:	b2db      	uxtb	r3, r3
 800196c:	4619      	mov	r1, r3
 800196e:	201d      	movs	r0, #29
 8001970:	f7ff fd42 	bl	80013f8 <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8001974:	201c      	movs	r0, #28
 8001976:	f7ff fd17 	bl	80013a8 <NRF24_read_register>
 800197a:	4603      	mov	r3, r0
 800197c:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8001980:	b2db      	uxtb	r3, r3
 8001982:	4619      	mov	r1, r3
 8001984:	201c      	movs	r0, #28
 8001986:	f7ff fd37 	bl	80013f8 <NRF24_write_register>
	dynamic_payloads_enabled = true;
 800198a:	4b02      	ldr	r3, [pc, #8]	; (8001994 <NRF24_enableDynamicPayloads+0x60>)
 800198c:	2201      	movs	r2, #1
 800198e:	701a      	strb	r2, [r3, #0]

}
 8001990:	bf00      	nop
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20000069 	.word	0x20000069

08001998 <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 800199c:	201d      	movs	r0, #29
 800199e:	f7ff fd03 	bl	80013a8 <NRF24_read_register>
 80019a2:	4603      	mov	r3, r0
 80019a4:	f023 0304 	bic.w	r3, r3, #4
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	4619      	mov	r1, r3
 80019ac:	201d      	movs	r0, #29
 80019ae:	f7ff fd23 	bl	80013f8 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 80019b2:	2100      	movs	r1, #0
 80019b4:	201c      	movs	r0, #28
 80019b6:	f7ff fd1f 	bl	80013f8 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 80019ba:	4b02      	ldr	r3, [pc, #8]	; (80019c4 <NRF24_disableDynamicPayloads+0x2c>)
 80019bc:	2200      	movs	r2, #0
 80019be:	701a      	strb	r2, [r3, #0]
}
 80019c0:	bf00      	nop
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20000069 	.word	0x20000069

080019c8 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 80019d2:	79fb      	ldrb	r3, [r7, #7]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d004      	beq.n	80019e2 <NRF24_setAutoAck+0x1a>
		NRF24_write_register(REG_EN_AA, 0x3F);
 80019d8:	213f      	movs	r1, #63	; 0x3f
 80019da:	2001      	movs	r0, #1
 80019dc:	f7ff fd0c 	bl	80013f8 <NRF24_write_register>
	else
		NRF24_write_register(REG_EN_AA, 0x00);
}
 80019e0:	e003      	b.n	80019ea <NRF24_setAutoAck+0x22>
		NRF24_write_register(REG_EN_AA, 0x00);
 80019e2:	2100      	movs	r1, #0
 80019e4:	2001      	movs	r0, #1
 80019e6:	f7ff fd07 	bl	80013f8 <NRF24_write_register>
}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <NRF24_setPALevel>:
		NRF24_write_register( REG_EN_AA, en_aa ) ;
	}
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b084      	sub	sp, #16
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	4603      	mov	r3, r0
 80019fa:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80019fc:	2006      	movs	r0, #6
 80019fe:	f7ff fcd3 	bl	80013a8 <NRF24_read_register>
 8001a02:	4603      	mov	r3, r0
 8001a04:	73fb      	strb	r3, [r7, #15]
	//setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
	setup &= ~(_BV(1) | _BV(2)) ;
 8001a06:	7bfb      	ldrb	r3, [r7, #15]
 8001a08:	f023 0306 	bic.w	r3, r3, #6
 8001a0c:	73fb      	strb	r3, [r7, #15]

	// switch uses RAM (evil!)
	if ( level == RF24_PA_0dB)
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	2b03      	cmp	r3, #3
 8001a12:	d104      	bne.n	8001a1e <NRF24_setPALevel+0x2c>
	{
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001a14:	7bfb      	ldrb	r3, [r7, #15]
 8001a16:	f043 0306 	orr.w	r3, r3, #6
 8001a1a:	73fb      	strb	r3, [r7, #15]
 8001a1c:	e019      	b.n	8001a52 <NRF24_setPALevel+0x60>
	}
	else if ( level == RF24_PA_m6dB )
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d104      	bne.n	8001a2e <NRF24_setPALevel+0x3c>
	{
		setup |= _BV(RF_PWR_HIGH) ;
 8001a24:	7bfb      	ldrb	r3, [r7, #15]
 8001a26:	f043 0304 	orr.w	r3, r3, #4
 8001a2a:	73fb      	strb	r3, [r7, #15]
 8001a2c:	e011      	b.n	8001a52 <NRF24_setPALevel+0x60>
	}
	else if ( level == RF24_PA_m12dB )
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d104      	bne.n	8001a3e <NRF24_setPALevel+0x4c>
	{
		setup |= _BV(RF_PWR_LOW);
 8001a34:	7bfb      	ldrb	r3, [r7, #15]
 8001a36:	f043 0302 	orr.w	r3, r3, #2
 8001a3a:	73fb      	strb	r3, [r7, #15]
 8001a3c:	e009      	b.n	8001a52 <NRF24_setPALevel+0x60>
	}
	else if ( level == RF24_PA_m18dB )
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d006      	beq.n	8001a52 <NRF24_setPALevel+0x60>
	{
		// nothing
	}
	else if ( level == RF24_PA_ERROR )
 8001a44:	79fb      	ldrb	r3, [r7, #7]
 8001a46:	2b04      	cmp	r3, #4
 8001a48:	d103      	bne.n	8001a52 <NRF24_setPALevel+0x60>
	{
		// On error, go to maximum PA
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001a4a:	7bfb      	ldrb	r3, [r7, #15]
 8001a4c:	f043 0306 	orr.w	r3, r3, #6
 8001a50:	73fb      	strb	r3, [r7, #15]
	}

	NRF24_write_register( REG_RF_SETUP, setup ) ;
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
 8001a54:	4619      	mov	r1, r3
 8001a56:	2006      	movs	r0, #6
 8001a58:	f7ff fcce 	bl	80013f8 <NRF24_write_register>
}
 8001a5c:	bf00      	nop
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <NRF24_setDataRate>:
	return result ;
}

//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	73fb      	strb	r3, [r7, #15]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8001a72:	2006      	movs	r0, #6
 8001a74:	f7ff fc98 	bl	80013a8 <NRF24_read_register>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	73bb      	strb	r3, [r7, #14]

	// HIGH and LOW '00' is 1Mbs - our default
	wide_band = false ;
 8001a7c:	4b1b      	ldr	r3, [pc, #108]	; (8001aec <NRF24_setDataRate+0x88>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	701a      	strb	r2, [r3, #0]
	setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8001a82:	7bbb      	ldrb	r3, [r7, #14]
 8001a84:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8001a88:	73bb      	strb	r3, [r7, #14]
	if( speed == RF24_250KBPS )
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d107      	bne.n	8001aa0 <NRF24_setDataRate+0x3c>
	{
		// Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
		// Making it '10'.
		wide_band = false ;
 8001a90:	4b16      	ldr	r3, [pc, #88]	; (8001aec <NRF24_setDataRate+0x88>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	701a      	strb	r2, [r3, #0]
		setup |= _BV( RF_DR_LOW ) ;
 8001a96:	7bbb      	ldrb	r3, [r7, #14]
 8001a98:	f043 0320 	orr.w	r3, r3, #32
 8001a9c:	73bb      	strb	r3, [r7, #14]
 8001a9e:	e00d      	b.n	8001abc <NRF24_setDataRate+0x58>
	}
	else
	{
		// Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
		// Making it '01'
		if ( speed == RF24_2MBPS )
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d107      	bne.n	8001ab6 <NRF24_setDataRate+0x52>
		{
			wide_band = true ;
 8001aa6:	4b11      	ldr	r3, [pc, #68]	; (8001aec <NRF24_setDataRate+0x88>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	701a      	strb	r2, [r3, #0]
			setup |= _BV(RF_DR_HIGH);
 8001aac:	7bbb      	ldrb	r3, [r7, #14]
 8001aae:	f043 0308 	orr.w	r3, r3, #8
 8001ab2:	73bb      	strb	r3, [r7, #14]
 8001ab4:	e002      	b.n	8001abc <NRF24_setDataRate+0x58>
		}
		else
		{
			// 1Mbs
			wide_band = false ;
 8001ab6:	4b0d      	ldr	r3, [pc, #52]	; (8001aec <NRF24_setDataRate+0x88>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	701a      	strb	r2, [r3, #0]
		}
	}
	NRF24_write_register(REG_RF_SETUP,setup);
 8001abc:	7bbb      	ldrb	r3, [r7, #14]
 8001abe:	4619      	mov	r1, r3
 8001ac0:	2006      	movs	r0, #6
 8001ac2:	f7ff fc99 	bl	80013f8 <NRF24_write_register>

	// Verify our result
	if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8001ac6:	2006      	movs	r0, #6
 8001ac8:	f7ff fc6e 	bl	80013a8 <NRF24_read_register>
 8001acc:	4603      	mov	r3, r0
 8001ace:	461a      	mov	r2, r3
 8001ad0:	7bbb      	ldrb	r3, [r7, #14]
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d102      	bne.n	8001adc <NRF24_setDataRate+0x78>
	{
		result = true;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	73fb      	strb	r3, [r7, #15]
 8001ada:	e002      	b.n	8001ae2 <NRF24_setDataRate+0x7e>
	}
	else
	{
		wide_band = false;
 8001adc:	4b03      	ldr	r3, [pc, #12]	; (8001aec <NRF24_setDataRate+0x88>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	701a      	strb	r2, [r3, #0]
	}

	return result;
 8001ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	2000006a 	.word	0x2000006a

08001af0 <NRF24_setCRCLength>:
	}
	return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8001afa:	2000      	movs	r0, #0
 8001afc:	f7ff fc54 	bl	80013a8 <NRF24_read_register>
 8001b00:	4603      	mov	r3, r0
 8001b02:	f023 030c 	bic.w	r3, r3, #12
 8001b06:	73fb      	strb	r3, [r7, #15]

	// switch uses RAM
	if ( length == RF24_CRC_DISABLED )
 8001b08:	79fb      	ldrb	r3, [r7, #7]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d00f      	beq.n	8001b2e <NRF24_setCRCLength+0x3e>
	{
		// Do nothing, we turned it off above.
	}
	else if ( length == RF24_CRC_8 )
 8001b0e:	79fb      	ldrb	r3, [r7, #7]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d104      	bne.n	8001b1e <NRF24_setCRCLength+0x2e>
	{
		config |= _BV(BIT_EN_CRC);
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
 8001b16:	f043 0308 	orr.w	r3, r3, #8
 8001b1a:	73fb      	strb	r3, [r7, #15]
 8001b1c:	e007      	b.n	8001b2e <NRF24_setCRCLength+0x3e>
	}
	else
	{
		config |= _BV(BIT_EN_CRC);
 8001b1e:	7bfb      	ldrb	r3, [r7, #15]
 8001b20:	f043 0308 	orr.w	r3, r3, #8
 8001b24:	73fb      	strb	r3, [r7, #15]
		config |= _BV( BIT_CRCO );
 8001b26:	7bfb      	ldrb	r3, [r7, #15]
 8001b28:	f043 0304 	orr.w	r3, r3, #4
 8001b2c:	73fb      	strb	r3, [r7, #15]
	}
	NRF24_write_register( REG_CONFIG, config );
 8001b2e:	7bfb      	ldrb	r3, [r7, #15]
 8001b30:	4619      	mov	r1, r3
 8001b32:	2000      	movs	r0, #0
 8001b34:	f7ff fc60 	bl	80013f8 <NRF24_write_register>
}
 8001b38:	bf00      	nop
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8001b44:	2000      	movs	r0, #0
 8001b46:	f7ff fc2f 	bl	80013a8 <NRF24_read_register>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	f023 0302 	bic.w	r3, r3, #2
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	4619      	mov	r1, r3
 8001b54:	2000      	movs	r0, #0
 8001b56:	f7ff fc4f 	bl	80013f8 <NRF24_write_register>
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b084      	sub	sp, #16
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8001b66:	f7ff fcd1 	bl	800150c <NRF24_get_status>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	73fb      	strb	r3, [r7, #15]

	bool result = ( status & _BV(BIT_RX_DR) );
 8001b6e:	7bfb      	ldrb	r3, [r7, #15]
 8001b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	bf14      	ite	ne
 8001b78:	2301      	movne	r3, #1
 8001b7a:	2300      	moveq	r3, #0
 8001b7c:	73bb      	strb	r3, [r7, #14]

	if (result)
 8001b7e:	7bbb      	ldrb	r3, [r7, #14]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d017      	beq.n	8001bb4 <NRF24_availablePipe+0x56>
	{
		// If the caller wants the pipe number, include that
		if ( pipe_num )
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d007      	beq.n	8001b9a <NRF24_availablePipe+0x3c>
			*pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8001b8a:	7bfb      	ldrb	r3, [r7, #15]
 8001b8c:	085b      	lsrs	r3, r3, #1
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	f003 0307 	and.w	r3, r3, #7
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	701a      	strb	r2, [r3, #0]

		// Clear the status bit
		NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8001b9a:	2140      	movs	r1, #64	; 0x40
 8001b9c:	2007      	movs	r0, #7
 8001b9e:	f7ff fc2b 	bl	80013f8 <NRF24_write_register>

		// Handle ack payload receipt
		if ( status & _BV(BIT_TX_DS) )
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
 8001ba4:	f003 0320 	and.w	r3, r3, #32
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d003      	beq.n	8001bb4 <NRF24_availablePipe+0x56>
		{
			NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8001bac:	2120      	movs	r1, #32
 8001bae:	2007      	movs	r0, #7
 8001bb0:	f7ff fc22 	bl	80013f8 <NRF24_write_register>
		}
	}
	return result;
 8001bb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <NRF24_writeAckPayload>:
	NRF24_DelayMicroSeconds(15);
	NRF24_ce(0);
}
//41. Write acknowledge payload
void NRF24_writeAckPayload(uint8_t pipe, const void* buf, uint8_t len)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b084      	sub	sp, #16
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	6039      	str	r1, [r7, #0]
 8001bc8:	71fb      	strb	r3, [r7, #7]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	71bb      	strb	r3, [r7, #6]
	const uint8_t* current = (uint8_t *)buf;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	60fb      	str	r3, [r7, #12]
	const uint8_t max_payload_size = 32;
 8001bd2:	2320      	movs	r3, #32
 8001bd4:	72fb      	strb	r3, [r7, #11]
	uint8_t data_len = MIN(len,max_payload_size);
 8001bd6:	7afa      	ldrb	r2, [r7, #11]
 8001bd8:	79bb      	ldrb	r3, [r7, #6]
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	bf28      	it	cs
 8001bde:	4613      	movcs	r3, r2
 8001be0:	72bb      	strb	r3, [r7, #10]

	NRF24_csn(0);
 8001be2:	2000      	movs	r0, #0
 8001be4:	f7ff fba0 	bl	8001328 <NRF24_csn>
	NRF24_write_registerN(CMD_W_ACK_PAYLOAD | ( pipe & 0x7 ) , current, data_len);
 8001be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bec:	f003 0307 	and.w	r3, r3, #7
 8001bf0:	b25b      	sxtb	r3, r3
 8001bf2:	f063 0357 	orn	r3, r3, #87	; 0x57
 8001bf6:	b25b      	sxtb	r3, r3
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	7aba      	ldrb	r2, [r7, #10]
 8001bfc:	68f9      	ldr	r1, [r7, #12]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff fc1c 	bl	800143c <NRF24_write_registerN>
	NRF24_csn(1);
 8001c04:	2001      	movs	r0, #1
 8001c06:	f7ff fb8f 	bl	8001328 <NRF24_csn>
}
 8001c0a:	bf00      	nop
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001c16:	2170      	movs	r1, #112	; 0x70
 8001c18:	2007      	movs	r0, #7
 8001c1a:	f7ff fbed 	bl	80013f8 <NRF24_write_register>
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
	...

08001c24 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8001c2a:	2000      	movs	r0, #0
 8001c2c:	f7ff fb7c 	bl	8001328 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8001c30:	2350      	movs	r3, #80	; 0x50
 8001c32:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8001c34:	2373      	movs	r3, #115	; 0x73
 8001c36:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8001c38:	1d39      	adds	r1, r7, #4
 8001c3a:	2364      	movs	r3, #100	; 0x64
 8001c3c:	2202      	movs	r2, #2
 8001c3e:	4805      	ldr	r0, [pc, #20]	; (8001c54 <NRF24_ACTIVATE_cmd+0x30>)
 8001c40:	f002 f980 	bl	8003f44 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8001c44:	2001      	movs	r0, #1
 8001c46:	f7ff fb6f 	bl	8001328 <NRF24_csn>
}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20000078 	.word	0x20000078

08001c58 <NRF24_receptionInit>:
}

/****  TEAM OMNICAR - FUNCTIONS ****/

void NRF24_receptionInit(uint64_t add,uint8_t channel, uint8_t payload_size)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001c62:	4611      	mov	r1, r2
 8001c64:	461a      	mov	r2, r3
 8001c66:	460b      	mov	r3, r1
 8001c68:	71fb      	strb	r3, [r7, #7]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	71bb      	strb	r3, [r7, #6]
	NRF24_setAutoAck(true);									// Function call to set auto acknowledgment
 8001c6e:	2001      	movs	r0, #1
 8001c70:	f7ff feaa 	bl	80019c8 <NRF24_setAutoAck>
	NRF24_setChannel(channel);								// Function call to set the channel RF pass in parameters of the function
 8001c74:	79fb      	ldrb	r3, [r7, #7]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff fded 	bl	8001856 <NRF24_setChannel>
	NRF24_setPayloadSize(payload_size);						// Function call to set the payload size pass in parameters of the function
 8001c7c:	79bb      	ldrb	r3, [r7, #6]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff fdfe 	bl	8001880 <NRF24_setPayloadSize>
	NRF24_openReadingPipe(1, add);							// Function call for open a reading Pipe, with the address pass in parameters of the function
 8001c84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c88:	2001      	movs	r0, #1
 8001c8a:	f7ff fd7b 	bl	8001784 <NRF24_openReadingPipe>
	NRF24_enableDynamicPayloads();							// Function call to enable dynamic payload
 8001c8e:	f7ff fe51 	bl	8001934 <NRF24_enableDynamicPayloads>
	NRF24_enableAckPayload();								// Function call to enable Ack payload
 8001c92:	f7ff fe21 	bl	80018d8 <NRF24_enableAckPayload>
	NRF24_startListening();									// Function call for start to listenning
 8001c96:	f7ff fd27 	bl	80016e8 <NRF24_startListening>
}
 8001c9a:	bf00      	nop
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <NRF24_dataReception>:

void NRF24_dataReception(uint8_t *tab_Rx, uint8_t tab_Rx_size, uint8_t *tab_Ack, uint8_t tab_Ack_size)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b084      	sub	sp, #16
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	60f8      	str	r0, [r7, #12]
 8001caa:	607a      	str	r2, [r7, #4]
 8001cac:	461a      	mov	r2, r3
 8001cae:	460b      	mov	r3, r1
 8001cb0:	72fb      	strb	r3, [r7, #11]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	72bb      	strb	r3, [r7, #10]
	if (NRF24_available())									// if communication is available
 8001cb6:	f7ff fd3d 	bl	8001734 <NRF24_available>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d00e      	beq.n	8001cde <NRF24_dataReception+0x3c>
	{
		tab_Ack[1] = 0;										// because today, we don't have the car speed
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	701a      	strb	r2, [r3, #0]
		NRF24_read(tab_Rx, tab_Rx_size);					// Function call to read the data ready
 8001cc8:	7afb      	ldrb	r3, [r7, #11]
 8001cca:	4619      	mov	r1, r3
 8001ccc:	68f8      	ldr	r0, [r7, #12]
 8001cce:	f7ff fd39 	bl	8001744 <NRF24_read>
		NRF24_writeAckPayload(1, tab_Ack, tab_Ack_size);	// Function call to sent the data ack
 8001cd2:	7abb      	ldrb	r3, [r7, #10]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	6879      	ldr	r1, [r7, #4]
 8001cd8:	2001      	movs	r0, #1
 8001cda:	f7ff ff70 	bl	8001bbe <NRF24_writeAckPayload>
	}
}
 8001cde:	bf00      	nop
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
	...

08001ce8 <battery_getBatteryLevel>:
static uint8_t batValue = 0;
static uint8_t bat = 0;
static float batPercent = 0.0;

uint8_t battery_getBatteryLevel(ADC_HandleTypeDef *hadc)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
    HAL_ADC_Start(hadc);												// call function to start the ADC
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 fe7f 	bl	80029f4 <HAL_ADC_Start>
    if(HAL_ADC_PollForConversion(hadc, 1) == HAL_OK)					// check if the conversion of ADC is complete
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 ff41 	bl	8002b80 <HAL_ADC_PollForConversion>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d106      	bne.n	8001d12 <battery_getBatteryLevel+0x2a>
    {
        batValue = HAL_ADC_GetValue(hadc);								// batValue take the converted value of ADC
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f000 ffbf 	bl	8002c88 <HAL_ADC_GetValue>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <battery_getBatteryLevel+0x8c>)
 8001d10:	701a      	strb	r2, [r3, #0]
    }

    //batPercent = 100 - (((MAX - (float)batValue)/ MAX - MIN)*100);
    batPercent = (((MAX - (float)batValue)/ (MAX - MIN)))*100;			// store the result of the equation in batPercent
 8001d12:	4b18      	ldr	r3, [pc, #96]	; (8001d74 <battery_getBatteryLevel+0x8c>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	ee07 3a90 	vmov	s15, r3
 8001d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d1e:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001d78 <battery_getBatteryLevel+0x90>
 8001d22:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d26:	eddf 6a15 	vldr	s13, [pc, #84]	; 8001d7c <battery_getBatteryLevel+0x94>
 8001d2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d2e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001d80 <battery_getBatteryLevel+0x98>
 8001d32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d36:	4b13      	ldr	r3, [pc, #76]	; (8001d84 <battery_getBatteryLevel+0x9c>)
 8001d38:	edc3 7a00 	vstr	s15, [r3]
    batPercent = 100.0f - batPercent;									// subtract the value of batPercent by 100
 8001d3c:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <battery_getBatteryLevel+0x9c>)
 8001d3e:	edd3 7a00 	vldr	s15, [r3]
 8001d42:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001d80 <battery_getBatteryLevel+0x98>
 8001d46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d4a:	4b0e      	ldr	r3, [pc, #56]	; (8001d84 <battery_getBatteryLevel+0x9c>)
 8001d4c:	edc3 7a00 	vstr	s15, [r3]
    bat = (uint8_t)batPercent;											// cast to integer the batPercent variable (float)
 8001d50:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <battery_getBatteryLevel+0x9c>)
 8001d52:	edd3 7a00 	vldr	s15, [r3]
 8001d56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d5a:	edc7 7a00 	vstr	s15, [r7]
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <battery_getBatteryLevel+0xa0>)
 8001d64:	701a      	strb	r2, [r3, #0]

    return bat;															// return value of the bat at main.c file
 8001d66:	4b08      	ldr	r3, [pc, #32]	; (8001d88 <battery_getBatteryLevel+0xa0>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	200000d0 	.word	0x200000d0
 8001d78:	45800000 	.word	0x45800000
 8001d7c:	442ac000 	.word	0x442ac000
 8001d80:	42c80000 	.word	0x42c80000
 8001d84:	200000d4 	.word	0x200000d4
 8001d88:	200000d1 	.word	0x200000d1

08001d8c <init_pwm_motors>:
static uint16_t		 IN2_C;								// declaration of static data for IN2_C
static uint16_t		 IN2_D;								// declaration of static data for IN2_D

//1. INIT MOTORS
void init_pwm_motors(TIM_HandleTypeDef *TIMPORT, uint32_t *channel_array)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
	TIM_PORT = TIMPORT;														// store into TIM_PORT the GPIO_TypeDef pass in argument of the function
 8001d96:	4a14      	ldr	r2, [pc, #80]	; (8001de8 <init_pwm_motors+0x5c>)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6013      	str	r3, [r2, #0]

	for(uint8_t i = 0; i<5 ; i++)											// condition made for "i" from 0 to 5
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	73fb      	strb	r3, [r7, #15]
 8001da0:	e01a      	b.n	8001dd8 <init_pwm_motors+0x4c>
	{
		if(i == 2)
 8001da2:	7bfb      	ldrb	r3, [r7, #15]
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d10a      	bne.n	8001dbe <init_pwm_motors+0x32>
		{
			HAL_TIMEx_PWMN_Start(TIM_PORT, channel_array[i]);				// start PWMN Channel 2 (N = Negative)
 8001da8:	4b0f      	ldr	r3, [pc, #60]	; (8001de8 <init_pwm_motors+0x5c>)
 8001daa:	6818      	ldr	r0, [r3, #0]
 8001dac:	7bfb      	ldrb	r3, [r7, #15]
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	4413      	add	r3, r2
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4619      	mov	r1, r3
 8001db8:	f003 feb7 	bl	8005b2a <HAL_TIMEx_PWMN_Start>
 8001dbc:	e009      	b.n	8001dd2 <init_pwm_motors+0x46>
		}
		else
		{
			HAL_TIM_PWM_Start(TIM_PORT, channel_array[i]);					// start PWM channel 1, 3, 4
 8001dbe:	4b0a      	ldr	r3, [pc, #40]	; (8001de8 <init_pwm_motors+0x5c>)
 8001dc0:	6818      	ldr	r0, [r3, #0]
 8001dc2:	7bfb      	ldrb	r3, [r7, #15]
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	4413      	add	r3, r2
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4619      	mov	r1, r3
 8001dce:	f002 fe09 	bl	80049e4 <HAL_TIM_PWM_Start>
	for(uint8_t i = 0; i<5 ; i++)											// condition made for "i" from 0 to 5
 8001dd2:	7bfb      	ldrb	r3, [r7, #15]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	73fb      	strb	r3, [r7, #15]
 8001dd8:	7bfb      	ldrb	r3, [r7, #15]
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	d9e1      	bls.n	8001da2 <init_pwm_motors+0x16>
		}
	}
}
 8001dde:	bf00      	nop
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	200000d8 	.word	0x200000d8

08001dec <motors_management>:

//2. MOTORS POWER MANAGEMENT
void motors_management(TIM_HandleTypeDef *TIMPORT, uint32_t *channel_array, uint8_t *myRxData)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b087      	sub	sp, #28
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
	TIM_PORT = TIMPORT;														// store into TIM_PORT the GPIO_TypeDef pass in argument of the function
 8001df8:	4a22      	ldr	r2, [pc, #136]	; (8001e84 <motors_management+0x98>)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6013      	str	r3, [r2, #0]

	for(uint8_t i = 0; i<5; i++)											// condition made for "i" from 0 to 5
 8001dfe:	2300      	movs	r3, #0
 8001e00:	75fb      	strb	r3, [r7, #23]
 8001e02:	e036      	b.n	8001e72 <motors_management+0x86>
	{
		__HAL_TIM_SET_COMPARE(TIM_PORT, channel_array[i], myRxData[1]);		// compare CCR value for the PWM
 8001e04:	7dfb      	ldrb	r3, [r7, #23]
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	68ba      	ldr	r2, [r7, #8]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d107      	bne.n	8001e22 <motors_management+0x36>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	3301      	adds	r3, #1
 8001e16:	781a      	ldrb	r2, [r3, #0]
 8001e18:	4b1a      	ldr	r3, [pc, #104]	; (8001e84 <motors_management+0x98>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	635a      	str	r2, [r3, #52]	; 0x34
 8001e20:	e024      	b.n	8001e6c <motors_management+0x80>
 8001e22:	7dfb      	ldrb	r3, [r7, #23]
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	68ba      	ldr	r2, [r7, #8]
 8001e28:	4413      	add	r3, r2
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2b04      	cmp	r3, #4
 8001e2e:	d107      	bne.n	8001e40 <motors_management+0x54>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3301      	adds	r3, #1
 8001e34:	781a      	ldrb	r2, [r3, #0]
 8001e36:	4b13      	ldr	r3, [pc, #76]	; (8001e84 <motors_management+0x98>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	639a      	str	r2, [r3, #56]	; 0x38
 8001e3e:	e015      	b.n	8001e6c <motors_management+0x80>
 8001e40:	7dfb      	ldrb	r3, [r7, #23]
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	68ba      	ldr	r2, [r7, #8]
 8001e46:	4413      	add	r3, r2
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2b08      	cmp	r3, #8
 8001e4c:	d107      	bne.n	8001e5e <motors_management+0x72>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	3301      	adds	r3, #1
 8001e52:	781a      	ldrb	r2, [r3, #0]
 8001e54:	4b0b      	ldr	r3, [pc, #44]	; (8001e84 <motors_management+0x98>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e5c:	e006      	b.n	8001e6c <motors_management+0x80>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	3301      	adds	r3, #1
 8001e62:	781a      	ldrb	r2, [r3, #0]
 8001e64:	4b07      	ldr	r3, [pc, #28]	; (8001e84 <motors_management+0x98>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	641a      	str	r2, [r3, #64]	; 0x40
	for(uint8_t i = 0; i<5; i++)											// condition made for "i" from 0 to 5
 8001e6c:	7dfb      	ldrb	r3, [r7, #23]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	75fb      	strb	r3, [r7, #23]
 8001e72:	7dfb      	ldrb	r3, [r7, #23]
 8001e74:	2b04      	cmp	r3, #4
 8001e76:	d9c5      	bls.n	8001e04 <motors_management+0x18>
	}
}
 8001e78:	bf00      	nop
 8001e7a:	371c      	adds	r7, #28
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	200000d8 	.word	0x200000d8

08001e88 <motors_direction>:

//3. MOTORS DIRECTION
void motors_direction(GPIO_TypeDef *motorsGPIO_B, GPIO_TypeDef *motorsGPIO_E, uint16_t *GPIO_IN_ARRAY, uint8_t *myRxData)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
 8001e94:	603b      	str	r3, [r7, #0]
	MOTORS_GPIO_PORT_B = motorsGPIO_B;																		// store into MOTORS_GPIO_PORT_E the GPIO_TypeDef pass in argument of the function
 8001e96:	4a9a      	ldr	r2, [pc, #616]	; (8002100 <motors_direction+0x278>)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6013      	str	r3, [r2, #0]
	MOTORS_GPIO_PORT_E = motorsGPIO_E;																		// store into MOTORS_GPIO_PORT_E the GPIO_TypeDef pass in argument of the function
 8001e9c:	4a99      	ldr	r2, [pc, #612]	; (8002104 <motors_direction+0x27c>)
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	6013      	str	r3, [r2, #0]
	IN1_A = GPIO_IN_ARRAY[0];																				// store into IN1_A the first case of GPIO_IN_ARRAY
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	881a      	ldrh	r2, [r3, #0]
 8001ea6:	4b98      	ldr	r3, [pc, #608]	; (8002108 <motors_direction+0x280>)
 8001ea8:	801a      	strh	r2, [r3, #0]
	IN2_A = GPIO_IN_ARRAY[1];																				// store into IN2_A the first case of GPIO_IN_ARRAY
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	885a      	ldrh	r2, [r3, #2]
 8001eae:	4b97      	ldr	r3, [pc, #604]	; (800210c <motors_direction+0x284>)
 8001eb0:	801a      	strh	r2, [r3, #0]
	IN1_B = GPIO_IN_ARRAY[2];																				// store into IN1_B the first case of GPIO_IN_ARRAY
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	889a      	ldrh	r2, [r3, #4]
 8001eb6:	4b96      	ldr	r3, [pc, #600]	; (8002110 <motors_direction+0x288>)
 8001eb8:	801a      	strh	r2, [r3, #0]
	IN2_B = GPIO_IN_ARRAY[3];																				// store into IN2_B the first case of GPIO_IN_ARRAY
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	88da      	ldrh	r2, [r3, #6]
 8001ebe:	4b95      	ldr	r3, [pc, #596]	; (8002114 <motors_direction+0x28c>)
 8001ec0:	801a      	strh	r2, [r3, #0]
	IN1_C = GPIO_IN_ARRAY[4];																				// store into IN1_C the first case of GPIO_IN_ARRAY
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	891a      	ldrh	r2, [r3, #8]
 8001ec6:	4b94      	ldr	r3, [pc, #592]	; (8002118 <motors_direction+0x290>)
 8001ec8:	801a      	strh	r2, [r3, #0]
	IN2_C = GPIO_IN_ARRAY[5];																				// store into IN2_C the first case of GPIO_IN_ARRAY
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	895a      	ldrh	r2, [r3, #10]
 8001ece:	4b93      	ldr	r3, [pc, #588]	; (800211c <motors_direction+0x294>)
 8001ed0:	801a      	strh	r2, [r3, #0]
	IN1_D = GPIO_IN_ARRAY[6];																				// store into IN1_D the first case of GPIO_IN_ARRAY
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	899a      	ldrh	r2, [r3, #12]
 8001ed6:	4b92      	ldr	r3, [pc, #584]	; (8002120 <motors_direction+0x298>)
 8001ed8:	801a      	strh	r2, [r3, #0]
	IN2_D = GPIO_IN_ARRAY[7];																				// store into IN2_D the first case of GPIO_IN_ARRAY
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	89da      	ldrh	r2, [r3, #14]
 8001ede:	4b91      	ldr	r3, [pc, #580]	; (8002124 <motors_direction+0x29c>)
 8001ee0:	801a      	strh	r2, [r3, #0]

	switch (myRxData[0])
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	3b42      	subs	r3, #66	; 0x42
 8001ee8:	2b22      	cmp	r3, #34	; 0x22
 8001eea:	f200 8278 	bhi.w	80023de <motors_direction+0x556>
 8001eee:	a201      	add	r2, pc, #4	; (adr r2, 8001ef4 <motors_direction+0x6c>)
 8001ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ef4:	08002129 	.word	0x08002129
 8001ef8:	080023df 	.word	0x080023df
 8001efc:	0800203d 	.word	0x0800203d
 8001f00:	080023df 	.word	0x080023df
 8001f04:	080023df 	.word	0x080023df
 8001f08:	080021e5 	.word	0x080021e5
 8001f0c:	08001f81 	.word	0x08001f81
 8001f10:	080023df 	.word	0x080023df
 8001f14:	080023df 	.word	0x080023df
 8001f18:	080023df 	.word	0x080023df
 8001f1c:	0800237d 	.word	0x0800237d
 8001f20:	080023df 	.word	0x080023df
 8001f24:	080022a1 	.word	0x080022a1
 8001f28:	080023df 	.word	0x080023df
 8001f2c:	080023df 	.word	0x080023df
 8001f30:	080023df 	.word	0x080023df
 8001f34:	080022f3 	.word	0x080022f3
 8001f38:	080023df 	.word	0x080023df
 8001f3c:	080023df 	.word	0x080023df
 8001f40:	080023df 	.word	0x080023df
 8001f44:	080023df 	.word	0x080023df
 8001f48:	080023df 	.word	0x080023df
 8001f4c:	080023df 	.word	0x080023df
 8001f50:	080023df 	.word	0x080023df
 8001f54:	080023df 	.word	0x080023df
 8001f58:	080023df 	.word	0x080023df
 8001f5c:	080023df 	.word	0x080023df
 8001f60:	080023df 	.word	0x080023df
 8001f64:	080023df 	.word	0x080023df
 8001f68:	080023df 	.word	0x080023df
 8001f6c:	080023df 	.word	0x080023df
 8001f70:	08001fe3 	.word	0x08001fe3
 8001f74:	0800218b 	.word	0x0800218b
 8001f78:	0800209f 	.word	0x0800209f
 8001f7c:	08002247 	.word	0x08002247
	{
	case 'H' :  HAL_GPIO_WritePin(MOTORS_GPIO_PORT_B, IN1_A | IN1_D , GPIO_PIN_SET);						 // Transition to the high state of the pins : IN1_A | IN1_D
 8001f80:	4b5f      	ldr	r3, [pc, #380]	; (8002100 <motors_direction+0x278>)
 8001f82:	6818      	ldr	r0, [r3, #0]
 8001f84:	4b60      	ldr	r3, [pc, #384]	; (8002108 <motors_direction+0x280>)
 8001f86:	881a      	ldrh	r2, [r3, #0]
 8001f88:	4b65      	ldr	r3, [pc, #404]	; (8002120 <motors_direction+0x298>)
 8001f8a:	881b      	ldrh	r3, [r3, #0]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	2201      	movs	r2, #1
 8001f92:	4619      	mov	r1, r3
 8001f94:	f001 fb50 	bl	8003638 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(MOTORS_GPIO_PORT_E, IN1_C | IN1_B, GPIO_PIN_SET);							 // Transition to the high state of the pins : IN1_C | IN1_B
 8001f98:	4b5a      	ldr	r3, [pc, #360]	; (8002104 <motors_direction+0x27c>)
 8001f9a:	6818      	ldr	r0, [r3, #0]
 8001f9c:	4b5e      	ldr	r3, [pc, #376]	; (8002118 <motors_direction+0x290>)
 8001f9e:	881a      	ldrh	r2, [r3, #0]
 8001fa0:	4b5b      	ldr	r3, [pc, #364]	; (8002110 <motors_direction+0x288>)
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	2201      	movs	r2, #1
 8001faa:	4619      	mov	r1, r3
 8001fac:	f001 fb44 	bl	8003638 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(MOTORS_GPIO_PORT_E, IN2_C |  IN2_B | IN2_A, GPIO_PIN_RESET);				 // Transition to the low state of the pins :  IN2_C | IN2_B | IN2_A
 8001fb0:	4b54      	ldr	r3, [pc, #336]	; (8002104 <motors_direction+0x27c>)
 8001fb2:	6818      	ldr	r0, [r3, #0]
 8001fb4:	4b59      	ldr	r3, [pc, #356]	; (800211c <motors_direction+0x294>)
 8001fb6:	881a      	ldrh	r2, [r3, #0]
 8001fb8:	4b56      	ldr	r3, [pc, #344]	; (8002114 <motors_direction+0x28c>)
 8001fba:	881b      	ldrh	r3, [r3, #0]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	4b52      	ldr	r3, [pc, #328]	; (800210c <motors_direction+0x284>)
 8001fc2:	881b      	ldrh	r3, [r3, #0]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	2200      	movs	r2, #0
 8001fca:	4619      	mov	r1, r3
 8001fcc:	f001 fb34 	bl	8003638 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(MOTORS_GPIO_PORT_B, IN2_D , GPIO_PIN_RESET);								 // Transition to the low state of the pins :  IN2_D
 8001fd0:	4b4b      	ldr	r3, [pc, #300]	; (8002100 <motors_direction+0x278>)
 8001fd2:	6818      	ldr	r0, [r3, #0]
 8001fd4:	4b53      	ldr	r3, [pc, #332]	; (8002124 <motors_direction+0x29c>)
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	4619      	mov	r1, r3
 8001fdc:	f001 fb2c 	bl	8003638 <HAL_GPIO_WritePin>
				break;
 8001fe0:	e1fe      	b.n	80023e0 <motors_direction+0x558>

	case 'a' :  HAL_GPIO_WritePin(MOTORS_GPIO_PORT_B, IN1_D | IN1_A, GPIO_PIN_SET);							 // Transition to the high state of the pins : IN1_D | IN1_A
 8001fe2:	4b47      	ldr	r3, [pc, #284]	; (8002100 <motors_direction+0x278>)
 8001fe4:	6818      	ldr	r0, [r3, #0]
 8001fe6:	4b4e      	ldr	r3, [pc, #312]	; (8002120 <motors_direction+0x298>)
 8001fe8:	881a      	ldrh	r2, [r3, #0]
 8001fea:	4b47      	ldr	r3, [pc, #284]	; (8002108 <motors_direction+0x280>)
 8001fec:	881b      	ldrh	r3, [r3, #0]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	f001 fb1f 	bl	8003638 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(MOTORS_GPIO_PORT_E, IN1_C |  IN2_C | IN2_A | IN1_B |IN2_B, GPIO_PIN_RESET);// Transition to the low state of the pins : IN1_C |  IN2_C | IN2_A | IN1_B |IN2_B
 8001ffa:	4b42      	ldr	r3, [pc, #264]	; (8002104 <motors_direction+0x27c>)
 8001ffc:	6818      	ldr	r0, [r3, #0]
 8001ffe:	4b46      	ldr	r3, [pc, #280]	; (8002118 <motors_direction+0x290>)
 8002000:	881a      	ldrh	r2, [r3, #0]
 8002002:	4b46      	ldr	r3, [pc, #280]	; (800211c <motors_direction+0x294>)
 8002004:	881b      	ldrh	r3, [r3, #0]
 8002006:	4313      	orrs	r3, r2
 8002008:	b29a      	uxth	r2, r3
 800200a:	4b40      	ldr	r3, [pc, #256]	; (800210c <motors_direction+0x284>)
 800200c:	881b      	ldrh	r3, [r3, #0]
 800200e:	4313      	orrs	r3, r2
 8002010:	b29a      	uxth	r2, r3
 8002012:	4b3f      	ldr	r3, [pc, #252]	; (8002110 <motors_direction+0x288>)
 8002014:	881b      	ldrh	r3, [r3, #0]
 8002016:	4313      	orrs	r3, r2
 8002018:	b29a      	uxth	r2, r3
 800201a:	4b3e      	ldr	r3, [pc, #248]	; (8002114 <motors_direction+0x28c>)
 800201c:	881b      	ldrh	r3, [r3, #0]
 800201e:	4313      	orrs	r3, r2
 8002020:	b29b      	uxth	r3, r3
 8002022:	2200      	movs	r2, #0
 8002024:	4619      	mov	r1, r3
 8002026:	f001 fb07 	bl	8003638 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(MOTORS_GPIO_PORT_B, IN2_D, GPIO_PIN_RESET);								 // Transition to the low state of the pins : IN2_D
 800202a:	4b35      	ldr	r3, [pc, #212]	; (8002100 <motors_direction+0x278>)
 800202c:	6818      	ldr	r0, [r3, #0]
 800202e:	4b3d      	ldr	r3, [pc, #244]	; (8002124 <motors_direction+0x29c>)
 8002030:	881b      	ldrh	r3, [r3, #0]
 8002032:	2200      	movs	r2, #0
 8002034:	4619      	mov	r1, r3
 8002036:	f001 faff 	bl	8003638 <HAL_GPIO_WritePin>
				break;
 800203a:	e1d1      	b.n	80023e0 <motors_direction+0x558>

	case 'D' :  HAL_GPIO_WritePin(MOTORS_GPIO_PORT_E, IN2_B | IN2_C , GPIO_PIN_SET);						 // Transition to the high state of the pins : IN2_B | IN2_C
 800203c:	4b31      	ldr	r3, [pc, #196]	; (8002104 <motors_direction+0x27c>)
 800203e:	6818      	ldr	r0, [r3, #0]
 8002040:	4b34      	ldr	r3, [pc, #208]	; (8002114 <motors_direction+0x28c>)
 8002042:	881a      	ldrh	r2, [r3, #0]
 8002044:	4b35      	ldr	r3, [pc, #212]	; (800211c <motors_direction+0x294>)
 8002046:	881b      	ldrh	r3, [r3, #0]
 8002048:	4313      	orrs	r3, r2
 800204a:	b29b      	uxth	r3, r3
 800204c:	2201      	movs	r2, #1
 800204e:	4619      	mov	r1, r3
 8002050:	f001 faf2 	bl	8003638 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(MOTORS_GPIO_PORT_B, IN1_D | IN1_A, GPIO_PIN_SET);							 // Transition to the high state of the pins : IN1_D | IN1_A
 8002054:	4b2a      	ldr	r3, [pc, #168]	; (8002100 <motors_direction+0x278>)
 8002056:	6818      	ldr	r0, [r3, #0]
 8002058:	4b31      	ldr	r3, [pc, #196]	; (8002120 <motors_direction+0x298>)
 800205a:	881a      	ldrh	r2, [r3, #0]
 800205c:	4b2a      	ldr	r3, [pc, #168]	; (8002108 <motors_direction+0x280>)
 800205e:	881b      	ldrh	r3, [r3, #0]
 8002060:	4313      	orrs	r3, r2
 8002062:	b29b      	uxth	r3, r3
 8002064:	2201      	movs	r2, #1
 8002066:	4619      	mov	r1, r3
 8002068:	f001 fae6 	bl	8003638 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(MOTORS_GPIO_PORT_B, IN2_D , GPIO_PIN_RESET);								 // Transition to the low state of the pins : IN2_D
 800206c:	4b24      	ldr	r3, [pc, #144]	; (8002100 <motors_direction+0x278>)
 800206e:	6818      	ldr	r0, [r3, #0]
 8002070:	4b2c      	ldr	r3, [pc, #176]	; (8002124 <motors_direction+0x29c>)
 8002072:	881b      	ldrh	r3, [r3, #0]
 8002074:	2200      	movs	r2, #0
 8002076:	4619      	mov	r1, r3
 8002078:	f001 fade 	bl	8003638 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(MOTORS_GPIO_PORT_E, IN2_A | IN1_B | IN1_C, GPIO_PIN_RESET);				 // Transition to the low state of the pins : IN2_A | IN1_B | IN1_C
 800207c:	4b21      	ldr	r3, [pc, #132]	; (8002104 <motors_direction+0x27c>)
 800207e:	6818      	ldr	r0, [r3, #0]
 8002080:	4b22      	ldr	r3, [pc, #136]	; (800210c <motors_direction+0x284>)
 8002082:	881a      	ldrh	r2, [r3, #0]
 8002084:	4b22      	ldr	r3, [pc, #136]	; (8002110 <motors_direction+0x288>)
 8002086:	881b      	ldrh	r3, [r3, #0]
 8002088:	4313      	orrs	r3, r2
 800208a:	b29a      	uxth	r2, r3
 800208c:	4b22      	ldr	r3, [pc, #136]	; (8002118 <motors_direction+0x290>)
 800208e:	881b      	ldrh	r3, [r3, #0]
 8002090:	4313      	orrs	r3, r2
 8002092:	b29b      	uxth	r3, r3
 8002094:	2200      	movs	r2, #0
 8002096:	4619      	mov	r1, r3
 8002098:	f001 face 	bl	8003638 <HAL_GPIO_WritePin>
				break;
 800209c:	e1a0      	b.n	80023e0 <motors_direction+0x558>

	case 'c' :  HAL_GPIO_WritePin(MOTORS_GPIO_PORT_E, IN2_A , GPIO_PIN_SET);								 // Transition to the high state of the pins : IN2_A
 800209e:	4b19      	ldr	r3, [pc, #100]	; (8002104 <motors_direction+0x27c>)
 80020a0:	6818      	ldr	r0, [r3, #0]
 80020a2:	4b1a      	ldr	r3, [pc, #104]	; (800210c <motors_direction+0x284>)
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	2201      	movs	r2, #1
 80020a8:	4619      	mov	r1, r3
 80020aa:	f001 fac5 	bl	8003638 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(MOTORS_GPIO_PORT_B, IN2_D , GPIO_PIN_SET);								 // Transition to the high state of the pins : IN2_D
 80020ae:	4b14      	ldr	r3, [pc, #80]	; (8002100 <motors_direction+0x278>)
 80020b0:	6818      	ldr	r0, [r3, #0]
 80020b2:	4b1c      	ldr	r3, [pc, #112]	; (8002124 <motors_direction+0x29c>)
 80020b4:	881b      	ldrh	r3, [r3, #0]
 80020b6:	2201      	movs	r2, #1
 80020b8:	4619      	mov	r1, r3
 80020ba:	f001 fabd 	bl	8003638 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(MOTORS_GPIO_PORT_E, IN1_B | IN2_B | IN1_C | IN2_C, GPIO_PIN_RESET);		 // Transition to the low state of the pins : IN1_B | IN2_B | IN1_C | IN2_C
 80020be:	4b11      	ldr	r3, [pc, #68]	; (8002104 <motors_direction+0x27c>)
 80020c0:	6818      	ldr	r0, [r3, #0]
 80020c2:	4b13      	ldr	r3, [pc, #76]	; (8002110 <motors_direction+0x288>)
 80020c4:	881a      	ldrh	r2, [r3, #0]
 80020c6:	4b13      	ldr	r3, [pc, #76]	; (8002114 <motors_direction+0x28c>)
 80020c8:	881b      	ldrh	r3, [r3, #0]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	4b12      	ldr	r3, [pc, #72]	; (8002118 <motors_direction+0x290>)
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	b29a      	uxth	r2, r3
 80020d6:	4b11      	ldr	r3, [pc, #68]	; (800211c <motors_direction+0x294>)
 80020d8:	881b      	ldrh	r3, [r3, #0]
 80020da:	4313      	orrs	r3, r2
 80020dc:	b29b      	uxth	r3, r3
 80020de:	2200      	movs	r2, #0
 80020e0:	4619      	mov	r1, r3
 80020e2:	f001 faa9 	bl	8003638 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(MOTORS_GPIO_PORT_B, IN1_A | IN1_D, GPIO_PIN_RESET);						 // Transition to the low state of the pins : IN1_A | IN1_D
 80020e6:	4b06      	ldr	r3, [pc, #24]	; (8002100 <motors_direction+0x278>)
 80020e8:	6818      	ldr	r0, [r3, #0]
 80020ea:	4b07      	ldr	r3, [pc, #28]	; (8002108 <motors_direction+0x280>)
 80020ec:	881a      	ldrh	r2, [r3, #0]
 80020ee:	4b0c      	ldr	r3, [pc, #48]	; (8002120 <motors_direction+0x298>)
 80020f0:	881b      	ldrh	r3, [r3, #0]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	2200      	movs	r2, #0
 80020f8:	4619      	mov	r1, r3
 80020fa:	f001 fa9d 	bl	8003638 <HAL_GPIO_WritePin>
				break;
 80020fe:	e16f      	b.n	80023e0 <motors_direction+0x558>
 8002100:	200000e0 	.word	0x200000e0
 8002104:	200000dc 	.word	0x200000dc
 8002108:	200000e4 	.word	0x200000e4
 800210c:	200000e8 	.word	0x200000e8
 8002110:	200000e6 	.word	0x200000e6
 8002114:	200000ea 	.word	0x200000ea
 8002118:	200000ec 	.word	0x200000ec
 800211c:	200000f0 	.word	0x200000f0
 8002120:	200000ee 	.word	0x200000ee
 8002124:	200000f2 	.word	0x200000f2

	case 'B' :  HAL_GPIO_WritePin(MOTORS_GPIO_PORT_B, IN2_D , GPIO_PIN_SET);								  // Transition to the high state of the pins : IN2_D
 8002128:	4b8a      	ldr	r3, [pc, #552]	; (8002354 <motors_direction+0x4cc>)
 800212a:	6818      	ldr	r0, [r3, #0]
 800212c:	4b8a      	ldr	r3, [pc, #552]	; (8002358 <motors_direction+0x4d0>)
 800212e:	881b      	ldrh	r3, [r3, #0]
 8002130:	2201      	movs	r2, #1
 8002132:	4619      	mov	r1, r3
 8002134:	f001 fa80 	bl	8003638 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(MOTORS_GPIO_PORT_E, IN2_A | IN2_B | IN2_C, GPIO_PIN_SET);					  // Transition to the high state of the pins :  IN2_A | IN2_B | IN2_C
 8002138:	4b88      	ldr	r3, [pc, #544]	; (800235c <motors_direction+0x4d4>)
 800213a:	6818      	ldr	r0, [r3, #0]
 800213c:	4b88      	ldr	r3, [pc, #544]	; (8002360 <motors_direction+0x4d8>)
 800213e:	881a      	ldrh	r2, [r3, #0]
 8002140:	4b88      	ldr	r3, [pc, #544]	; (8002364 <motors_direction+0x4dc>)
 8002142:	881b      	ldrh	r3, [r3, #0]
 8002144:	4313      	orrs	r3, r2
 8002146:	b29a      	uxth	r2, r3
 8002148:	4b87      	ldr	r3, [pc, #540]	; (8002368 <motors_direction+0x4e0>)
 800214a:	881b      	ldrh	r3, [r3, #0]
 800214c:	4313      	orrs	r3, r2
 800214e:	b29b      	uxth	r3, r3
 8002150:	2201      	movs	r2, #1
 8002152:	4619      	mov	r1, r3
 8002154:	f001 fa70 	bl	8003638 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(MOTORS_GPIO_PORT_B, IN1_A | IN1_D, GPIO_PIN_RESET);						  // Transition to the low state of the pins : IN1_A | IN1_D
 8002158:	4b7e      	ldr	r3, [pc, #504]	; (8002354 <motors_direction+0x4cc>)
 800215a:	6818      	ldr	r0, [r3, #0]
 800215c:	4b83      	ldr	r3, [pc, #524]	; (800236c <motors_direction+0x4e4>)
 800215e:	881a      	ldrh	r2, [r3, #0]
 8002160:	4b83      	ldr	r3, [pc, #524]	; (8002370 <motors_direction+0x4e8>)
 8002162:	881b      	ldrh	r3, [r3, #0]
 8002164:	4313      	orrs	r3, r2
 8002166:	b29b      	uxth	r3, r3
 8002168:	2200      	movs	r2, #0
 800216a:	4619      	mov	r1, r3
 800216c:	f001 fa64 	bl	8003638 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(MOTORS_GPIO_PORT_E, IN1_B | IN1_C  , GPIO_PIN_RESET);						  // Transition to the low state of the pins : IN1_B | IN1_C
 8002170:	4b7a      	ldr	r3, [pc, #488]	; (800235c <motors_direction+0x4d4>)
 8002172:	6818      	ldr	r0, [r3, #0]
 8002174:	4b7f      	ldr	r3, [pc, #508]	; (8002374 <motors_direction+0x4ec>)
 8002176:	881a      	ldrh	r2, [r3, #0]
 8002178:	4b7f      	ldr	r3, [pc, #508]	; (8002378 <motors_direction+0x4f0>)
 800217a:	881b      	ldrh	r3, [r3, #0]
 800217c:	4313      	orrs	r3, r2
 800217e:	b29b      	uxth	r3, r3
 8002180:	2200      	movs	r2, #0
 8002182:	4619      	mov	r1, r3
 8002184:	f001 fa58 	bl	8003638 <HAL_GPIO_WritePin>
				break;
 8002188:	e12a      	b.n	80023e0 <motors_direction+0x558>

	case 'b' :  HAL_GPIO_WritePin(MOTORS_GPIO_PORT_E, IN2_B | IN2_C, GPIO_PIN_SET);							  // Transition to the high state of the pins : IN2_B | IN2_C
 800218a:	4b74      	ldr	r3, [pc, #464]	; (800235c <motors_direction+0x4d4>)
 800218c:	6818      	ldr	r0, [r3, #0]
 800218e:	4b75      	ldr	r3, [pc, #468]	; (8002364 <motors_direction+0x4dc>)
 8002190:	881a      	ldrh	r2, [r3, #0]
 8002192:	4b75      	ldr	r3, [pc, #468]	; (8002368 <motors_direction+0x4e0>)
 8002194:	881b      	ldrh	r3, [r3, #0]
 8002196:	4313      	orrs	r3, r2
 8002198:	b29b      	uxth	r3, r3
 800219a:	2201      	movs	r2, #1
 800219c:	4619      	mov	r1, r3
 800219e:	f001 fa4b 	bl	8003638 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(MOTORS_GPIO_PORT_E, IN2_A | IN1_B | IN1_C, GPIO_PIN_RESET);				  // Transition to the low state of the pins :  IN2_A | IN1_B | IN1_C
 80021a2:	4b6e      	ldr	r3, [pc, #440]	; (800235c <motors_direction+0x4d4>)
 80021a4:	6818      	ldr	r0, [r3, #0]
 80021a6:	4b6e      	ldr	r3, [pc, #440]	; (8002360 <motors_direction+0x4d8>)
 80021a8:	881a      	ldrh	r2, [r3, #0]
 80021aa:	4b72      	ldr	r3, [pc, #456]	; (8002374 <motors_direction+0x4ec>)
 80021ac:	881b      	ldrh	r3, [r3, #0]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	4b71      	ldr	r3, [pc, #452]	; (8002378 <motors_direction+0x4f0>)
 80021b4:	881b      	ldrh	r3, [r3, #0]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	2200      	movs	r2, #0
 80021bc:	4619      	mov	r1, r3
 80021be:	f001 fa3b 	bl	8003638 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(MOTORS_GPIO_PORT_B, IN1_A |IN1_D | IN2_D, GPIO_PIN_RESET);				  // Transition to the low state of the pins : IN1_A |IN1_D | IN2_D
 80021c2:	4b64      	ldr	r3, [pc, #400]	; (8002354 <motors_direction+0x4cc>)
 80021c4:	6818      	ldr	r0, [r3, #0]
 80021c6:	4b69      	ldr	r3, [pc, #420]	; (800236c <motors_direction+0x4e4>)
 80021c8:	881a      	ldrh	r2, [r3, #0]
 80021ca:	4b69      	ldr	r3, [pc, #420]	; (8002370 <motors_direction+0x4e8>)
 80021cc:	881b      	ldrh	r3, [r3, #0]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	4b61      	ldr	r3, [pc, #388]	; (8002358 <motors_direction+0x4d0>)
 80021d4:	881b      	ldrh	r3, [r3, #0]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	b29b      	uxth	r3, r3
 80021da:	2200      	movs	r2, #0
 80021dc:	4619      	mov	r1, r3
 80021de:	f001 fa2b 	bl	8003638 <HAL_GPIO_WritePin>
				break;
 80021e2:	e0fd      	b.n	80023e0 <motors_direction+0x558>

	case 'G' :  HAL_GPIO_WritePin(MOTORS_GPIO_PORT_E, IN2_A | IN1_B | IN1_C , GPIO_PIN_SET);				  // Transition to the high state of the pins : IN2_A | IN1_B | IN1_C
 80021e4:	4b5d      	ldr	r3, [pc, #372]	; (800235c <motors_direction+0x4d4>)
 80021e6:	6818      	ldr	r0, [r3, #0]
 80021e8:	4b5d      	ldr	r3, [pc, #372]	; (8002360 <motors_direction+0x4d8>)
 80021ea:	881a      	ldrh	r2, [r3, #0]
 80021ec:	4b61      	ldr	r3, [pc, #388]	; (8002374 <motors_direction+0x4ec>)
 80021ee:	881b      	ldrh	r3, [r3, #0]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	4b60      	ldr	r3, [pc, #384]	; (8002378 <motors_direction+0x4f0>)
 80021f6:	881b      	ldrh	r3, [r3, #0]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	2201      	movs	r2, #1
 80021fe:	4619      	mov	r1, r3
 8002200:	f001 fa1a 	bl	8003638 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(MOTORS_GPIO_PORT_B, IN2_D, GPIO_PIN_SET);									  // Transition to the high state of the pins : IN2_D
 8002204:	4b53      	ldr	r3, [pc, #332]	; (8002354 <motors_direction+0x4cc>)
 8002206:	6818      	ldr	r0, [r3, #0]
 8002208:	4b53      	ldr	r3, [pc, #332]	; (8002358 <motors_direction+0x4d0>)
 800220a:	881b      	ldrh	r3, [r3, #0]
 800220c:	2201      	movs	r2, #1
 800220e:	4619      	mov	r1, r3
 8002210:	f001 fa12 	bl	8003638 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(MOTORS_GPIO_PORT_B, IN1_A | IN1_D , GPIO_PIN_RESET);						  // Transition to the low state of the pins : IN1_A | IN1_D
 8002214:	4b4f      	ldr	r3, [pc, #316]	; (8002354 <motors_direction+0x4cc>)
 8002216:	6818      	ldr	r0, [r3, #0]
 8002218:	4b54      	ldr	r3, [pc, #336]	; (800236c <motors_direction+0x4e4>)
 800221a:	881a      	ldrh	r2, [r3, #0]
 800221c:	4b54      	ldr	r3, [pc, #336]	; (8002370 <motors_direction+0x4e8>)
 800221e:	881b      	ldrh	r3, [r3, #0]
 8002220:	4313      	orrs	r3, r2
 8002222:	b29b      	uxth	r3, r3
 8002224:	2200      	movs	r2, #0
 8002226:	4619      	mov	r1, r3
 8002228:	f001 fa06 	bl	8003638 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(MOTORS_GPIO_PORT_E, IN2_C | IN2_B, GPIO_PIN_RESET);						  // Transition to the low state of the pins : IN2_C | IN2_B
 800222c:	4b4b      	ldr	r3, [pc, #300]	; (800235c <motors_direction+0x4d4>)
 800222e:	6818      	ldr	r0, [r3, #0]
 8002230:	4b4d      	ldr	r3, [pc, #308]	; (8002368 <motors_direction+0x4e0>)
 8002232:	881a      	ldrh	r2, [r3, #0]
 8002234:	4b4b      	ldr	r3, [pc, #300]	; (8002364 <motors_direction+0x4dc>)
 8002236:	881b      	ldrh	r3, [r3, #0]
 8002238:	4313      	orrs	r3, r2
 800223a:	b29b      	uxth	r3, r3
 800223c:	2200      	movs	r2, #0
 800223e:	4619      	mov	r1, r3
 8002240:	f001 f9fa 	bl	8003638 <HAL_GPIO_WritePin>
				break;
 8002244:	e0cc      	b.n	80023e0 <motors_direction+0x558>

	case 'd' :	HAL_GPIO_WritePin(MOTORS_GPIO_PORT_E, IN1_B | IN1_C, GPIO_PIN_SET);							  // Transition to the high state of the pins : IN1_B | IN1_C
 8002246:	4b45      	ldr	r3, [pc, #276]	; (800235c <motors_direction+0x4d4>)
 8002248:	6818      	ldr	r0, [r3, #0]
 800224a:	4b4a      	ldr	r3, [pc, #296]	; (8002374 <motors_direction+0x4ec>)
 800224c:	881a      	ldrh	r2, [r3, #0]
 800224e:	4b4a      	ldr	r3, [pc, #296]	; (8002378 <motors_direction+0x4f0>)
 8002250:	881b      	ldrh	r3, [r3, #0]
 8002252:	4313      	orrs	r3, r2
 8002254:	b29b      	uxth	r3, r3
 8002256:	2201      	movs	r2, #1
 8002258:	4619      	mov	r1, r3
 800225a:	f001 f9ed 	bl	8003638 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(MOTORS_GPIO_PORT_E, IN2_C | IN2_A | IN2_B, GPIO_PIN_RESET);				  // Transition to the low state of the pins :IN2_C | IN2_A | IN2_B
 800225e:	4b3f      	ldr	r3, [pc, #252]	; (800235c <motors_direction+0x4d4>)
 8002260:	6818      	ldr	r0, [r3, #0]
 8002262:	4b41      	ldr	r3, [pc, #260]	; (8002368 <motors_direction+0x4e0>)
 8002264:	881a      	ldrh	r2, [r3, #0]
 8002266:	4b3e      	ldr	r3, [pc, #248]	; (8002360 <motors_direction+0x4d8>)
 8002268:	881b      	ldrh	r3, [r3, #0]
 800226a:	4313      	orrs	r3, r2
 800226c:	b29a      	uxth	r2, r3
 800226e:	4b3d      	ldr	r3, [pc, #244]	; (8002364 <motors_direction+0x4dc>)
 8002270:	881b      	ldrh	r3, [r3, #0]
 8002272:	4313      	orrs	r3, r2
 8002274:	b29b      	uxth	r3, r3
 8002276:	2200      	movs	r2, #0
 8002278:	4619      	mov	r1, r3
 800227a:	f001 f9dd 	bl	8003638 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(MOTORS_GPIO_PORT_B, IN1_A | IN1_D | IN2_D, GPIO_PIN_RESET);				  // Transition to the low state of the pins : IN1_A | IN1_D | IN2_D
 800227e:	4b35      	ldr	r3, [pc, #212]	; (8002354 <motors_direction+0x4cc>)
 8002280:	6818      	ldr	r0, [r3, #0]
 8002282:	4b3a      	ldr	r3, [pc, #232]	; (800236c <motors_direction+0x4e4>)
 8002284:	881a      	ldrh	r2, [r3, #0]
 8002286:	4b3a      	ldr	r3, [pc, #232]	; (8002370 <motors_direction+0x4e8>)
 8002288:	881b      	ldrh	r3, [r3, #0]
 800228a:	4313      	orrs	r3, r2
 800228c:	b29a      	uxth	r2, r3
 800228e:	4b32      	ldr	r3, [pc, #200]	; (8002358 <motors_direction+0x4d0>)
 8002290:	881b      	ldrh	r3, [r3, #0]
 8002292:	4313      	orrs	r3, r2
 8002294:	b29b      	uxth	r3, r3
 8002296:	2200      	movs	r2, #0
 8002298:	4619      	mov	r1, r3
 800229a:	f001 f9cd 	bl	8003638 <HAL_GPIO_WritePin>
				break;
 800229e:	e09f      	b.n	80023e0 <motors_direction+0x558>

	case 'N' :  HAL_GPIO_WritePin(MOTORS_GPIO_PORT_E, IN2_A | IN1_B | IN2_B | IN1_C | IN2_C, GPIO_PIN_RESET); // Transition to the low state of the pins : IN2_A | IN1_B | IN2_B | IN1_C | IN2_C
 80022a0:	4b2e      	ldr	r3, [pc, #184]	; (800235c <motors_direction+0x4d4>)
 80022a2:	6818      	ldr	r0, [r3, #0]
 80022a4:	4b2e      	ldr	r3, [pc, #184]	; (8002360 <motors_direction+0x4d8>)
 80022a6:	881a      	ldrh	r2, [r3, #0]
 80022a8:	4b32      	ldr	r3, [pc, #200]	; (8002374 <motors_direction+0x4ec>)
 80022aa:	881b      	ldrh	r3, [r3, #0]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	4b2c      	ldr	r3, [pc, #176]	; (8002364 <motors_direction+0x4dc>)
 80022b2:	881b      	ldrh	r3, [r3, #0]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	4b2f      	ldr	r3, [pc, #188]	; (8002378 <motors_direction+0x4f0>)
 80022ba:	881b      	ldrh	r3, [r3, #0]
 80022bc:	4313      	orrs	r3, r2
 80022be:	b29a      	uxth	r2, r3
 80022c0:	4b29      	ldr	r3, [pc, #164]	; (8002368 <motors_direction+0x4e0>)
 80022c2:	881b      	ldrh	r3, [r3, #0]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	2200      	movs	r2, #0
 80022ca:	4619      	mov	r1, r3
 80022cc:	f001 f9b4 	bl	8003638 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(MOTORS_GPIO_PORT_B, IN1_A | IN1_D | IN2_D, GPIO_PIN_RESET);				  // Transition to the low state of the pins : IN1_A | IN1_D | IN2_D
 80022d0:	4b20      	ldr	r3, [pc, #128]	; (8002354 <motors_direction+0x4cc>)
 80022d2:	6818      	ldr	r0, [r3, #0]
 80022d4:	4b25      	ldr	r3, [pc, #148]	; (800236c <motors_direction+0x4e4>)
 80022d6:	881a      	ldrh	r2, [r3, #0]
 80022d8:	4b25      	ldr	r3, [pc, #148]	; (8002370 <motors_direction+0x4e8>)
 80022da:	881b      	ldrh	r3, [r3, #0]
 80022dc:	4313      	orrs	r3, r2
 80022de:	b29a      	uxth	r2, r3
 80022e0:	4b1d      	ldr	r3, [pc, #116]	; (8002358 <motors_direction+0x4d0>)
 80022e2:	881b      	ldrh	r3, [r3, #0]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	2200      	movs	r2, #0
 80022ea:	4619      	mov	r1, r3
 80022ec:	f001 f9a4 	bl	8003638 <HAL_GPIO_WritePin>
				break;
 80022f0:	e076      	b.n	80023e0 <motors_direction+0x558>

	case 'R' :  HAL_GPIO_WritePin(MOTORS_GPIO_PORT_E, IN1_C | IN2_B , GPIO_PIN_SET);						  // Transition to the high state of the pins :IN1_C | IN2_B
 80022f2:	4b1a      	ldr	r3, [pc, #104]	; (800235c <motors_direction+0x4d4>)
 80022f4:	6818      	ldr	r0, [r3, #0]
 80022f6:	4b20      	ldr	r3, [pc, #128]	; (8002378 <motors_direction+0x4f0>)
 80022f8:	881a      	ldrh	r2, [r3, #0]
 80022fa:	4b1a      	ldr	r3, [pc, #104]	; (8002364 <motors_direction+0x4dc>)
 80022fc:	881b      	ldrh	r3, [r3, #0]
 80022fe:	4313      	orrs	r3, r2
 8002300:	b29b      	uxth	r3, r3
 8002302:	2201      	movs	r2, #1
 8002304:	4619      	mov	r1, r3
 8002306:	f001 f997 	bl	8003638 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(MOTORS_GPIO_PORT_B, IN1_A | IN2_D , GPIO_PIN_SET);						  // Transition to the high state of the pins :IN1_A | IN2_D
 800230a:	4b12      	ldr	r3, [pc, #72]	; (8002354 <motors_direction+0x4cc>)
 800230c:	6818      	ldr	r0, [r3, #0]
 800230e:	4b17      	ldr	r3, [pc, #92]	; (800236c <motors_direction+0x4e4>)
 8002310:	881a      	ldrh	r2, [r3, #0]
 8002312:	4b11      	ldr	r3, [pc, #68]	; (8002358 <motors_direction+0x4d0>)
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	4313      	orrs	r3, r2
 8002318:	b29b      	uxth	r3, r3
 800231a:	2201      	movs	r2, #1
 800231c:	4619      	mov	r1, r3
 800231e:	f001 f98b 	bl	8003638 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(MOTORS_GPIO_PORT_E, IN2_A | IN1_B | IN2_C, GPIO_PIN_RESET);				  // Transition to the low state of the pins : IN2_A | IN1_B | IN2_C
 8002322:	4b0e      	ldr	r3, [pc, #56]	; (800235c <motors_direction+0x4d4>)
 8002324:	6818      	ldr	r0, [r3, #0]
 8002326:	4b0e      	ldr	r3, [pc, #56]	; (8002360 <motors_direction+0x4d8>)
 8002328:	881a      	ldrh	r2, [r3, #0]
 800232a:	4b12      	ldr	r3, [pc, #72]	; (8002374 <motors_direction+0x4ec>)
 800232c:	881b      	ldrh	r3, [r3, #0]
 800232e:	4313      	orrs	r3, r2
 8002330:	b29a      	uxth	r2, r3
 8002332:	4b0d      	ldr	r3, [pc, #52]	; (8002368 <motors_direction+0x4e0>)
 8002334:	881b      	ldrh	r3, [r3, #0]
 8002336:	4313      	orrs	r3, r2
 8002338:	b29b      	uxth	r3, r3
 800233a:	2200      	movs	r2, #0
 800233c:	4619      	mov	r1, r3
 800233e:	f001 f97b 	bl	8003638 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(MOTORS_GPIO_PORT_B, IN1_D , GPIO_PIN_RESET);								  // Transition to the low state of the pins : IN1_D
 8002342:	4b04      	ldr	r3, [pc, #16]	; (8002354 <motors_direction+0x4cc>)
 8002344:	6818      	ldr	r0, [r3, #0]
 8002346:	4b0a      	ldr	r3, [pc, #40]	; (8002370 <motors_direction+0x4e8>)
 8002348:	881b      	ldrh	r3, [r3, #0]
 800234a:	2200      	movs	r2, #0
 800234c:	4619      	mov	r1, r3
 800234e:	f001 f973 	bl	8003638 <HAL_GPIO_WritePin>
				break;
 8002352:	e045      	b.n	80023e0 <motors_direction+0x558>
 8002354:	200000e0 	.word	0x200000e0
 8002358:	200000f2 	.word	0x200000f2
 800235c:	200000dc 	.word	0x200000dc
 8002360:	200000e8 	.word	0x200000e8
 8002364:	200000ea 	.word	0x200000ea
 8002368:	200000f0 	.word	0x200000f0
 800236c:	200000e4 	.word	0x200000e4
 8002370:	200000ee 	.word	0x200000ee
 8002374:	200000e6 	.word	0x200000e6
 8002378:	200000ec 	.word	0x200000ec

	case 'L' : 	HAL_GPIO_WritePin(MOTORS_GPIO_PORT_E, IN2_A | IN1_B | IN2_C, GPIO_PIN_SET);					  // Transition to the high state of the pins :IN2_A | IN1_B | IN2_C
 800237c:	4b31      	ldr	r3, [pc, #196]	; (8002444 <motors_direction+0x5bc>)
 800237e:	6818      	ldr	r0, [r3, #0]
 8002380:	4b31      	ldr	r3, [pc, #196]	; (8002448 <motors_direction+0x5c0>)
 8002382:	881a      	ldrh	r2, [r3, #0]
 8002384:	4b31      	ldr	r3, [pc, #196]	; (800244c <motors_direction+0x5c4>)
 8002386:	881b      	ldrh	r3, [r3, #0]
 8002388:	4313      	orrs	r3, r2
 800238a:	b29a      	uxth	r2, r3
 800238c:	4b30      	ldr	r3, [pc, #192]	; (8002450 <motors_direction+0x5c8>)
 800238e:	881b      	ldrh	r3, [r3, #0]
 8002390:	4313      	orrs	r3, r2
 8002392:	b29b      	uxth	r3, r3
 8002394:	2201      	movs	r2, #1
 8002396:	4619      	mov	r1, r3
 8002398:	f001 f94e 	bl	8003638 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(MOTORS_GPIO_PORT_B, IN1_D , GPIO_PIN_SET);								  // Transition to the high state of the pins : IN1_D
 800239c:	4b2d      	ldr	r3, [pc, #180]	; (8002454 <motors_direction+0x5cc>)
 800239e:	6818      	ldr	r0, [r3, #0]
 80023a0:	4b2d      	ldr	r3, [pc, #180]	; (8002458 <motors_direction+0x5d0>)
 80023a2:	881b      	ldrh	r3, [r3, #0]
 80023a4:	2201      	movs	r2, #1
 80023a6:	4619      	mov	r1, r3
 80023a8:	f001 f946 	bl	8003638 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(MOTORS_GPIO_PORT_E, IN2_B | IN1_C, GPIO_PIN_RESET);						  // Transition to the low state of the pins :IN2_B | IN1_C
 80023ac:	4b25      	ldr	r3, [pc, #148]	; (8002444 <motors_direction+0x5bc>)
 80023ae:	6818      	ldr	r0, [r3, #0]
 80023b0:	4b2a      	ldr	r3, [pc, #168]	; (800245c <motors_direction+0x5d4>)
 80023b2:	881a      	ldrh	r2, [r3, #0]
 80023b4:	4b2a      	ldr	r3, [pc, #168]	; (8002460 <motors_direction+0x5d8>)
 80023b6:	881b      	ldrh	r3, [r3, #0]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	2200      	movs	r2, #0
 80023be:	4619      	mov	r1, r3
 80023c0:	f001 f93a 	bl	8003638 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(MOTORS_GPIO_PORT_B, IN1_A |IN2_D, GPIO_PIN_RESET);						  // Transition to the low state of the pins :IN1_A |IN2_D
 80023c4:	4b23      	ldr	r3, [pc, #140]	; (8002454 <motors_direction+0x5cc>)
 80023c6:	6818      	ldr	r0, [r3, #0]
 80023c8:	4b26      	ldr	r3, [pc, #152]	; (8002464 <motors_direction+0x5dc>)
 80023ca:	881a      	ldrh	r2, [r3, #0]
 80023cc:	4b26      	ldr	r3, [pc, #152]	; (8002468 <motors_direction+0x5e0>)
 80023ce:	881b      	ldrh	r3, [r3, #0]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	2200      	movs	r2, #0
 80023d6:	4619      	mov	r1, r3
 80023d8:	f001 f92e 	bl	8003638 <HAL_GPIO_WritePin>
				break;
 80023dc:	e000      	b.n	80023e0 <motors_direction+0x558>

	default :
				break;
 80023de:	bf00      	nop
	}

	if(myRxData[1] == 0)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	3301      	adds	r3, #1
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d127      	bne.n	800243a <motors_direction+0x5b2>
	{
		HAL_GPIO_WritePin(MOTORS_GPIO_PORT_E, IN2_A | IN1_B | IN2_B | IN1_C | IN2_C, GPIO_PIN_RESET);		// Transition to the low state of the pins :IN2_A | IN1_B | IN2_B | IN1_C | IN2_C
 80023ea:	4b16      	ldr	r3, [pc, #88]	; (8002444 <motors_direction+0x5bc>)
 80023ec:	6818      	ldr	r0, [r3, #0]
 80023ee:	4b16      	ldr	r3, [pc, #88]	; (8002448 <motors_direction+0x5c0>)
 80023f0:	881a      	ldrh	r2, [r3, #0]
 80023f2:	4b16      	ldr	r3, [pc, #88]	; (800244c <motors_direction+0x5c4>)
 80023f4:	881b      	ldrh	r3, [r3, #0]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	4b18      	ldr	r3, [pc, #96]	; (800245c <motors_direction+0x5d4>)
 80023fc:	881b      	ldrh	r3, [r3, #0]
 80023fe:	4313      	orrs	r3, r2
 8002400:	b29a      	uxth	r2, r3
 8002402:	4b17      	ldr	r3, [pc, #92]	; (8002460 <motors_direction+0x5d8>)
 8002404:	881b      	ldrh	r3, [r3, #0]
 8002406:	4313      	orrs	r3, r2
 8002408:	b29a      	uxth	r2, r3
 800240a:	4b11      	ldr	r3, [pc, #68]	; (8002450 <motors_direction+0x5c8>)
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	4313      	orrs	r3, r2
 8002410:	b29b      	uxth	r3, r3
 8002412:	2200      	movs	r2, #0
 8002414:	4619      	mov	r1, r3
 8002416:	f001 f90f 	bl	8003638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTORS_GPIO_PORT_B, IN1_A | IN1_D | IN2_D, GPIO_PIN_RESET);						// Transition to the low state of the pins :IN1_A | IN1_D | IN2_D
 800241a:	4b0e      	ldr	r3, [pc, #56]	; (8002454 <motors_direction+0x5cc>)
 800241c:	6818      	ldr	r0, [r3, #0]
 800241e:	4b11      	ldr	r3, [pc, #68]	; (8002464 <motors_direction+0x5dc>)
 8002420:	881a      	ldrh	r2, [r3, #0]
 8002422:	4b0d      	ldr	r3, [pc, #52]	; (8002458 <motors_direction+0x5d0>)
 8002424:	881b      	ldrh	r3, [r3, #0]
 8002426:	4313      	orrs	r3, r2
 8002428:	b29a      	uxth	r2, r3
 800242a:	4b0f      	ldr	r3, [pc, #60]	; (8002468 <motors_direction+0x5e0>)
 800242c:	881b      	ldrh	r3, [r3, #0]
 800242e:	4313      	orrs	r3, r2
 8002430:	b29b      	uxth	r3, r3
 8002432:	2200      	movs	r2, #0
 8002434:	4619      	mov	r1, r3
 8002436:	f001 f8ff 	bl	8003638 <HAL_GPIO_WritePin>
	}
}
 800243a:	bf00      	nop
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	200000dc 	.word	0x200000dc
 8002448:	200000e8 	.word	0x200000e8
 800244c:	200000e6 	.word	0x200000e6
 8002450:	200000f0 	.word	0x200000f0
 8002454:	200000e0 	.word	0x200000e0
 8002458:	200000ee 	.word	0x200000ee
 800245c:	200000ea 	.word	0x200000ea
 8002460:	200000ec 	.word	0x200000ec
 8002464:	200000e4 	.word	0x200000e4
 8002468:	200000f2 	.word	0x200000f2

0800246c <HAL_TIM_IC_CaptureCallback>:
static uint8_t dutyCycle = 25;										// declaration of static variable for servomotor
static bool dst = false;											// declaration of static variable for the distance 1
static bool dst_2 = false;											// declaration of static variable for the distance 2

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim8)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
	if (htim8-> Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	7f1b      	ldrb	r3, [r3, #28]
 8002478:	2b02      	cmp	r3, #2
 800247a:	d156      	bne.n	800252a <HAL_TIM_IC_CaptureCallback+0xbe>
	{
		if (Is_First_Captured [ 0 ] == 0 )
 800247c:	4b5a      	ldr	r3, [pc, #360]	; (80025e8 <HAL_TIM_IC_CaptureCallback+0x17c>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d11b      	bne.n	80024bc <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Value [ 0 ] = HAL_TIM_ReadCapturedValue (htim8, TIM_CHANNEL_2);
 8002484:	2104      	movs	r1, #4
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f002 feaa 	bl	80051e0 <HAL_TIM_ReadCapturedValue>
 800248c:	4603      	mov	r3, r0
 800248e:	b29a      	uxth	r2, r3
 8002490:	4b56      	ldr	r3, [pc, #344]	; (80025ec <HAL_TIM_IC_CaptureCallback+0x180>)
 8002492:	801a      	strh	r2, [r3, #0]
			Is_First_Captured [ 0 ] = 1 ;
 8002494:	4b54      	ldr	r3, [pc, #336]	; (80025e8 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8002496:	2201      	movs	r2, #1
 8002498:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY (htim8, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	6a1a      	ldr	r2, [r3, #32]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80024a8:	621a      	str	r2, [r3, #32]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6a1a      	ldr	r2, [r3, #32]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f042 0220 	orr.w	r2, r2, #32
 80024b8:	621a      	str	r2, [r3, #32]
 80024ba:	e036      	b.n	800252a <HAL_TIM_IC_CaptureCallback+0xbe>
		}
		else  if (Is_First_Captured [ 0 ])
 80024bc:	4b4a      	ldr	r3, [pc, #296]	; (80025e8 <HAL_TIM_IC_CaptureCallback+0x17c>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d032      	beq.n	800252a <HAL_TIM_IC_CaptureCallback+0xbe>
		{
			IC_Value [ 1 ] = HAL_TIM_ReadCapturedValue (htim8, TIM_CHANNEL_2);
 80024c4:	2104      	movs	r1, #4
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f002 fe8a 	bl	80051e0 <HAL_TIM_ReadCapturedValue>
 80024cc:	4603      	mov	r3, r0
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	4b46      	ldr	r3, [pc, #280]	; (80025ec <HAL_TIM_IC_CaptureCallback+0x180>)
 80024d2:	805a      	strh	r2, [r3, #2]
			__HAL_TIM_SET_COUNTER (htim8, 0 );
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2200      	movs	r2, #0
 80024da:	625a      	str	r2, [r3, #36]	; 0x24
			Is_First_Captured [ 0 ] = 0 ;
 80024dc:	4b42      	ldr	r3, [pc, #264]	; (80025e8 <HAL_TIM_IC_CaptureCallback+0x17c>)
 80024de:	2200      	movs	r2, #0
 80024e0:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY (htim8, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6a1a      	ldr	r2, [r3, #32]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80024f0:	621a      	str	r2, [r3, #32]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	6a12      	ldr	r2, [r2, #32]
 80024fc:	621a      	str	r2, [r3, #32]

			if (IC_Value [ 1 ]> IC_Value [ 0 ])
 80024fe:	4b3b      	ldr	r3, [pc, #236]	; (80025ec <HAL_TIM_IC_CaptureCallback+0x180>)
 8002500:	885a      	ldrh	r2, [r3, #2]
 8002502:	4b3a      	ldr	r3, [pc, #232]	; (80025ec <HAL_TIM_IC_CaptureCallback+0x180>)
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	d90f      	bls.n	800252a <HAL_TIM_IC_CaptureCallback+0xbe>
			{
				temp = IC_Value [ 1 ] -IC_Value [ 0 ];
 800250a:	4b38      	ldr	r3, [pc, #224]	; (80025ec <HAL_TIM_IC_CaptureCallback+0x180>)
 800250c:	885a      	ldrh	r2, [r3, #2]
 800250e:	4b37      	ldr	r3, [pc, #220]	; (80025ec <HAL_TIM_IC_CaptureCallback+0x180>)
 8002510:	881b      	ldrh	r3, [r3, #0]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	b29a      	uxth	r2, r3
 8002516:	4b36      	ldr	r3, [pc, #216]	; (80025f0 <HAL_TIM_IC_CaptureCallback+0x184>)
 8002518:	801a      	strh	r2, [r3, #0]
				RAW_DISTANCE = IC_Value [ 1 ] -IC_Value [ 0 ];   // calculer la différence
 800251a:	4b34      	ldr	r3, [pc, #208]	; (80025ec <HAL_TIM_IC_CaptureCallback+0x180>)
 800251c:	885a      	ldrh	r2, [r3, #2]
 800251e:	4b33      	ldr	r3, [pc, #204]	; (80025ec <HAL_TIM_IC_CaptureCallback+0x180>)
 8002520:	881b      	ldrh	r3, [r3, #0]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	b29a      	uxth	r2, r3
 8002526:	4b33      	ldr	r3, [pc, #204]	; (80025f4 <HAL_TIM_IC_CaptureCallback+0x188>)
 8002528:	801a      	strh	r2, [r3, #0]
			}
		}
	}

	if (htim8-> Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	7f1b      	ldrb	r3, [r3, #28]
 800252e:	2b08      	cmp	r3, #8
 8002530:	d156      	bne.n	80025e0 <HAL_TIM_IC_CaptureCallback+0x174>
	{
		if (Is_First_Captured [ 1 ] == 0 )
 8002532:	4b2d      	ldr	r3, [pc, #180]	; (80025e8 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8002534:	785b      	ldrb	r3, [r3, #1]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d11b      	bne.n	8002572 <HAL_TIM_IC_CaptureCallback+0x106>
		{
			IC_Value [ 2 ] = HAL_TIM_ReadCapturedValue (htim8, TIM_CHANNEL_4);
 800253a:	210c      	movs	r1, #12
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f002 fe4f 	bl	80051e0 <HAL_TIM_ReadCapturedValue>
 8002542:	4603      	mov	r3, r0
 8002544:	b29a      	uxth	r2, r3
 8002546:	4b29      	ldr	r3, [pc, #164]	; (80025ec <HAL_TIM_IC_CaptureCallback+0x180>)
 8002548:	809a      	strh	r2, [r3, #4]
			Is_First_Captured [ 1 ] = 1 ;
 800254a:	4b27      	ldr	r3, [pc, #156]	; (80025e8 <HAL_TIM_IC_CaptureCallback+0x17c>)
 800254c:	2201      	movs	r2, #1
 800254e:	705a      	strb	r2, [r3, #1]
			__HAL_TIM_SET_CAPTUREPOLARITY (htim8, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_FALLING);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6a1a      	ldr	r2, [r3, #32]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 800255e:	621a      	str	r2, [r3, #32]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6a1a      	ldr	r2, [r3, #32]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800256e:	621a      	str	r2, [r3, #32]
				temp = IC_Value [ 3 ] -IC_Value [ 2 ];
				RAW_DISTANCE_2 = IC_Value [ 3 ] -IC_Value [ 2 ];   // calculer la différence
			}
		}
	}
}
 8002570:	e036      	b.n	80025e0 <HAL_TIM_IC_CaptureCallback+0x174>
		else  if (Is_First_Captured [ 1 ])
 8002572:	4b1d      	ldr	r3, [pc, #116]	; (80025e8 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8002574:	785b      	ldrb	r3, [r3, #1]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d032      	beq.n	80025e0 <HAL_TIM_IC_CaptureCallback+0x174>
			IC_Value [ 3 ] = HAL_TIM_ReadCapturedValue (htim8, TIM_CHANNEL_4);
 800257a:	210c      	movs	r1, #12
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f002 fe2f 	bl	80051e0 <HAL_TIM_ReadCapturedValue>
 8002582:	4603      	mov	r3, r0
 8002584:	b29a      	uxth	r2, r3
 8002586:	4b19      	ldr	r3, [pc, #100]	; (80025ec <HAL_TIM_IC_CaptureCallback+0x180>)
 8002588:	80da      	strh	r2, [r3, #6]
			__HAL_TIM_SET_COUNTER (htim8, 0 );
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2200      	movs	r2, #0
 8002590:	625a      	str	r2, [r3, #36]	; 0x24
			Is_First_Captured [ 1 ] = 0 ;
 8002592:	4b15      	ldr	r3, [pc, #84]	; (80025e8 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8002594:	2200      	movs	r2, #0
 8002596:	705a      	strb	r2, [r3, #1]
			__HAL_TIM_SET_CAPTUREPOLARITY (htim8, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6a1a      	ldr	r2, [r3, #32]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 80025a6:	621a      	str	r2, [r3, #32]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6a12      	ldr	r2, [r2, #32]
 80025b2:	621a      	str	r2, [r3, #32]
			if (IC_Value [ 3 ]> IC_Value [ 2 ])
 80025b4:	4b0d      	ldr	r3, [pc, #52]	; (80025ec <HAL_TIM_IC_CaptureCallback+0x180>)
 80025b6:	88da      	ldrh	r2, [r3, #6]
 80025b8:	4b0c      	ldr	r3, [pc, #48]	; (80025ec <HAL_TIM_IC_CaptureCallback+0x180>)
 80025ba:	889b      	ldrh	r3, [r3, #4]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d90f      	bls.n	80025e0 <HAL_TIM_IC_CaptureCallback+0x174>
				temp = IC_Value [ 3 ] -IC_Value [ 2 ];
 80025c0:	4b0a      	ldr	r3, [pc, #40]	; (80025ec <HAL_TIM_IC_CaptureCallback+0x180>)
 80025c2:	88da      	ldrh	r2, [r3, #6]
 80025c4:	4b09      	ldr	r3, [pc, #36]	; (80025ec <HAL_TIM_IC_CaptureCallback+0x180>)
 80025c6:	889b      	ldrh	r3, [r3, #4]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <HAL_TIM_IC_CaptureCallback+0x184>)
 80025ce:	801a      	strh	r2, [r3, #0]
				RAW_DISTANCE_2 = IC_Value [ 3 ] -IC_Value [ 2 ];   // calculer la différence
 80025d0:	4b06      	ldr	r3, [pc, #24]	; (80025ec <HAL_TIM_IC_CaptureCallback+0x180>)
 80025d2:	88da      	ldrh	r2, [r3, #6]
 80025d4:	4b05      	ldr	r3, [pc, #20]	; (80025ec <HAL_TIM_IC_CaptureCallback+0x180>)
 80025d6:	889b      	ldrh	r3, [r3, #4]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	b29a      	uxth	r2, r3
 80025dc:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <HAL_TIM_IC_CaptureCallback+0x18c>)
 80025de:	801a      	strh	r2, [r3, #0]
}
 80025e0:	bf00      	nop
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	200000fc 	.word	0x200000fc
 80025ec:	200000f4 	.word	0x200000f4
 80025f0:	200000fe 	.word	0x200000fe
 80025f4:	20000100 	.word	0x20000100
 80025f8:	20000102 	.word	0x20000102

080025fc <sensors_calculated_distance>:
	distance_2 = (uint16_t)distance_2;
	return distance_2;
}
*/

bool sensors_calculated_distance(){
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
	const float coef = ((float)17/1000);				// declaration of a coefficient
 8002602:	4b19      	ldr	r3, [pc, #100]	; (8002668 <sensors_calculated_distance+0x6c>)
 8002604:	607b      	str	r3, [r7, #4]
	float distance;
	distance = coef*RAW_DISTANCE;						// distance calculation
 8002606:	4b19      	ldr	r3, [pc, #100]	; (800266c <sensors_calculated_distance+0x70>)
 8002608:	881b      	ldrh	r3, [r3, #0]
 800260a:	ee07 3a90 	vmov	s15, r3
 800260e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002612:	ed97 7a01 	vldr	s14, [r7, #4]
 8002616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800261a:	edc7 7a00 	vstr	s15, [r7]
	distance = (uint16_t)distance;						// cast distance : float -> integer
 800261e:	edd7 7a00 	vldr	s15, [r7]
 8002622:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002626:	ee17 3a90 	vmov	r3, s15
 800262a:	b29b      	uxth	r3, r3
 800262c:	ee07 3a90 	vmov	s15, r3
 8002630:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002634:	edc7 7a00 	vstr	s15, [r7]

	if(distance < 25)								// if distance is smaller than 25
 8002638:	edd7 7a00 	vldr	s15, [r7]
 800263c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002640:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002648:	d503      	bpl.n	8002652 <sensors_calculated_distance+0x56>
	{
		dst = true;										// dst is true
 800264a:	4b09      	ldr	r3, [pc, #36]	; (8002670 <sensors_calculated_distance+0x74>)
 800264c:	2201      	movs	r2, #1
 800264e:	701a      	strb	r2, [r3, #0]
 8002650:	e002      	b.n	8002658 <sensors_calculated_distance+0x5c>
	}
	else
	{
		dst = false;									// dst is false
 8002652:	4b07      	ldr	r3, [pc, #28]	; (8002670 <sensors_calculated_distance+0x74>)
 8002654:	2200      	movs	r2, #0
 8002656:	701a      	strb	r2, [r3, #0]
	}
	return dst;											// return the state of dst at the principal program
 8002658:	4b05      	ldr	r3, [pc, #20]	; (8002670 <sensors_calculated_distance+0x74>)
 800265a:	781b      	ldrb	r3, [r3, #0]
}
 800265c:	4618      	mov	r0, r3
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	3c8b4396 	.word	0x3c8b4396
 800266c:	20000100 	.word	0x20000100
 8002670:	20000109 	.word	0x20000109

08002674 <sensors_calculated_distance_2>:

bool sensors_calculated_distance_2 (){
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
	const float coef = ((float)17/1000);				// declaration of a coefficient
 800267a:	4b19      	ldr	r3, [pc, #100]	; (80026e0 <sensors_calculated_distance_2+0x6c>)
 800267c:	607b      	str	r3, [r7, #4]
	float distance_2;
	distance_2 = coef*RAW_DISTANCE_2;					// distance_2 calculation
 800267e:	4b19      	ldr	r3, [pc, #100]	; (80026e4 <sensors_calculated_distance_2+0x70>)
 8002680:	881b      	ldrh	r3, [r3, #0]
 8002682:	ee07 3a90 	vmov	s15, r3
 8002686:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800268a:	ed97 7a01 	vldr	s14, [r7, #4]
 800268e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002692:	edc7 7a00 	vstr	s15, [r7]
	distance_2 = (uint16_t)distance_2;					// cast distance_2 : float -> integer
 8002696:	edd7 7a00 	vldr	s15, [r7]
 800269a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800269e:	ee17 3a90 	vmov	r3, s15
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	ee07 3a90 	vmov	s15, r3
 80026a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026ac:	edc7 7a00 	vstr	s15, [r7]

	if(distance_2 < 25)									// if distance_2 is smaller than 25
 80026b0:	edd7 7a00 	vldr	s15, [r7]
 80026b4:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80026b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026c0:	d503      	bpl.n	80026ca <sensors_calculated_distance_2+0x56>
	{
		dst_2 = true;									// dst_2 is true
 80026c2:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <sensors_calculated_distance_2+0x74>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	701a      	strb	r2, [r3, #0]
 80026c8:	e002      	b.n	80026d0 <sensors_calculated_distance_2+0x5c>
	}
	else
	{
		dst_2 = false;									// dst_2 is false
 80026ca:	4b07      	ldr	r3, [pc, #28]	; (80026e8 <sensors_calculated_distance_2+0x74>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	701a      	strb	r2, [r3, #0]
	}
	return dst_2;										// return the state of dst_2 at the principal program
 80026d0:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <sensors_calculated_distance_2+0x74>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	3c8b4396 	.word	0x3c8b4396
 80026e4:	20000102 	.word	0x20000102
 80026e8:	2000010a 	.word	0x2000010a

080026ec <sensors_start_servo>:


void sensors_start_servo(TIM_HandleTypeDef *htim_servo, uint32_t CHANNEL)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
    TIM_PORT = htim_servo;								 // Store into TIM_PORT the first argument passed to the function
 80026f6:	4a3b      	ldr	r2, [pc, #236]	; (80027e4 <sensors_start_servo+0xf8>)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6013      	str	r3, [r2, #0]

    if(dutyCycle < 125 && state == false)
 80026fc:	4b3a      	ldr	r3, [pc, #232]	; (80027e8 <sensors_start_servo+0xfc>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	2b7c      	cmp	r3, #124	; 0x7c
 8002702:	d834      	bhi.n	800276e <sensors_start_servo+0x82>
 8002704:	4b39      	ldr	r3, [pc, #228]	; (80027ec <sensors_start_servo+0x100>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	f083 0301 	eor.w	r3, r3, #1
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d02d      	beq.n	800276e <sensors_start_servo+0x82>
    {
        __HAL_TIM_SET_COMPARE(TIM_PORT, CHANNEL, dutyCycle);		// compare CCR value for the PWM
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d106      	bne.n	8002726 <sensors_start_servo+0x3a>
 8002718:	4b33      	ldr	r3, [pc, #204]	; (80027e8 <sensors_start_servo+0xfc>)
 800271a:	781a      	ldrb	r2, [r3, #0]
 800271c:	4b31      	ldr	r3, [pc, #196]	; (80027e4 <sensors_start_servo+0xf8>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	635a      	str	r2, [r3, #52]	; 0x34
 8002724:	e019      	b.n	800275a <sensors_start_servo+0x6e>
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	2b04      	cmp	r3, #4
 800272a:	d106      	bne.n	800273a <sensors_start_servo+0x4e>
 800272c:	4b2e      	ldr	r3, [pc, #184]	; (80027e8 <sensors_start_servo+0xfc>)
 800272e:	781a      	ldrb	r2, [r3, #0]
 8002730:	4b2c      	ldr	r3, [pc, #176]	; (80027e4 <sensors_start_servo+0xf8>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	639a      	str	r2, [r3, #56]	; 0x38
 8002738:	e00f      	b.n	800275a <sensors_start_servo+0x6e>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	2b08      	cmp	r3, #8
 800273e:	d106      	bne.n	800274e <sensors_start_servo+0x62>
 8002740:	4b29      	ldr	r3, [pc, #164]	; (80027e8 <sensors_start_servo+0xfc>)
 8002742:	781a      	ldrb	r2, [r3, #0]
 8002744:	4b27      	ldr	r3, [pc, #156]	; (80027e4 <sensors_start_servo+0xf8>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	63da      	str	r2, [r3, #60]	; 0x3c
 800274c:	e005      	b.n	800275a <sensors_start_servo+0x6e>
 800274e:	4b26      	ldr	r3, [pc, #152]	; (80027e8 <sensors_start_servo+0xfc>)
 8002750:	781a      	ldrb	r2, [r3, #0]
 8002752:	4b24      	ldr	r3, [pc, #144]	; (80027e4 <sensors_start_servo+0xf8>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	641a      	str	r2, [r3, #64]	; 0x40
        dutyCycle = dutyCycle + 1;									// increase dutycycle
 800275a:	4b23      	ldr	r3, [pc, #140]	; (80027e8 <sensors_start_servo+0xfc>)
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	3301      	adds	r3, #1
 8002760:	b2da      	uxtb	r2, r3
 8002762:	4b21      	ldr	r3, [pc, #132]	; (80027e8 <sensors_start_servo+0xfc>)
 8002764:	701a      	strb	r2, [r3, #0]
        HAL_Delay(5);												// Delay of 5 ms
 8002766:	2005      	movs	r0, #5
 8002768:	f000 f8de 	bl	8002928 <HAL_Delay>
        if (dutyCycle == 25)										// if the value of dutycycle is 25
        {
            state = false;											// state pass to false
        }
    }
}
 800276c:	e036      	b.n	80027dc <sensors_start_servo+0xf0>
        state = true;
 800276e:	4b1f      	ldr	r3, [pc, #124]	; (80027ec <sensors_start_servo+0x100>)
 8002770:	2201      	movs	r2, #1
 8002772:	701a      	strb	r2, [r3, #0]
        __HAL_TIM_SET_COMPARE(TIM_PORT, CHANNEL, dutyCycle);		// compare the CCR value for the PWM
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d106      	bne.n	8002788 <sensors_start_servo+0x9c>
 800277a:	4b1b      	ldr	r3, [pc, #108]	; (80027e8 <sensors_start_servo+0xfc>)
 800277c:	781a      	ldrb	r2, [r3, #0]
 800277e:	4b19      	ldr	r3, [pc, #100]	; (80027e4 <sensors_start_servo+0xf8>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	635a      	str	r2, [r3, #52]	; 0x34
 8002786:	e019      	b.n	80027bc <sensors_start_servo+0xd0>
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	2b04      	cmp	r3, #4
 800278c:	d106      	bne.n	800279c <sensors_start_servo+0xb0>
 800278e:	4b16      	ldr	r3, [pc, #88]	; (80027e8 <sensors_start_servo+0xfc>)
 8002790:	781a      	ldrb	r2, [r3, #0]
 8002792:	4b14      	ldr	r3, [pc, #80]	; (80027e4 <sensors_start_servo+0xf8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	639a      	str	r2, [r3, #56]	; 0x38
 800279a:	e00f      	b.n	80027bc <sensors_start_servo+0xd0>
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	2b08      	cmp	r3, #8
 80027a0:	d106      	bne.n	80027b0 <sensors_start_servo+0xc4>
 80027a2:	4b11      	ldr	r3, [pc, #68]	; (80027e8 <sensors_start_servo+0xfc>)
 80027a4:	781a      	ldrb	r2, [r3, #0]
 80027a6:	4b0f      	ldr	r3, [pc, #60]	; (80027e4 <sensors_start_servo+0xf8>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	63da      	str	r2, [r3, #60]	; 0x3c
 80027ae:	e005      	b.n	80027bc <sensors_start_servo+0xd0>
 80027b0:	4b0d      	ldr	r3, [pc, #52]	; (80027e8 <sensors_start_servo+0xfc>)
 80027b2:	781a      	ldrb	r2, [r3, #0]
 80027b4:	4b0b      	ldr	r3, [pc, #44]	; (80027e4 <sensors_start_servo+0xf8>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	641a      	str	r2, [r3, #64]	; 0x40
        dutyCycle = dutyCycle - 1;									// decrement dutycycle
 80027bc:	4b0a      	ldr	r3, [pc, #40]	; (80027e8 <sensors_start_servo+0xfc>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	3b01      	subs	r3, #1
 80027c2:	b2da      	uxtb	r2, r3
 80027c4:	4b08      	ldr	r3, [pc, #32]	; (80027e8 <sensors_start_servo+0xfc>)
 80027c6:	701a      	strb	r2, [r3, #0]
        HAL_Delay(5);												// delay of 5 ms
 80027c8:	2005      	movs	r0, #5
 80027ca:	f000 f8ad 	bl	8002928 <HAL_Delay>
        if (dutyCycle == 25)										// if the value of dutycycle is 25
 80027ce:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <sensors_start_servo+0xfc>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	2b19      	cmp	r3, #25
 80027d4:	d102      	bne.n	80027dc <sensors_start_servo+0xf0>
            state = false;											// state pass to false
 80027d6:	4b05      	ldr	r3, [pc, #20]	; (80027ec <sensors_start_servo+0x100>)
 80027d8:	2200      	movs	r2, #0
 80027da:	701a      	strb	r2, [r3, #0]
}
 80027dc:	bf00      	nop
 80027de:	3708      	adds	r7, #8
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	20000104 	.word	0x20000104
 80027e8:	20000030 	.word	0x20000030
 80027ec:	20000108 	.word	0x20000108

080027f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80027f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002828 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80027f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80027f6:	e003      	b.n	8002800 <LoopCopyDataInit>

080027f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80027f8:	4b0c      	ldr	r3, [pc, #48]	; (800282c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80027fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80027fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80027fe:	3104      	adds	r1, #4

08002800 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002800:	480b      	ldr	r0, [pc, #44]	; (8002830 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002802:	4b0c      	ldr	r3, [pc, #48]	; (8002834 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002804:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002806:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002808:	d3f6      	bcc.n	80027f8 <CopyDataInit>
  ldr  r2, =_sbss
 800280a:	4a0b      	ldr	r2, [pc, #44]	; (8002838 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800280c:	e002      	b.n	8002814 <LoopFillZerobss>

0800280e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800280e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002810:	f842 3b04 	str.w	r3, [r2], #4

08002814 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002814:	4b09      	ldr	r3, [pc, #36]	; (800283c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002816:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002818:	d3f9      	bcc.n	800280e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800281a:	f7fe fd4f 	bl	80012bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800281e:	f003 fab7 	bl	8005d90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002822:	f7fd fe51 	bl	80004c8 <main>
  bx  lr    
 8002826:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002828:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800282c:	08005e48 	.word	0x08005e48
  ldr  r0, =_sdata
 8002830:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002834:	2000003c 	.word	0x2000003c
  ldr  r2, =_sbss
 8002838:	20000040 	.word	0x20000040
  ldr  r3, = _ebss
 800283c:	200002d0 	.word	0x200002d0

08002840 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002840:	e7fe      	b.n	8002840 <ADC_IRQHandler>
	...

08002844 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002848:	4b0e      	ldr	r3, [pc, #56]	; (8002884 <HAL_Init+0x40>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a0d      	ldr	r2, [pc, #52]	; (8002884 <HAL_Init+0x40>)
 800284e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002852:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002854:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <HAL_Init+0x40>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a0a      	ldr	r2, [pc, #40]	; (8002884 <HAL_Init+0x40>)
 800285a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800285e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002860:	4b08      	ldr	r3, [pc, #32]	; (8002884 <HAL_Init+0x40>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a07      	ldr	r2, [pc, #28]	; (8002884 <HAL_Init+0x40>)
 8002866:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800286a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800286c:	2003      	movs	r0, #3
 800286e:	f000 fd07 	bl	8003280 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002872:	2000      	movs	r0, #0
 8002874:	f000 f808 	bl	8002888 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002878:	f7fe fae4 	bl	8000e44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40023c00 	.word	0x40023c00

08002888 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002890:	4b12      	ldr	r3, [pc, #72]	; (80028dc <HAL_InitTick+0x54>)
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	4b12      	ldr	r3, [pc, #72]	; (80028e0 <HAL_InitTick+0x58>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	4619      	mov	r1, r3
 800289a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800289e:	fbb3 f3f1 	udiv	r3, r3, r1
 80028a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 fd1f 	bl	80032ea <HAL_SYSTICK_Config>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e00e      	b.n	80028d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2b0f      	cmp	r3, #15
 80028ba:	d80a      	bhi.n	80028d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028bc:	2200      	movs	r2, #0
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	f04f 30ff 	mov.w	r0, #4294967295
 80028c4:	f000 fce7 	bl	8003296 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028c8:	4a06      	ldr	r2, [pc, #24]	; (80028e4 <HAL_InitTick+0x5c>)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
 80028d0:	e000      	b.n	80028d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	2000002c 	.word	0x2000002c
 80028e0:	20000038 	.word	0x20000038
 80028e4:	20000034 	.word	0x20000034

080028e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028ec:	4b06      	ldr	r3, [pc, #24]	; (8002908 <HAL_IncTick+0x20>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	461a      	mov	r2, r3
 80028f2:	4b06      	ldr	r3, [pc, #24]	; (800290c <HAL_IncTick+0x24>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4413      	add	r3, r2
 80028f8:	4a04      	ldr	r2, [pc, #16]	; (800290c <HAL_IncTick+0x24>)
 80028fa:	6013      	str	r3, [r2, #0]
}
 80028fc:	bf00      	nop
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	20000038 	.word	0x20000038
 800290c:	200002cc 	.word	0x200002cc

08002910 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  return uwTick;
 8002914:	4b03      	ldr	r3, [pc, #12]	; (8002924 <HAL_GetTick+0x14>)
 8002916:	681b      	ldr	r3, [r3, #0]
}
 8002918:	4618      	mov	r0, r3
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	200002cc 	.word	0x200002cc

08002928 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002930:	f7ff ffee 	bl	8002910 <HAL_GetTick>
 8002934:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002940:	d005      	beq.n	800294e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002942:	4b09      	ldr	r3, [pc, #36]	; (8002968 <HAL_Delay+0x40>)
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	461a      	mov	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	4413      	add	r3, r2
 800294c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800294e:	bf00      	nop
 8002950:	f7ff ffde 	bl	8002910 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	429a      	cmp	r2, r3
 800295e:	d8f7      	bhi.n	8002950 <HAL_Delay+0x28>
  {
  }
}
 8002960:	bf00      	nop
 8002962:	3710      	adds	r7, #16
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	20000038 	.word	0x20000038

0800296c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002974:	2300      	movs	r3, #0
 8002976:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e033      	b.n	80029ea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	2b00      	cmp	r3, #0
 8002988:	d109      	bne.n	800299e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7fe fa82 	bl	8000e94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	f003 0310 	and.w	r3, r3, #16
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d118      	bne.n	80029dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80029b2:	f023 0302 	bic.w	r3, r3, #2
 80029b6:	f043 0202 	orr.w	r2, r3, #2
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 fa92 	bl	8002ee8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	f023 0303 	bic.w	r3, r3, #3
 80029d2:	f043 0201 	orr.w	r2, r3, #1
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	641a      	str	r2, [r3, #64]	; 0x40
 80029da:	e001      	b.n	80029e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80029e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
	...

080029f4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d101      	bne.n	8002a0e <HAL_ADC_Start+0x1a>
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	e0a5      	b.n	8002b5a <HAL_ADC_Start+0x166>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d018      	beq.n	8002a56 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689a      	ldr	r2, [r3, #8]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f042 0201 	orr.w	r2, r2, #1
 8002a32:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a34:	4b4c      	ldr	r3, [pc, #304]	; (8002b68 <HAL_ADC_Start+0x174>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a4c      	ldr	r2, [pc, #304]	; (8002b6c <HAL_ADC_Start+0x178>)
 8002a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3e:	0c9a      	lsrs	r2, r3, #18
 8002a40:	4613      	mov	r3, r2
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	4413      	add	r3, r2
 8002a46:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002a48:	e002      	b.n	8002a50 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f9      	bne.n	8002a4a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d179      	bne.n	8002b58 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a68:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002a6c:	f023 0301 	bic.w	r3, r3, #1
 8002a70:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d007      	beq.n	8002a96 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a8e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aa2:	d106      	bne.n	8002ab2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa8:	f023 0206 	bic.w	r2, r3, #6
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	645a      	str	r2, [r3, #68]	; 0x44
 8002ab0:	e002      	b.n	8002ab8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ac0:	4b2b      	ldr	r3, [pc, #172]	; (8002b70 <HAL_ADC_Start+0x17c>)
 8002ac2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002acc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f003 031f 	and.w	r3, r3, #31
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d12a      	bne.n	8002b30 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a25      	ldr	r2, [pc, #148]	; (8002b74 <HAL_ADC_Start+0x180>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d015      	beq.n	8002b10 <HAL_ADC_Start+0x11c>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a23      	ldr	r2, [pc, #140]	; (8002b78 <HAL_ADC_Start+0x184>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d105      	bne.n	8002afa <HAL_ADC_Start+0x106>
 8002aee:	4b20      	ldr	r3, [pc, #128]	; (8002b70 <HAL_ADC_Start+0x17c>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f003 031f 	and.w	r3, r3, #31
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00a      	beq.n	8002b10 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a1f      	ldr	r2, [pc, #124]	; (8002b7c <HAL_ADC_Start+0x188>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d129      	bne.n	8002b58 <HAL_ADC_Start+0x164>
 8002b04:	4b1a      	ldr	r3, [pc, #104]	; (8002b70 <HAL_ADC_Start+0x17c>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f003 031f 	and.w	r3, r3, #31
 8002b0c:	2b0f      	cmp	r3, #15
 8002b0e:	d823      	bhi.n	8002b58 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d11c      	bne.n	8002b58 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b2c:	609a      	str	r2, [r3, #8]
 8002b2e:	e013      	b.n	8002b58 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a0f      	ldr	r2, [pc, #60]	; (8002b74 <HAL_ADC_Start+0x180>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d10e      	bne.n	8002b58 <HAL_ADC_Start+0x164>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d107      	bne.n	8002b58 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689a      	ldr	r2, [r3, #8]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b56:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3714      	adds	r7, #20
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	2000002c 	.word	0x2000002c
 8002b6c:	431bde83 	.word	0x431bde83
 8002b70:	40012300 	.word	0x40012300
 8002b74:	40012000 	.word	0x40012000
 8002b78:	40012100 	.word	0x40012100
 8002b7c:	40012200 	.word	0x40012200

08002b80 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b9c:	d113      	bne.n	8002bc6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002ba8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bac:	d10b      	bne.n	8002bc6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	f043 0220 	orr.w	r2, r3, #32
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e05c      	b.n	8002c80 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002bc6:	f7ff fea3 	bl	8002910 <HAL_GetTick>
 8002bca:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002bcc:	e01a      	b.n	8002c04 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd4:	d016      	beq.n	8002c04 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d007      	beq.n	8002bec <HAL_ADC_PollForConversion+0x6c>
 8002bdc:	f7ff fe98 	bl	8002910 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d20b      	bcs.n	8002c04 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf0:	f043 0204 	orr.w	r2, r3, #4
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e03d      	b.n	8002c80 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d1dd      	bne.n	8002bce <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f06f 0212 	mvn.w	r2, #18
 8002c1a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d123      	bne.n	8002c7e <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d11f      	bne.n	8002c7e <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c44:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d006      	beq.n	8002c5a <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d111      	bne.n	8002c7e <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d105      	bne.n	8002c7e <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	f043 0201 	orr.w	r2, r3, #1
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
	...

08002ca4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d101      	bne.n	8002cc0 <HAL_ADC_ConfigChannel+0x1c>
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	e105      	b.n	8002ecc <HAL_ADC_ConfigChannel+0x228>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2b09      	cmp	r3, #9
 8002cce:	d925      	bls.n	8002d1c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68d9      	ldr	r1, [r3, #12]
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	461a      	mov	r2, r3
 8002cde:	4613      	mov	r3, r2
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	4413      	add	r3, r2
 8002ce4:	3b1e      	subs	r3, #30
 8002ce6:	2207      	movs	r2, #7
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	43da      	mvns	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	400a      	ands	r2, r1
 8002cf4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68d9      	ldr	r1, [r3, #12]
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	4618      	mov	r0, r3
 8002d08:	4603      	mov	r3, r0
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	4403      	add	r3, r0
 8002d0e:	3b1e      	subs	r3, #30
 8002d10:	409a      	lsls	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	430a      	orrs	r2, r1
 8002d18:	60da      	str	r2, [r3, #12]
 8002d1a:	e022      	b.n	8002d62 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6919      	ldr	r1, [r3, #16]
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	461a      	mov	r2, r3
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	4413      	add	r3, r2
 8002d30:	2207      	movs	r2, #7
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	43da      	mvns	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	400a      	ands	r2, r1
 8002d3e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6919      	ldr	r1, [r3, #16]
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	689a      	ldr	r2, [r3, #8]
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	4618      	mov	r0, r3
 8002d52:	4603      	mov	r3, r0
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	4403      	add	r3, r0
 8002d58:	409a      	lsls	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	2b06      	cmp	r3, #6
 8002d68:	d824      	bhi.n	8002db4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685a      	ldr	r2, [r3, #4]
 8002d74:	4613      	mov	r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4413      	add	r3, r2
 8002d7a:	3b05      	subs	r3, #5
 8002d7c:	221f      	movs	r2, #31
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	43da      	mvns	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	400a      	ands	r2, r1
 8002d8a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	4618      	mov	r0, r3
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	4413      	add	r3, r2
 8002da4:	3b05      	subs	r3, #5
 8002da6:	fa00 f203 	lsl.w	r2, r0, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	635a      	str	r2, [r3, #52]	; 0x34
 8002db2:	e04c      	b.n	8002e4e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	2b0c      	cmp	r3, #12
 8002dba:	d824      	bhi.n	8002e06 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685a      	ldr	r2, [r3, #4]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4413      	add	r3, r2
 8002dcc:	3b23      	subs	r3, #35	; 0x23
 8002dce:	221f      	movs	r2, #31
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	43da      	mvns	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	400a      	ands	r2, r1
 8002ddc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	4618      	mov	r0, r3
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	4613      	mov	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	3b23      	subs	r3, #35	; 0x23
 8002df8:	fa00 f203 	lsl.w	r2, r0, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	430a      	orrs	r2, r1
 8002e02:	631a      	str	r2, [r3, #48]	; 0x30
 8002e04:	e023      	b.n	8002e4e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685a      	ldr	r2, [r3, #4]
 8002e10:	4613      	mov	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4413      	add	r3, r2
 8002e16:	3b41      	subs	r3, #65	; 0x41
 8002e18:	221f      	movs	r2, #31
 8002e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1e:	43da      	mvns	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	400a      	ands	r2, r1
 8002e26:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	4618      	mov	r0, r3
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	3b41      	subs	r3, #65	; 0x41
 8002e42:	fa00 f203 	lsl.w	r2, r0, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e4e:	4b22      	ldr	r3, [pc, #136]	; (8002ed8 <HAL_ADC_ConfigChannel+0x234>)
 8002e50:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a21      	ldr	r2, [pc, #132]	; (8002edc <HAL_ADC_ConfigChannel+0x238>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d109      	bne.n	8002e70 <HAL_ADC_ConfigChannel+0x1cc>
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2b12      	cmp	r3, #18
 8002e62:	d105      	bne.n	8002e70 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a19      	ldr	r2, [pc, #100]	; (8002edc <HAL_ADC_ConfigChannel+0x238>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d123      	bne.n	8002ec2 <HAL_ADC_ConfigChannel+0x21e>
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2b10      	cmp	r3, #16
 8002e80:	d003      	beq.n	8002e8a <HAL_ADC_ConfigChannel+0x1e6>
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2b11      	cmp	r3, #17
 8002e88:	d11b      	bne.n	8002ec2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2b10      	cmp	r3, #16
 8002e9c:	d111      	bne.n	8002ec2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e9e:	4b10      	ldr	r3, [pc, #64]	; (8002ee0 <HAL_ADC_ConfigChannel+0x23c>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a10      	ldr	r2, [pc, #64]	; (8002ee4 <HAL_ADC_ConfigChannel+0x240>)
 8002ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea8:	0c9a      	lsrs	r2, r3, #18
 8002eaa:	4613      	mov	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	4413      	add	r3, r2
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002eb4:	e002      	b.n	8002ebc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1f9      	bne.n	8002eb6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	40012300 	.word	0x40012300
 8002edc:	40012000 	.word	0x40012000
 8002ee0:	2000002c 	.word	0x2000002c
 8002ee4:	431bde83 	.word	0x431bde83

08002ee8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ef0:	4b79      	ldr	r3, [pc, #484]	; (80030d8 <ADC_Init+0x1f0>)
 8002ef2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	431a      	orrs	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6859      	ldr	r1, [r3, #4]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	021a      	lsls	r2, r3, #8
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	685a      	ldr	r2, [r3, #4]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002f40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	6859      	ldr	r1, [r3, #4]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	430a      	orrs	r2, r1
 8002f52:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689a      	ldr	r2, [r3, #8]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6899      	ldr	r1, [r3, #8]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68da      	ldr	r2, [r3, #12]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7a:	4a58      	ldr	r2, [pc, #352]	; (80030dc <ADC_Init+0x1f4>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d022      	beq.n	8002fc6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689a      	ldr	r2, [r3, #8]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f8e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6899      	ldr	r1, [r3, #8]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002fb0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	6899      	ldr	r1, [r3, #8]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	609a      	str	r2, [r3, #8]
 8002fc4:	e00f      	b.n	8002fe6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	689a      	ldr	r2, [r3, #8]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fd4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002fe4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 0202 	bic.w	r2, r2, #2
 8002ff4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	6899      	ldr	r1, [r3, #8]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	7e1b      	ldrb	r3, [r3, #24]
 8003000:	005a      	lsls	r2, r3, #1
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	430a      	orrs	r2, r1
 8003008:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d01b      	beq.n	800304c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	685a      	ldr	r2, [r3, #4]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003022:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	685a      	ldr	r2, [r3, #4]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003032:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6859      	ldr	r1, [r3, #4]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303e:	3b01      	subs	r3, #1
 8003040:	035a      	lsls	r2, r3, #13
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	430a      	orrs	r2, r1
 8003048:	605a      	str	r2, [r3, #4]
 800304a:	e007      	b.n	800305c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800305a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800306a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	3b01      	subs	r3, #1
 8003078:	051a      	lsls	r2, r3, #20
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	430a      	orrs	r2, r1
 8003080:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	689a      	ldr	r2, [r3, #8]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003090:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6899      	ldr	r1, [r3, #8]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800309e:	025a      	lsls	r2, r3, #9
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	430a      	orrs	r2, r1
 80030a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689a      	ldr	r2, [r3, #8]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6899      	ldr	r1, [r3, #8]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	029a      	lsls	r2, r3, #10
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	430a      	orrs	r2, r1
 80030ca:	609a      	str	r2, [r3, #8]
}
 80030cc:	bf00      	nop
 80030ce:	3714      	adds	r7, #20
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr
 80030d8:	40012300 	.word	0x40012300
 80030dc:	0f000001 	.word	0x0f000001

080030e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030f0:	4b0c      	ldr	r3, [pc, #48]	; (8003124 <__NVIC_SetPriorityGrouping+0x44>)
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030fc:	4013      	ands	r3, r2
 80030fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003108:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800310c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003110:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003112:	4a04      	ldr	r2, [pc, #16]	; (8003124 <__NVIC_SetPriorityGrouping+0x44>)
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	60d3      	str	r3, [r2, #12]
}
 8003118:	bf00      	nop
 800311a:	3714      	adds	r7, #20
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr
 8003124:	e000ed00 	.word	0xe000ed00

08003128 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800312c:	4b04      	ldr	r3, [pc, #16]	; (8003140 <__NVIC_GetPriorityGrouping+0x18>)
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	0a1b      	lsrs	r3, r3, #8
 8003132:	f003 0307 	and.w	r3, r3, #7
}
 8003136:	4618      	mov	r0, r3
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr
 8003140:	e000ed00 	.word	0xe000ed00

08003144 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	4603      	mov	r3, r0
 800314c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800314e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003152:	2b00      	cmp	r3, #0
 8003154:	db0b      	blt.n	800316e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003156:	79fb      	ldrb	r3, [r7, #7]
 8003158:	f003 021f 	and.w	r2, r3, #31
 800315c:	4907      	ldr	r1, [pc, #28]	; (800317c <__NVIC_EnableIRQ+0x38>)
 800315e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003162:	095b      	lsrs	r3, r3, #5
 8003164:	2001      	movs	r0, #1
 8003166:	fa00 f202 	lsl.w	r2, r0, r2
 800316a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800316e:	bf00      	nop
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	e000e100 	.word	0xe000e100

08003180 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	4603      	mov	r3, r0
 8003188:	6039      	str	r1, [r7, #0]
 800318a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800318c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003190:	2b00      	cmp	r3, #0
 8003192:	db0a      	blt.n	80031aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	b2da      	uxtb	r2, r3
 8003198:	490c      	ldr	r1, [pc, #48]	; (80031cc <__NVIC_SetPriority+0x4c>)
 800319a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319e:	0112      	lsls	r2, r2, #4
 80031a0:	b2d2      	uxtb	r2, r2
 80031a2:	440b      	add	r3, r1
 80031a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031a8:	e00a      	b.n	80031c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	4908      	ldr	r1, [pc, #32]	; (80031d0 <__NVIC_SetPriority+0x50>)
 80031b0:	79fb      	ldrb	r3, [r7, #7]
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	3b04      	subs	r3, #4
 80031b8:	0112      	lsls	r2, r2, #4
 80031ba:	b2d2      	uxtb	r2, r2
 80031bc:	440b      	add	r3, r1
 80031be:	761a      	strb	r2, [r3, #24]
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	e000e100 	.word	0xe000e100
 80031d0:	e000ed00 	.word	0xe000ed00

080031d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b089      	sub	sp, #36	; 0x24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f003 0307 	and.w	r3, r3, #7
 80031e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	f1c3 0307 	rsb	r3, r3, #7
 80031ee:	2b04      	cmp	r3, #4
 80031f0:	bf28      	it	cs
 80031f2:	2304      	movcs	r3, #4
 80031f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	3304      	adds	r3, #4
 80031fa:	2b06      	cmp	r3, #6
 80031fc:	d902      	bls.n	8003204 <NVIC_EncodePriority+0x30>
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	3b03      	subs	r3, #3
 8003202:	e000      	b.n	8003206 <NVIC_EncodePriority+0x32>
 8003204:	2300      	movs	r3, #0
 8003206:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003208:	f04f 32ff 	mov.w	r2, #4294967295
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	43da      	mvns	r2, r3
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	401a      	ands	r2, r3
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800321c:	f04f 31ff 	mov.w	r1, #4294967295
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	fa01 f303 	lsl.w	r3, r1, r3
 8003226:	43d9      	mvns	r1, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800322c:	4313      	orrs	r3, r2
         );
}
 800322e:	4618      	mov	r0, r3
 8003230:	3724      	adds	r7, #36	; 0x24
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
	...

0800323c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	3b01      	subs	r3, #1
 8003248:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800324c:	d301      	bcc.n	8003252 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800324e:	2301      	movs	r3, #1
 8003250:	e00f      	b.n	8003272 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003252:	4a0a      	ldr	r2, [pc, #40]	; (800327c <SysTick_Config+0x40>)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	3b01      	subs	r3, #1
 8003258:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800325a:	210f      	movs	r1, #15
 800325c:	f04f 30ff 	mov.w	r0, #4294967295
 8003260:	f7ff ff8e 	bl	8003180 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003264:	4b05      	ldr	r3, [pc, #20]	; (800327c <SysTick_Config+0x40>)
 8003266:	2200      	movs	r2, #0
 8003268:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800326a:	4b04      	ldr	r3, [pc, #16]	; (800327c <SysTick_Config+0x40>)
 800326c:	2207      	movs	r2, #7
 800326e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	e000e010 	.word	0xe000e010

08003280 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f7ff ff29 	bl	80030e0 <__NVIC_SetPriorityGrouping>
}
 800328e:	bf00      	nop
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003296:	b580      	push	{r7, lr}
 8003298:	b086      	sub	sp, #24
 800329a:	af00      	add	r7, sp, #0
 800329c:	4603      	mov	r3, r0
 800329e:	60b9      	str	r1, [r7, #8]
 80032a0:	607a      	str	r2, [r7, #4]
 80032a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032a4:	2300      	movs	r3, #0
 80032a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032a8:	f7ff ff3e 	bl	8003128 <__NVIC_GetPriorityGrouping>
 80032ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	68b9      	ldr	r1, [r7, #8]
 80032b2:	6978      	ldr	r0, [r7, #20]
 80032b4:	f7ff ff8e 	bl	80031d4 <NVIC_EncodePriority>
 80032b8:	4602      	mov	r2, r0
 80032ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032be:	4611      	mov	r1, r2
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff ff5d 	bl	8003180 <__NVIC_SetPriority>
}
 80032c6:	bf00      	nop
 80032c8:	3718      	adds	r7, #24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b082      	sub	sp, #8
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	4603      	mov	r3, r0
 80032d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff ff31 	bl	8003144 <__NVIC_EnableIRQ>
}
 80032e2:	bf00      	nop
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b082      	sub	sp, #8
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f7ff ffa2 	bl	800323c <SysTick_Config>
 80032f8:	4603      	mov	r3, r0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
	...

08003304 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003304:	b480      	push	{r7}
 8003306:	b089      	sub	sp, #36	; 0x24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800330e:	2300      	movs	r3, #0
 8003310:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003312:	2300      	movs	r3, #0
 8003314:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003316:	2300      	movs	r3, #0
 8003318:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800331a:	2300      	movs	r3, #0
 800331c:	61fb      	str	r3, [r7, #28]
 800331e:	e16b      	b.n	80035f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003320:	2201      	movs	r2, #1
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	4013      	ands	r3, r2
 8003332:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	429a      	cmp	r2, r3
 800333a:	f040 815a 	bne.w	80035f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d00b      	beq.n	800335e <HAL_GPIO_Init+0x5a>
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	2b02      	cmp	r3, #2
 800334c:	d007      	beq.n	800335e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003352:	2b11      	cmp	r3, #17
 8003354:	d003      	beq.n	800335e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	2b12      	cmp	r3, #18
 800335c:	d130      	bne.n	80033c0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	2203      	movs	r2, #3
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	43db      	mvns	r3, r3
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	4013      	ands	r3, r2
 8003374:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	68da      	ldr	r2, [r3, #12]
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	fa02 f303 	lsl.w	r3, r2, r3
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	4313      	orrs	r3, r2
 8003386:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003394:	2201      	movs	r2, #1
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	43db      	mvns	r3, r3
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	4013      	ands	r3, r2
 80033a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	091b      	lsrs	r3, r3, #4
 80033aa:	f003 0201 	and.w	r2, r3, #1
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	2203      	movs	r2, #3
 80033cc:	fa02 f303 	lsl.w	r3, r2, r3
 80033d0:	43db      	mvns	r3, r3
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	4013      	ands	r3, r2
 80033d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	689a      	ldr	r2, [r3, #8]
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d003      	beq.n	8003400 <HAL_GPIO_Init+0xfc>
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	2b12      	cmp	r3, #18
 80033fe:	d123      	bne.n	8003448 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	08da      	lsrs	r2, r3, #3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	3208      	adds	r2, #8
 8003408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800340c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	220f      	movs	r2, #15
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	43db      	mvns	r3, r3
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	4013      	ands	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	691a      	ldr	r2, [r3, #16]
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	f003 0307 	and.w	r3, r3, #7
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	4313      	orrs	r3, r2
 8003438:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	08da      	lsrs	r2, r3, #3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	3208      	adds	r2, #8
 8003442:	69b9      	ldr	r1, [r7, #24]
 8003444:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	2203      	movs	r2, #3
 8003454:	fa02 f303 	lsl.w	r3, r2, r3
 8003458:	43db      	mvns	r3, r3
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	4013      	ands	r3, r2
 800345e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f003 0203 	and.w	r2, r3, #3
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	fa02 f303 	lsl.w	r3, r2, r3
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	4313      	orrs	r3, r2
 8003474:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 80b4 	beq.w	80035f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800348a:	2300      	movs	r3, #0
 800348c:	60fb      	str	r3, [r7, #12]
 800348e:	4b5f      	ldr	r3, [pc, #380]	; (800360c <HAL_GPIO_Init+0x308>)
 8003490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003492:	4a5e      	ldr	r2, [pc, #376]	; (800360c <HAL_GPIO_Init+0x308>)
 8003494:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003498:	6453      	str	r3, [r2, #68]	; 0x44
 800349a:	4b5c      	ldr	r3, [pc, #368]	; (800360c <HAL_GPIO_Init+0x308>)
 800349c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034a2:	60fb      	str	r3, [r7, #12]
 80034a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034a6:	4a5a      	ldr	r2, [pc, #360]	; (8003610 <HAL_GPIO_Init+0x30c>)
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	089b      	lsrs	r3, r3, #2
 80034ac:	3302      	adds	r3, #2
 80034ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	f003 0303 	and.w	r3, r3, #3
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	220f      	movs	r2, #15
 80034be:	fa02 f303 	lsl.w	r3, r2, r3
 80034c2:	43db      	mvns	r3, r3
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	4013      	ands	r3, r2
 80034c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a51      	ldr	r2, [pc, #324]	; (8003614 <HAL_GPIO_Init+0x310>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d02b      	beq.n	800352a <HAL_GPIO_Init+0x226>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a50      	ldr	r2, [pc, #320]	; (8003618 <HAL_GPIO_Init+0x314>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d025      	beq.n	8003526 <HAL_GPIO_Init+0x222>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a4f      	ldr	r2, [pc, #316]	; (800361c <HAL_GPIO_Init+0x318>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d01f      	beq.n	8003522 <HAL_GPIO_Init+0x21e>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a4e      	ldr	r2, [pc, #312]	; (8003620 <HAL_GPIO_Init+0x31c>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d019      	beq.n	800351e <HAL_GPIO_Init+0x21a>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a4d      	ldr	r2, [pc, #308]	; (8003624 <HAL_GPIO_Init+0x320>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d013      	beq.n	800351a <HAL_GPIO_Init+0x216>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a4c      	ldr	r2, [pc, #304]	; (8003628 <HAL_GPIO_Init+0x324>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d00d      	beq.n	8003516 <HAL_GPIO_Init+0x212>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a4b      	ldr	r2, [pc, #300]	; (800362c <HAL_GPIO_Init+0x328>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d007      	beq.n	8003512 <HAL_GPIO_Init+0x20e>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a4a      	ldr	r2, [pc, #296]	; (8003630 <HAL_GPIO_Init+0x32c>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d101      	bne.n	800350e <HAL_GPIO_Init+0x20a>
 800350a:	2307      	movs	r3, #7
 800350c:	e00e      	b.n	800352c <HAL_GPIO_Init+0x228>
 800350e:	2308      	movs	r3, #8
 8003510:	e00c      	b.n	800352c <HAL_GPIO_Init+0x228>
 8003512:	2306      	movs	r3, #6
 8003514:	e00a      	b.n	800352c <HAL_GPIO_Init+0x228>
 8003516:	2305      	movs	r3, #5
 8003518:	e008      	b.n	800352c <HAL_GPIO_Init+0x228>
 800351a:	2304      	movs	r3, #4
 800351c:	e006      	b.n	800352c <HAL_GPIO_Init+0x228>
 800351e:	2303      	movs	r3, #3
 8003520:	e004      	b.n	800352c <HAL_GPIO_Init+0x228>
 8003522:	2302      	movs	r3, #2
 8003524:	e002      	b.n	800352c <HAL_GPIO_Init+0x228>
 8003526:	2301      	movs	r3, #1
 8003528:	e000      	b.n	800352c <HAL_GPIO_Init+0x228>
 800352a:	2300      	movs	r3, #0
 800352c:	69fa      	ldr	r2, [r7, #28]
 800352e:	f002 0203 	and.w	r2, r2, #3
 8003532:	0092      	lsls	r2, r2, #2
 8003534:	4093      	lsls	r3, r2
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	4313      	orrs	r3, r2
 800353a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800353c:	4934      	ldr	r1, [pc, #208]	; (8003610 <HAL_GPIO_Init+0x30c>)
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	089b      	lsrs	r3, r3, #2
 8003542:	3302      	adds	r3, #2
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800354a:	4b3a      	ldr	r3, [pc, #232]	; (8003634 <HAL_GPIO_Init+0x330>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	43db      	mvns	r3, r3
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	4013      	ands	r3, r2
 8003558:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	4313      	orrs	r3, r2
 800356c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800356e:	4a31      	ldr	r2, [pc, #196]	; (8003634 <HAL_GPIO_Init+0x330>)
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003574:	4b2f      	ldr	r3, [pc, #188]	; (8003634 <HAL_GPIO_Init+0x330>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	43db      	mvns	r3, r3
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	4013      	ands	r3, r2
 8003582:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d003      	beq.n	8003598 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	4313      	orrs	r3, r2
 8003596:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003598:	4a26      	ldr	r2, [pc, #152]	; (8003634 <HAL_GPIO_Init+0x330>)
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800359e:	4b25      	ldr	r3, [pc, #148]	; (8003634 <HAL_GPIO_Init+0x330>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	43db      	mvns	r3, r3
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	4013      	ands	r3, r2
 80035ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	4313      	orrs	r3, r2
 80035c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035c2:	4a1c      	ldr	r2, [pc, #112]	; (8003634 <HAL_GPIO_Init+0x330>)
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035c8:	4b1a      	ldr	r3, [pc, #104]	; (8003634 <HAL_GPIO_Init+0x330>)
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	43db      	mvns	r3, r3
 80035d2:	69ba      	ldr	r2, [r7, #24]
 80035d4:	4013      	ands	r3, r2
 80035d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d003      	beq.n	80035ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035ec:	4a11      	ldr	r2, [pc, #68]	; (8003634 <HAL_GPIO_Init+0x330>)
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	3301      	adds	r3, #1
 80035f6:	61fb      	str	r3, [r7, #28]
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	2b0f      	cmp	r3, #15
 80035fc:	f67f ae90 	bls.w	8003320 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003600:	bf00      	nop
 8003602:	3724      	adds	r7, #36	; 0x24
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr
 800360c:	40023800 	.word	0x40023800
 8003610:	40013800 	.word	0x40013800
 8003614:	40020000 	.word	0x40020000
 8003618:	40020400 	.word	0x40020400
 800361c:	40020800 	.word	0x40020800
 8003620:	40020c00 	.word	0x40020c00
 8003624:	40021000 	.word	0x40021000
 8003628:	40021400 	.word	0x40021400
 800362c:	40021800 	.word	0x40021800
 8003630:	40021c00 	.word	0x40021c00
 8003634:	40013c00 	.word	0x40013c00

08003638 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	460b      	mov	r3, r1
 8003642:	807b      	strh	r3, [r7, #2]
 8003644:	4613      	mov	r3, r2
 8003646:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003648:	787b      	ldrb	r3, [r7, #1]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800364e:	887a      	ldrh	r2, [r7, #2]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003654:	e003      	b.n	800365e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003656:	887b      	ldrh	r3, [r7, #2]
 8003658:	041a      	lsls	r2, r3, #16
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	619a      	str	r2, [r3, #24]
}
 800365e:	bf00      	nop
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
	...

0800366c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e25b      	b.n	8003b36 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b00      	cmp	r3, #0
 8003688:	d075      	beq.n	8003776 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800368a:	4ba3      	ldr	r3, [pc, #652]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f003 030c 	and.w	r3, r3, #12
 8003692:	2b04      	cmp	r3, #4
 8003694:	d00c      	beq.n	80036b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003696:	4ba0      	ldr	r3, [pc, #640]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800369e:	2b08      	cmp	r3, #8
 80036a0:	d112      	bne.n	80036c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036a2:	4b9d      	ldr	r3, [pc, #628]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036ae:	d10b      	bne.n	80036c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036b0:	4b99      	ldr	r3, [pc, #612]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d05b      	beq.n	8003774 <HAL_RCC_OscConfig+0x108>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d157      	bne.n	8003774 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e236      	b.n	8003b36 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d0:	d106      	bne.n	80036e0 <HAL_RCC_OscConfig+0x74>
 80036d2:	4b91      	ldr	r3, [pc, #580]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a90      	ldr	r2, [pc, #576]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 80036d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036dc:	6013      	str	r3, [r2, #0]
 80036de:	e01d      	b.n	800371c <HAL_RCC_OscConfig+0xb0>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036e8:	d10c      	bne.n	8003704 <HAL_RCC_OscConfig+0x98>
 80036ea:	4b8b      	ldr	r3, [pc, #556]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a8a      	ldr	r2, [pc, #552]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 80036f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036f4:	6013      	str	r3, [r2, #0]
 80036f6:	4b88      	ldr	r3, [pc, #544]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a87      	ldr	r2, [pc, #540]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 80036fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003700:	6013      	str	r3, [r2, #0]
 8003702:	e00b      	b.n	800371c <HAL_RCC_OscConfig+0xb0>
 8003704:	4b84      	ldr	r3, [pc, #528]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a83      	ldr	r2, [pc, #524]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 800370a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800370e:	6013      	str	r3, [r2, #0]
 8003710:	4b81      	ldr	r3, [pc, #516]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a80      	ldr	r2, [pc, #512]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 8003716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800371a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d013      	beq.n	800374c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003724:	f7ff f8f4 	bl	8002910 <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800372c:	f7ff f8f0 	bl	8002910 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b64      	cmp	r3, #100	; 0x64
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e1fb      	b.n	8003b36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800373e:	4b76      	ldr	r3, [pc, #472]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d0f0      	beq.n	800372c <HAL_RCC_OscConfig+0xc0>
 800374a:	e014      	b.n	8003776 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800374c:	f7ff f8e0 	bl	8002910 <HAL_GetTick>
 8003750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003752:	e008      	b.n	8003766 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003754:	f7ff f8dc 	bl	8002910 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b64      	cmp	r3, #100	; 0x64
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e1e7      	b.n	8003b36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003766:	4b6c      	ldr	r3, [pc, #432]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1f0      	bne.n	8003754 <HAL_RCC_OscConfig+0xe8>
 8003772:	e000      	b.n	8003776 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003774:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d063      	beq.n	800384a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003782:	4b65      	ldr	r3, [pc, #404]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f003 030c 	and.w	r3, r3, #12
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00b      	beq.n	80037a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800378e:	4b62      	ldr	r3, [pc, #392]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003796:	2b08      	cmp	r3, #8
 8003798:	d11c      	bne.n	80037d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800379a:	4b5f      	ldr	r3, [pc, #380]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d116      	bne.n	80037d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037a6:	4b5c      	ldr	r3, [pc, #368]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d005      	beq.n	80037be <HAL_RCC_OscConfig+0x152>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d001      	beq.n	80037be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e1bb      	b.n	8003b36 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037be:	4b56      	ldr	r3, [pc, #344]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	4952      	ldr	r1, [pc, #328]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037d2:	e03a      	b.n	800384a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d020      	beq.n	800381e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037dc:	4b4f      	ldr	r3, [pc, #316]	; (800391c <HAL_RCC_OscConfig+0x2b0>)
 80037de:	2201      	movs	r2, #1
 80037e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e2:	f7ff f895 	bl	8002910 <HAL_GetTick>
 80037e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e8:	e008      	b.n	80037fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037ea:	f7ff f891 	bl	8002910 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d901      	bls.n	80037fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e19c      	b.n	8003b36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037fc:	4b46      	ldr	r3, [pc, #280]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b00      	cmp	r3, #0
 8003806:	d0f0      	beq.n	80037ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003808:	4b43      	ldr	r3, [pc, #268]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	00db      	lsls	r3, r3, #3
 8003816:	4940      	ldr	r1, [pc, #256]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 8003818:	4313      	orrs	r3, r2
 800381a:	600b      	str	r3, [r1, #0]
 800381c:	e015      	b.n	800384a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800381e:	4b3f      	ldr	r3, [pc, #252]	; (800391c <HAL_RCC_OscConfig+0x2b0>)
 8003820:	2200      	movs	r2, #0
 8003822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003824:	f7ff f874 	bl	8002910 <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800382a:	e008      	b.n	800383e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800382c:	f7ff f870 	bl	8002910 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b02      	cmp	r3, #2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e17b      	b.n	8003b36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800383e:	4b36      	ldr	r3, [pc, #216]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1f0      	bne.n	800382c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0308 	and.w	r3, r3, #8
 8003852:	2b00      	cmp	r3, #0
 8003854:	d030      	beq.n	80038b8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d016      	beq.n	800388c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800385e:	4b30      	ldr	r3, [pc, #192]	; (8003920 <HAL_RCC_OscConfig+0x2b4>)
 8003860:	2201      	movs	r2, #1
 8003862:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003864:	f7ff f854 	bl	8002910 <HAL_GetTick>
 8003868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800386a:	e008      	b.n	800387e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800386c:	f7ff f850 	bl	8002910 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b02      	cmp	r3, #2
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e15b      	b.n	8003b36 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800387e:	4b26      	ldr	r3, [pc, #152]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 8003880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d0f0      	beq.n	800386c <HAL_RCC_OscConfig+0x200>
 800388a:	e015      	b.n	80038b8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800388c:	4b24      	ldr	r3, [pc, #144]	; (8003920 <HAL_RCC_OscConfig+0x2b4>)
 800388e:	2200      	movs	r2, #0
 8003890:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003892:	f7ff f83d 	bl	8002910 <HAL_GetTick>
 8003896:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003898:	e008      	b.n	80038ac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800389a:	f7ff f839 	bl	8002910 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d901      	bls.n	80038ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e144      	b.n	8003b36 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038ac:	4b1a      	ldr	r3, [pc, #104]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 80038ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1f0      	bne.n	800389a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f000 80a0 	beq.w	8003a06 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038c6:	2300      	movs	r3, #0
 80038c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038ca:	4b13      	ldr	r3, [pc, #76]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d10f      	bne.n	80038f6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038d6:	2300      	movs	r3, #0
 80038d8:	60bb      	str	r3, [r7, #8]
 80038da:	4b0f      	ldr	r3, [pc, #60]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	4a0e      	ldr	r2, [pc, #56]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 80038e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038e4:	6413      	str	r3, [r2, #64]	; 0x40
 80038e6:	4b0c      	ldr	r3, [pc, #48]	; (8003918 <HAL_RCC_OscConfig+0x2ac>)
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ee:	60bb      	str	r3, [r7, #8]
 80038f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038f2:	2301      	movs	r3, #1
 80038f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f6:	4b0b      	ldr	r3, [pc, #44]	; (8003924 <HAL_RCC_OscConfig+0x2b8>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d121      	bne.n	8003946 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003902:	4b08      	ldr	r3, [pc, #32]	; (8003924 <HAL_RCC_OscConfig+0x2b8>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a07      	ldr	r2, [pc, #28]	; (8003924 <HAL_RCC_OscConfig+0x2b8>)
 8003908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800390c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800390e:	f7fe ffff 	bl	8002910 <HAL_GetTick>
 8003912:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003914:	e011      	b.n	800393a <HAL_RCC_OscConfig+0x2ce>
 8003916:	bf00      	nop
 8003918:	40023800 	.word	0x40023800
 800391c:	42470000 	.word	0x42470000
 8003920:	42470e80 	.word	0x42470e80
 8003924:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003928:	f7fe fff2 	bl	8002910 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e0fd      	b.n	8003b36 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800393a:	4b81      	ldr	r3, [pc, #516]	; (8003b40 <HAL_RCC_OscConfig+0x4d4>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003942:	2b00      	cmp	r3, #0
 8003944:	d0f0      	beq.n	8003928 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d106      	bne.n	800395c <HAL_RCC_OscConfig+0x2f0>
 800394e:	4b7d      	ldr	r3, [pc, #500]	; (8003b44 <HAL_RCC_OscConfig+0x4d8>)
 8003950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003952:	4a7c      	ldr	r2, [pc, #496]	; (8003b44 <HAL_RCC_OscConfig+0x4d8>)
 8003954:	f043 0301 	orr.w	r3, r3, #1
 8003958:	6713      	str	r3, [r2, #112]	; 0x70
 800395a:	e01c      	b.n	8003996 <HAL_RCC_OscConfig+0x32a>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	2b05      	cmp	r3, #5
 8003962:	d10c      	bne.n	800397e <HAL_RCC_OscConfig+0x312>
 8003964:	4b77      	ldr	r3, [pc, #476]	; (8003b44 <HAL_RCC_OscConfig+0x4d8>)
 8003966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003968:	4a76      	ldr	r2, [pc, #472]	; (8003b44 <HAL_RCC_OscConfig+0x4d8>)
 800396a:	f043 0304 	orr.w	r3, r3, #4
 800396e:	6713      	str	r3, [r2, #112]	; 0x70
 8003970:	4b74      	ldr	r3, [pc, #464]	; (8003b44 <HAL_RCC_OscConfig+0x4d8>)
 8003972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003974:	4a73      	ldr	r2, [pc, #460]	; (8003b44 <HAL_RCC_OscConfig+0x4d8>)
 8003976:	f043 0301 	orr.w	r3, r3, #1
 800397a:	6713      	str	r3, [r2, #112]	; 0x70
 800397c:	e00b      	b.n	8003996 <HAL_RCC_OscConfig+0x32a>
 800397e:	4b71      	ldr	r3, [pc, #452]	; (8003b44 <HAL_RCC_OscConfig+0x4d8>)
 8003980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003982:	4a70      	ldr	r2, [pc, #448]	; (8003b44 <HAL_RCC_OscConfig+0x4d8>)
 8003984:	f023 0301 	bic.w	r3, r3, #1
 8003988:	6713      	str	r3, [r2, #112]	; 0x70
 800398a:	4b6e      	ldr	r3, [pc, #440]	; (8003b44 <HAL_RCC_OscConfig+0x4d8>)
 800398c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398e:	4a6d      	ldr	r2, [pc, #436]	; (8003b44 <HAL_RCC_OscConfig+0x4d8>)
 8003990:	f023 0304 	bic.w	r3, r3, #4
 8003994:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d015      	beq.n	80039ca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800399e:	f7fe ffb7 	bl	8002910 <HAL_GetTick>
 80039a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039a4:	e00a      	b.n	80039bc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039a6:	f7fe ffb3 	bl	8002910 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d901      	bls.n	80039bc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e0bc      	b.n	8003b36 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039bc:	4b61      	ldr	r3, [pc, #388]	; (8003b44 <HAL_RCC_OscConfig+0x4d8>)
 80039be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d0ee      	beq.n	80039a6 <HAL_RCC_OscConfig+0x33a>
 80039c8:	e014      	b.n	80039f4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ca:	f7fe ffa1 	bl	8002910 <HAL_GetTick>
 80039ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039d0:	e00a      	b.n	80039e8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039d2:	f7fe ff9d 	bl	8002910 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d901      	bls.n	80039e8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e0a6      	b.n	8003b36 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039e8:	4b56      	ldr	r3, [pc, #344]	; (8003b44 <HAL_RCC_OscConfig+0x4d8>)
 80039ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1ee      	bne.n	80039d2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039f4:	7dfb      	ldrb	r3, [r7, #23]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d105      	bne.n	8003a06 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039fa:	4b52      	ldr	r3, [pc, #328]	; (8003b44 <HAL_RCC_OscConfig+0x4d8>)
 80039fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fe:	4a51      	ldr	r2, [pc, #324]	; (8003b44 <HAL_RCC_OscConfig+0x4d8>)
 8003a00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a04:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f000 8092 	beq.w	8003b34 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a10:	4b4c      	ldr	r3, [pc, #304]	; (8003b44 <HAL_RCC_OscConfig+0x4d8>)
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f003 030c 	and.w	r3, r3, #12
 8003a18:	2b08      	cmp	r3, #8
 8003a1a:	d05c      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d141      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a24:	4b48      	ldr	r3, [pc, #288]	; (8003b48 <HAL_RCC_OscConfig+0x4dc>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a2a:	f7fe ff71 	bl	8002910 <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a30:	e008      	b.n	8003a44 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a32:	f7fe ff6d 	bl	8002910 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e078      	b.n	8003b36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a44:	4b3f      	ldr	r3, [pc, #252]	; (8003b44 <HAL_RCC_OscConfig+0x4d8>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1f0      	bne.n	8003a32 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	69da      	ldr	r2, [r3, #28]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	431a      	orrs	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5e:	019b      	lsls	r3, r3, #6
 8003a60:	431a      	orrs	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a66:	085b      	lsrs	r3, r3, #1
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	041b      	lsls	r3, r3, #16
 8003a6c:	431a      	orrs	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a72:	061b      	lsls	r3, r3, #24
 8003a74:	4933      	ldr	r1, [pc, #204]	; (8003b44 <HAL_RCC_OscConfig+0x4d8>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a7a:	4b33      	ldr	r3, [pc, #204]	; (8003b48 <HAL_RCC_OscConfig+0x4dc>)
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a80:	f7fe ff46 	bl	8002910 <HAL_GetTick>
 8003a84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a86:	e008      	b.n	8003a9a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a88:	f7fe ff42 	bl	8002910 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e04d      	b.n	8003b36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a9a:	4b2a      	ldr	r3, [pc, #168]	; (8003b44 <HAL_RCC_OscConfig+0x4d8>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d0f0      	beq.n	8003a88 <HAL_RCC_OscConfig+0x41c>
 8003aa6:	e045      	b.n	8003b34 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aa8:	4b27      	ldr	r3, [pc, #156]	; (8003b48 <HAL_RCC_OscConfig+0x4dc>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aae:	f7fe ff2f 	bl	8002910 <HAL_GetTick>
 8003ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ab4:	e008      	b.n	8003ac8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ab6:	f7fe ff2b 	bl	8002910 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d901      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e036      	b.n	8003b36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ac8:	4b1e      	ldr	r3, [pc, #120]	; (8003b44 <HAL_RCC_OscConfig+0x4d8>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1f0      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x44a>
 8003ad4:	e02e      	b.n	8003b34 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d101      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e029      	b.n	8003b36 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ae2:	4b18      	ldr	r3, [pc, #96]	; (8003b44 <HAL_RCC_OscConfig+0x4d8>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d11c      	bne.n	8003b30 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d115      	bne.n	8003b30 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d10d      	bne.n	8003b30 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d106      	bne.n	8003b30 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d001      	beq.n	8003b34 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e000      	b.n	8003b36 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3718      	adds	r7, #24
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	40007000 	.word	0x40007000
 8003b44:	40023800 	.word	0x40023800
 8003b48:	42470060 	.word	0x42470060

08003b4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d101      	bne.n	8003b60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e0cc      	b.n	8003cfa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b60:	4b68      	ldr	r3, [pc, #416]	; (8003d04 <HAL_RCC_ClockConfig+0x1b8>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 030f 	and.w	r3, r3, #15
 8003b68:	683a      	ldr	r2, [r7, #0]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d90c      	bls.n	8003b88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b6e:	4b65      	ldr	r3, [pc, #404]	; (8003d04 <HAL_RCC_ClockConfig+0x1b8>)
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	b2d2      	uxtb	r2, r2
 8003b74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b76:	4b63      	ldr	r3, [pc, #396]	; (8003d04 <HAL_RCC_ClockConfig+0x1b8>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 030f 	and.w	r3, r3, #15
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d001      	beq.n	8003b88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e0b8      	b.n	8003cfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0302 	and.w	r3, r3, #2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d020      	beq.n	8003bd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0304 	and.w	r3, r3, #4
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d005      	beq.n	8003bac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ba0:	4b59      	ldr	r3, [pc, #356]	; (8003d08 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	4a58      	ldr	r2, [pc, #352]	; (8003d08 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003baa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0308 	and.w	r3, r3, #8
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d005      	beq.n	8003bc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bb8:	4b53      	ldr	r3, [pc, #332]	; (8003d08 <HAL_RCC_ClockConfig+0x1bc>)
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	4a52      	ldr	r2, [pc, #328]	; (8003d08 <HAL_RCC_ClockConfig+0x1bc>)
 8003bbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bc4:	4b50      	ldr	r3, [pc, #320]	; (8003d08 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	494d      	ldr	r1, [pc, #308]	; (8003d08 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d044      	beq.n	8003c6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d107      	bne.n	8003bfa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bea:	4b47      	ldr	r3, [pc, #284]	; (8003d08 <HAL_RCC_ClockConfig+0x1bc>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d119      	bne.n	8003c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e07f      	b.n	8003cfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d003      	beq.n	8003c0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c06:	2b03      	cmp	r3, #3
 8003c08:	d107      	bne.n	8003c1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c0a:	4b3f      	ldr	r3, [pc, #252]	; (8003d08 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d109      	bne.n	8003c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e06f      	b.n	8003cfa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c1a:	4b3b      	ldr	r3, [pc, #236]	; (8003d08 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e067      	b.n	8003cfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c2a:	4b37      	ldr	r3, [pc, #220]	; (8003d08 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f023 0203 	bic.w	r2, r3, #3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	4934      	ldr	r1, [pc, #208]	; (8003d08 <HAL_RCC_ClockConfig+0x1bc>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c3c:	f7fe fe68 	bl	8002910 <HAL_GetTick>
 8003c40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c42:	e00a      	b.n	8003c5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c44:	f7fe fe64 	bl	8002910 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e04f      	b.n	8003cfa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c5a:	4b2b      	ldr	r3, [pc, #172]	; (8003d08 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f003 020c 	and.w	r2, r3, #12
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d1eb      	bne.n	8003c44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c6c:	4b25      	ldr	r3, [pc, #148]	; (8003d04 <HAL_RCC_ClockConfig+0x1b8>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 030f 	and.w	r3, r3, #15
 8003c74:	683a      	ldr	r2, [r7, #0]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d20c      	bcs.n	8003c94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c7a:	4b22      	ldr	r3, [pc, #136]	; (8003d04 <HAL_RCC_ClockConfig+0x1b8>)
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	b2d2      	uxtb	r2, r2
 8003c80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c82:	4b20      	ldr	r3, [pc, #128]	; (8003d04 <HAL_RCC_ClockConfig+0x1b8>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 030f 	and.w	r3, r3, #15
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d001      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e032      	b.n	8003cfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0304 	and.w	r3, r3, #4
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d008      	beq.n	8003cb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ca0:	4b19      	ldr	r3, [pc, #100]	; (8003d08 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	4916      	ldr	r1, [pc, #88]	; (8003d08 <HAL_RCC_ClockConfig+0x1bc>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0308 	and.w	r3, r3, #8
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d009      	beq.n	8003cd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cbe:	4b12      	ldr	r3, [pc, #72]	; (8003d08 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	490e      	ldr	r1, [pc, #56]	; (8003d08 <HAL_RCC_ClockConfig+0x1bc>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cd2:	f000 f821 	bl	8003d18 <HAL_RCC_GetSysClockFreq>
 8003cd6:	4601      	mov	r1, r0
 8003cd8:	4b0b      	ldr	r3, [pc, #44]	; (8003d08 <HAL_RCC_ClockConfig+0x1bc>)
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	091b      	lsrs	r3, r3, #4
 8003cde:	f003 030f 	and.w	r3, r3, #15
 8003ce2:	4a0a      	ldr	r2, [pc, #40]	; (8003d0c <HAL_RCC_ClockConfig+0x1c0>)
 8003ce4:	5cd3      	ldrb	r3, [r2, r3]
 8003ce6:	fa21 f303 	lsr.w	r3, r1, r3
 8003cea:	4a09      	ldr	r2, [pc, #36]	; (8003d10 <HAL_RCC_ClockConfig+0x1c4>)
 8003cec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003cee:	4b09      	ldr	r3, [pc, #36]	; (8003d14 <HAL_RCC_ClockConfig+0x1c8>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fe fdc8 	bl	8002888 <HAL_InitTick>

  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	40023c00 	.word	0x40023c00
 8003d08:	40023800 	.word	0x40023800
 8003d0c:	08005e18 	.word	0x08005e18
 8003d10:	2000002c 	.word	0x2000002c
 8003d14:	20000034 	.word	0x20000034

08003d18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	607b      	str	r3, [r7, #4]
 8003d22:	2300      	movs	r3, #0
 8003d24:	60fb      	str	r3, [r7, #12]
 8003d26:	2300      	movs	r3, #0
 8003d28:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d2e:	4b50      	ldr	r3, [pc, #320]	; (8003e70 <HAL_RCC_GetSysClockFreq+0x158>)
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f003 030c 	and.w	r3, r3, #12
 8003d36:	2b04      	cmp	r3, #4
 8003d38:	d007      	beq.n	8003d4a <HAL_RCC_GetSysClockFreq+0x32>
 8003d3a:	2b08      	cmp	r3, #8
 8003d3c:	d008      	beq.n	8003d50 <HAL_RCC_GetSysClockFreq+0x38>
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	f040 808d 	bne.w	8003e5e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d44:	4b4b      	ldr	r3, [pc, #300]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003d46:	60bb      	str	r3, [r7, #8]
       break;
 8003d48:	e08c      	b.n	8003e64 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d4a:	4b4b      	ldr	r3, [pc, #300]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d4c:	60bb      	str	r3, [r7, #8]
      break;
 8003d4e:	e089      	b.n	8003e64 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d50:	4b47      	ldr	r3, [pc, #284]	; (8003e70 <HAL_RCC_GetSysClockFreq+0x158>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d58:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d5a:	4b45      	ldr	r3, [pc, #276]	; (8003e70 <HAL_RCC_GetSysClockFreq+0x158>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d023      	beq.n	8003dae <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d66:	4b42      	ldr	r3, [pc, #264]	; (8003e70 <HAL_RCC_GetSysClockFreq+0x158>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	099b      	lsrs	r3, r3, #6
 8003d6c:	f04f 0400 	mov.w	r4, #0
 8003d70:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003d74:	f04f 0200 	mov.w	r2, #0
 8003d78:	ea03 0501 	and.w	r5, r3, r1
 8003d7c:	ea04 0602 	and.w	r6, r4, r2
 8003d80:	4a3d      	ldr	r2, [pc, #244]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d82:	fb02 f106 	mul.w	r1, r2, r6
 8003d86:	2200      	movs	r2, #0
 8003d88:	fb02 f205 	mul.w	r2, r2, r5
 8003d8c:	440a      	add	r2, r1
 8003d8e:	493a      	ldr	r1, [pc, #232]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d90:	fba5 0101 	umull	r0, r1, r5, r1
 8003d94:	1853      	adds	r3, r2, r1
 8003d96:	4619      	mov	r1, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f04f 0400 	mov.w	r4, #0
 8003d9e:	461a      	mov	r2, r3
 8003da0:	4623      	mov	r3, r4
 8003da2:	f7fc fa11 	bl	80001c8 <__aeabi_uldivmod>
 8003da6:	4603      	mov	r3, r0
 8003da8:	460c      	mov	r4, r1
 8003daa:	60fb      	str	r3, [r7, #12]
 8003dac:	e049      	b.n	8003e42 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dae:	4b30      	ldr	r3, [pc, #192]	; (8003e70 <HAL_RCC_GetSysClockFreq+0x158>)
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	099b      	lsrs	r3, r3, #6
 8003db4:	f04f 0400 	mov.w	r4, #0
 8003db8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003dbc:	f04f 0200 	mov.w	r2, #0
 8003dc0:	ea03 0501 	and.w	r5, r3, r1
 8003dc4:	ea04 0602 	and.w	r6, r4, r2
 8003dc8:	4629      	mov	r1, r5
 8003dca:	4632      	mov	r2, r6
 8003dcc:	f04f 0300 	mov.w	r3, #0
 8003dd0:	f04f 0400 	mov.w	r4, #0
 8003dd4:	0154      	lsls	r4, r2, #5
 8003dd6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003dda:	014b      	lsls	r3, r1, #5
 8003ddc:	4619      	mov	r1, r3
 8003dde:	4622      	mov	r2, r4
 8003de0:	1b49      	subs	r1, r1, r5
 8003de2:	eb62 0206 	sbc.w	r2, r2, r6
 8003de6:	f04f 0300 	mov.w	r3, #0
 8003dea:	f04f 0400 	mov.w	r4, #0
 8003dee:	0194      	lsls	r4, r2, #6
 8003df0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003df4:	018b      	lsls	r3, r1, #6
 8003df6:	1a5b      	subs	r3, r3, r1
 8003df8:	eb64 0402 	sbc.w	r4, r4, r2
 8003dfc:	f04f 0100 	mov.w	r1, #0
 8003e00:	f04f 0200 	mov.w	r2, #0
 8003e04:	00e2      	lsls	r2, r4, #3
 8003e06:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003e0a:	00d9      	lsls	r1, r3, #3
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	4614      	mov	r4, r2
 8003e10:	195b      	adds	r3, r3, r5
 8003e12:	eb44 0406 	adc.w	r4, r4, r6
 8003e16:	f04f 0100 	mov.w	r1, #0
 8003e1a:	f04f 0200 	mov.w	r2, #0
 8003e1e:	02a2      	lsls	r2, r4, #10
 8003e20:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003e24:	0299      	lsls	r1, r3, #10
 8003e26:	460b      	mov	r3, r1
 8003e28:	4614      	mov	r4, r2
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	4621      	mov	r1, r4
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f04f 0400 	mov.w	r4, #0
 8003e34:	461a      	mov	r2, r3
 8003e36:	4623      	mov	r3, r4
 8003e38:	f7fc f9c6 	bl	80001c8 <__aeabi_uldivmod>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	460c      	mov	r4, r1
 8003e40:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e42:	4b0b      	ldr	r3, [pc, #44]	; (8003e70 <HAL_RCC_GetSysClockFreq+0x158>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	0c1b      	lsrs	r3, r3, #16
 8003e48:	f003 0303 	and.w	r3, r3, #3
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	005b      	lsls	r3, r3, #1
 8003e50:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e5a:	60bb      	str	r3, [r7, #8]
      break;
 8003e5c:	e002      	b.n	8003e64 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e5e:	4b05      	ldr	r3, [pc, #20]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003e60:	60bb      	str	r3, [r7, #8]
      break;
 8003e62:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e64:	68bb      	ldr	r3, [r7, #8]
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3714      	adds	r7, #20
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	40023800 	.word	0x40023800
 8003e74:	00f42400 	.word	0x00f42400
 8003e78:	017d7840 	.word	0x017d7840

08003e7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d101      	bne.n	8003e8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e056      	b.n	8003f3c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d106      	bne.n	8003eae <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f7fd f837 	bl	8000f1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2202      	movs	r2, #2
 8003eb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ec4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685a      	ldr	r2, [r3, #4]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	431a      	orrs	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	431a      	orrs	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	431a      	orrs	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	431a      	orrs	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003eea:	431a      	orrs	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	69db      	ldr	r3, [r3, #28]
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	ea42 0103 	orr.w	r1, r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	0c1b      	lsrs	r3, r3, #16
 8003f0c:	f003 0104 	and.w	r1, r3, #4
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	69da      	ldr	r2, [r3, #28]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f2a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3708      	adds	r7, #8
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b088      	sub	sp, #32
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	603b      	str	r3, [r7, #0]
 8003f50:	4613      	mov	r3, r2
 8003f52:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f54:	2300      	movs	r3, #0
 8003f56:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d101      	bne.n	8003f66 <HAL_SPI_Transmit+0x22>
 8003f62:	2302      	movs	r3, #2
 8003f64:	e11e      	b.n	80041a4 <HAL_SPI_Transmit+0x260>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f6e:	f7fe fccf 	bl	8002910 <HAL_GetTick>
 8003f72:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003f74:	88fb      	ldrh	r3, [r7, #6]
 8003f76:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d002      	beq.n	8003f8a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003f84:	2302      	movs	r3, #2
 8003f86:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f88:	e103      	b.n	8004192 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d002      	beq.n	8003f96 <HAL_SPI_Transmit+0x52>
 8003f90:	88fb      	ldrh	r3, [r7, #6]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d102      	bne.n	8003f9c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f9a:	e0fa      	b.n	8004192 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2203      	movs	r2, #3
 8003fa0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	68ba      	ldr	r2, [r7, #8]
 8003fae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	88fa      	ldrh	r2, [r7, #6]
 8003fb4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	88fa      	ldrh	r2, [r7, #6]
 8003fba:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fe2:	d107      	bne.n	8003ff4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ff2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ffe:	2b40      	cmp	r3, #64	; 0x40
 8004000:	d007      	beq.n	8004012 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004010:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800401a:	d14b      	bne.n	80040b4 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d002      	beq.n	800402a <HAL_SPI_Transmit+0xe6>
 8004024:	8afb      	ldrh	r3, [r7, #22]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d13e      	bne.n	80040a8 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402e:	881a      	ldrh	r2, [r3, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403a:	1c9a      	adds	r2, r3, #2
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004044:	b29b      	uxth	r3, r3
 8004046:	3b01      	subs	r3, #1
 8004048:	b29a      	uxth	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800404e:	e02b      	b.n	80040a8 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b02      	cmp	r3, #2
 800405c:	d112      	bne.n	8004084 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004062:	881a      	ldrh	r2, [r3, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406e:	1c9a      	adds	r2, r3, #2
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004078:	b29b      	uxth	r3, r3
 800407a:	3b01      	subs	r3, #1
 800407c:	b29a      	uxth	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	86da      	strh	r2, [r3, #54]	; 0x36
 8004082:	e011      	b.n	80040a8 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004084:	f7fe fc44 	bl	8002910 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	429a      	cmp	r2, r3
 8004092:	d803      	bhi.n	800409c <HAL_SPI_Transmit+0x158>
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409a:	d102      	bne.n	80040a2 <HAL_SPI_Transmit+0x15e>
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d102      	bne.n	80040a8 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80040a6:	e074      	b.n	8004192 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1ce      	bne.n	8004050 <HAL_SPI_Transmit+0x10c>
 80040b2:	e04c      	b.n	800414e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d002      	beq.n	80040c2 <HAL_SPI_Transmit+0x17e>
 80040bc:	8afb      	ldrh	r3, [r7, #22]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d140      	bne.n	8004144 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	330c      	adds	r3, #12
 80040cc:	7812      	ldrb	r2, [r2, #0]
 80040ce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d4:	1c5a      	adds	r2, r3, #1
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040de:	b29b      	uxth	r3, r3
 80040e0:	3b01      	subs	r3, #1
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80040e8:	e02c      	b.n	8004144 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d113      	bne.n	8004120 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	330c      	adds	r3, #12
 8004102:	7812      	ldrb	r2, [r2, #0]
 8004104:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410a:	1c5a      	adds	r2, r3, #1
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004114:	b29b      	uxth	r3, r3
 8004116:	3b01      	subs	r3, #1
 8004118:	b29a      	uxth	r2, r3
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	86da      	strh	r2, [r3, #54]	; 0x36
 800411e:	e011      	b.n	8004144 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004120:	f7fe fbf6 	bl	8002910 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	683a      	ldr	r2, [r7, #0]
 800412c:	429a      	cmp	r2, r3
 800412e:	d803      	bhi.n	8004138 <HAL_SPI_Transmit+0x1f4>
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004136:	d102      	bne.n	800413e <HAL_SPI_Transmit+0x1fa>
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d102      	bne.n	8004144 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004142:	e026      	b.n	8004192 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004148:	b29b      	uxth	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1cd      	bne.n	80040ea <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800414e:	69ba      	ldr	r2, [r7, #24]
 8004150:	6839      	ldr	r1, [r7, #0]
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f000 fba4 	bl	80048a0 <SPI_EndRxTxTransaction>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d002      	beq.n	8004164 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2220      	movs	r2, #32
 8004162:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d10a      	bne.n	8004182 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800416c:	2300      	movs	r3, #0
 800416e:	613b      	str	r3, [r7, #16]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	613b      	str	r3, [r7, #16]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	613b      	str	r3, [r7, #16]
 8004180:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004186:	2b00      	cmp	r3, #0
 8004188:	d002      	beq.n	8004190 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	77fb      	strb	r3, [r7, #31]
 800418e:	e000      	b.n	8004192 <HAL_SPI_Transmit+0x24e>
  }

error:
 8004190:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80041a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3720      	adds	r7, #32
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b088      	sub	sp, #32
 80041b0:	af02      	add	r7, sp, #8
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	603b      	str	r3, [r7, #0]
 80041b8:	4613      	mov	r3, r2
 80041ba:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80041bc:	2300      	movs	r3, #0
 80041be:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041c8:	d112      	bne.n	80041f0 <HAL_SPI_Receive+0x44>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10e      	bne.n	80041f0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2204      	movs	r2, #4
 80041d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80041da:	88fa      	ldrh	r2, [r7, #6]
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	9300      	str	r3, [sp, #0]
 80041e0:	4613      	mov	r3, r2
 80041e2:	68ba      	ldr	r2, [r7, #8]
 80041e4:	68b9      	ldr	r1, [r7, #8]
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f000 f8e9 	bl	80043be <HAL_SPI_TransmitReceive>
 80041ec:	4603      	mov	r3, r0
 80041ee:	e0e2      	b.n	80043b6 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d101      	bne.n	80041fe <HAL_SPI_Receive+0x52>
 80041fa:	2302      	movs	r3, #2
 80041fc:	e0db      	b.n	80043b6 <HAL_SPI_Receive+0x20a>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004206:	f7fe fb83 	bl	8002910 <HAL_GetTick>
 800420a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004212:	b2db      	uxtb	r3, r3
 8004214:	2b01      	cmp	r3, #1
 8004216:	d002      	beq.n	800421e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004218:	2302      	movs	r3, #2
 800421a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800421c:	e0c2      	b.n	80043a4 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d002      	beq.n	800422a <HAL_SPI_Receive+0x7e>
 8004224:	88fb      	ldrh	r3, [r7, #6]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d102      	bne.n	8004230 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800422e:	e0b9      	b.n	80043a4 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2204      	movs	r2, #4
 8004234:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	68ba      	ldr	r2, [r7, #8]
 8004242:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	88fa      	ldrh	r2, [r7, #6]
 8004248:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	88fa      	ldrh	r2, [r7, #6]
 800424e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004276:	d107      	bne.n	8004288 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004286:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004292:	2b40      	cmp	r3, #64	; 0x40
 8004294:	d007      	beq.n	80042a6 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042a4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d162      	bne.n	8004374 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80042ae:	e02e      	b.n	800430e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d115      	bne.n	80042ea <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f103 020c 	add.w	r2, r3, #12
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ca:	7812      	ldrb	r2, [r2, #0]
 80042cc:	b2d2      	uxtb	r2, r2
 80042ce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d4:	1c5a      	adds	r2, r3, #1
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042de:	b29b      	uxth	r3, r3
 80042e0:	3b01      	subs	r3, #1
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80042e8:	e011      	b.n	800430e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042ea:	f7fe fb11 	bl	8002910 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d803      	bhi.n	8004302 <HAL_SPI_Receive+0x156>
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004300:	d102      	bne.n	8004308 <HAL_SPI_Receive+0x15c>
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d102      	bne.n	800430e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800430c:	e04a      	b.n	80043a4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004312:	b29b      	uxth	r3, r3
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1cb      	bne.n	80042b0 <HAL_SPI_Receive+0x104>
 8004318:	e031      	b.n	800437e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f003 0301 	and.w	r3, r3, #1
 8004324:	2b01      	cmp	r3, #1
 8004326:	d113      	bne.n	8004350 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68da      	ldr	r2, [r3, #12]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004332:	b292      	uxth	r2, r2
 8004334:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433a:	1c9a      	adds	r2, r3, #2
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004344:	b29b      	uxth	r3, r3
 8004346:	3b01      	subs	r3, #1
 8004348:	b29a      	uxth	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800434e:	e011      	b.n	8004374 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004350:	f7fe fade 	bl	8002910 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	683a      	ldr	r2, [r7, #0]
 800435c:	429a      	cmp	r2, r3
 800435e:	d803      	bhi.n	8004368 <HAL_SPI_Receive+0x1bc>
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004366:	d102      	bne.n	800436e <HAL_SPI_Receive+0x1c2>
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d102      	bne.n	8004374 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004372:	e017      	b.n	80043a4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004378:	b29b      	uxth	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1cd      	bne.n	800431a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	6839      	ldr	r1, [r7, #0]
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f000 fa27 	bl	80047d6 <SPI_EndRxTransaction>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d002      	beq.n	8004394 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2220      	movs	r2, #32
 8004392:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004398:	2b00      	cmp	r3, #0
 800439a:	d002      	beq.n	80043a2 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	75fb      	strb	r3, [r7, #23]
 80043a0:	e000      	b.n	80043a4 <HAL_SPI_Receive+0x1f8>
  }

error :
 80043a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80043b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3718      	adds	r7, #24
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b08c      	sub	sp, #48	; 0x30
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	60f8      	str	r0, [r7, #12]
 80043c6:	60b9      	str	r1, [r7, #8]
 80043c8:	607a      	str	r2, [r7, #4]
 80043ca:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80043cc:	2301      	movs	r3, #1
 80043ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80043d0:	2300      	movs	r3, #0
 80043d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d101      	bne.n	80043e4 <HAL_SPI_TransmitReceive+0x26>
 80043e0:	2302      	movs	r3, #2
 80043e2:	e18a      	b.n	80046fa <HAL_SPI_TransmitReceive+0x33c>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043ec:	f7fe fa90 	bl	8002910 <HAL_GetTick>
 80043f0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004402:	887b      	ldrh	r3, [r7, #2]
 8004404:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004406:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800440a:	2b01      	cmp	r3, #1
 800440c:	d00f      	beq.n	800442e <HAL_SPI_TransmitReceive+0x70>
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004414:	d107      	bne.n	8004426 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d103      	bne.n	8004426 <HAL_SPI_TransmitReceive+0x68>
 800441e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004422:	2b04      	cmp	r3, #4
 8004424:	d003      	beq.n	800442e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004426:	2302      	movs	r3, #2
 8004428:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800442c:	e15b      	b.n	80046e6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d005      	beq.n	8004440 <HAL_SPI_TransmitReceive+0x82>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d002      	beq.n	8004440 <HAL_SPI_TransmitReceive+0x82>
 800443a:	887b      	ldrh	r3, [r7, #2]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d103      	bne.n	8004448 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004446:	e14e      	b.n	80046e6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b04      	cmp	r3, #4
 8004452:	d003      	beq.n	800445c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2205      	movs	r2, #5
 8004458:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	887a      	ldrh	r2, [r7, #2]
 800446c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	887a      	ldrh	r2, [r7, #2]
 8004472:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	68ba      	ldr	r2, [r7, #8]
 8004478:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	887a      	ldrh	r2, [r7, #2]
 800447e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	887a      	ldrh	r2, [r7, #2]
 8004484:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800449c:	2b40      	cmp	r3, #64	; 0x40
 800449e:	d007      	beq.n	80044b0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044b8:	d178      	bne.n	80045ac <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d002      	beq.n	80044c8 <HAL_SPI_TransmitReceive+0x10a>
 80044c2:	8b7b      	ldrh	r3, [r7, #26]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d166      	bne.n	8004596 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044cc:	881a      	ldrh	r2, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d8:	1c9a      	adds	r2, r3, #2
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	3b01      	subs	r3, #1
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044ec:	e053      	b.n	8004596 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f003 0302 	and.w	r3, r3, #2
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d11b      	bne.n	8004534 <HAL_SPI_TransmitReceive+0x176>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004500:	b29b      	uxth	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d016      	beq.n	8004534 <HAL_SPI_TransmitReceive+0x176>
 8004506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004508:	2b01      	cmp	r3, #1
 800450a:	d113      	bne.n	8004534 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004510:	881a      	ldrh	r2, [r3, #0]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451c:	1c9a      	adds	r2, r3, #2
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004526:	b29b      	uxth	r3, r3
 8004528:	3b01      	subs	r3, #1
 800452a:	b29a      	uxth	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004530:	2300      	movs	r3, #0
 8004532:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b01      	cmp	r3, #1
 8004540:	d119      	bne.n	8004576 <HAL_SPI_TransmitReceive+0x1b8>
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004546:	b29b      	uxth	r3, r3
 8004548:	2b00      	cmp	r3, #0
 800454a:	d014      	beq.n	8004576 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68da      	ldr	r2, [r3, #12]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004556:	b292      	uxth	r2, r2
 8004558:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455e:	1c9a      	adds	r2, r3, #2
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004568:	b29b      	uxth	r3, r3
 800456a:	3b01      	subs	r3, #1
 800456c:	b29a      	uxth	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004572:	2301      	movs	r3, #1
 8004574:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004576:	f7fe f9cb 	bl	8002910 <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004582:	429a      	cmp	r2, r3
 8004584:	d807      	bhi.n	8004596 <HAL_SPI_TransmitReceive+0x1d8>
 8004586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800458c:	d003      	beq.n	8004596 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004594:	e0a7      	b.n	80046e6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800459a:	b29b      	uxth	r3, r3
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1a6      	bne.n	80044ee <HAL_SPI_TransmitReceive+0x130>
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1a1      	bne.n	80044ee <HAL_SPI_TransmitReceive+0x130>
 80045aa:	e07c      	b.n	80046a6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d002      	beq.n	80045ba <HAL_SPI_TransmitReceive+0x1fc>
 80045b4:	8b7b      	ldrh	r3, [r7, #26]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d16b      	bne.n	8004692 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	330c      	adds	r3, #12
 80045c4:	7812      	ldrb	r2, [r2, #0]
 80045c6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045cc:	1c5a      	adds	r2, r3, #1
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	3b01      	subs	r3, #1
 80045da:	b29a      	uxth	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045e0:	e057      	b.n	8004692 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f003 0302 	and.w	r3, r3, #2
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d11c      	bne.n	800462a <HAL_SPI_TransmitReceive+0x26c>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d017      	beq.n	800462a <HAL_SPI_TransmitReceive+0x26c>
 80045fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d114      	bne.n	800462a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	330c      	adds	r3, #12
 800460a:	7812      	ldrb	r2, [r2, #0]
 800460c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004612:	1c5a      	adds	r2, r3, #1
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800461c:	b29b      	uxth	r3, r3
 800461e:	3b01      	subs	r3, #1
 8004620:	b29a      	uxth	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004626:	2300      	movs	r3, #0
 8004628:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f003 0301 	and.w	r3, r3, #1
 8004634:	2b01      	cmp	r3, #1
 8004636:	d119      	bne.n	800466c <HAL_SPI_TransmitReceive+0x2ae>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800463c:	b29b      	uxth	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d014      	beq.n	800466c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68da      	ldr	r2, [r3, #12]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464c:	b2d2      	uxtb	r2, r2
 800464e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004654:	1c5a      	adds	r2, r3, #1
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800465e:	b29b      	uxth	r3, r3
 8004660:	3b01      	subs	r3, #1
 8004662:	b29a      	uxth	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004668:	2301      	movs	r3, #1
 800466a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800466c:	f7fe f950 	bl	8002910 <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004678:	429a      	cmp	r2, r3
 800467a:	d803      	bhi.n	8004684 <HAL_SPI_TransmitReceive+0x2c6>
 800467c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800467e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004682:	d102      	bne.n	800468a <HAL_SPI_TransmitReceive+0x2cc>
 8004684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004686:	2b00      	cmp	r3, #0
 8004688:	d103      	bne.n	8004692 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004690:	e029      	b.n	80046e6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004696:	b29b      	uxth	r3, r3
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1a2      	bne.n	80045e2 <HAL_SPI_TransmitReceive+0x224>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d19d      	bne.n	80045e2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	f000 f8f8 	bl	80048a0 <SPI_EndRxTxTransaction>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d006      	beq.n	80046c4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2220      	movs	r2, #32
 80046c0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80046c2:	e010      	b.n	80046e6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10b      	bne.n	80046e4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046cc:	2300      	movs	r3, #0
 80046ce:	617b      	str	r3, [r7, #20]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	617b      	str	r3, [r7, #20]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	617b      	str	r3, [r7, #20]
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	e000      	b.n	80046e6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80046e4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80046f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3730      	adds	r7, #48	; 0x30
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004702:	b580      	push	{r7, lr}
 8004704:	b084      	sub	sp, #16
 8004706:	af00      	add	r7, sp, #0
 8004708:	60f8      	str	r0, [r7, #12]
 800470a:	60b9      	str	r1, [r7, #8]
 800470c:	603b      	str	r3, [r7, #0]
 800470e:	4613      	mov	r3, r2
 8004710:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004712:	e04c      	b.n	80047ae <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800471a:	d048      	beq.n	80047ae <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800471c:	f7fe f8f8 	bl	8002910 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	683a      	ldr	r2, [r7, #0]
 8004728:	429a      	cmp	r2, r3
 800472a:	d902      	bls.n	8004732 <SPI_WaitFlagStateUntilTimeout+0x30>
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d13d      	bne.n	80047ae <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004740:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800474a:	d111      	bne.n	8004770 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004754:	d004      	beq.n	8004760 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800475e:	d107      	bne.n	8004770 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800476e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004774:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004778:	d10f      	bne.n	800479a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004788:	601a      	str	r2, [r3, #0]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004798:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e00f      	b.n	80047ce <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	689a      	ldr	r2, [r3, #8]
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	4013      	ands	r3, r2
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	bf0c      	ite	eq
 80047be:	2301      	moveq	r3, #1
 80047c0:	2300      	movne	r3, #0
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	461a      	mov	r2, r3
 80047c6:	79fb      	ldrb	r3, [r7, #7]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d1a3      	bne.n	8004714 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b086      	sub	sp, #24
 80047da:	af02      	add	r7, sp, #8
 80047dc:	60f8      	str	r0, [r7, #12]
 80047de:	60b9      	str	r1, [r7, #8]
 80047e0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047ea:	d111      	bne.n	8004810 <SPI_EndRxTransaction+0x3a>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047f4:	d004      	beq.n	8004800 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047fe:	d107      	bne.n	8004810 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800480e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004818:	d12a      	bne.n	8004870 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004822:	d012      	beq.n	800484a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	9300      	str	r3, [sp, #0]
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	2200      	movs	r2, #0
 800482c:	2180      	movs	r1, #128	; 0x80
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f7ff ff67 	bl	8004702 <SPI_WaitFlagStateUntilTimeout>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d02d      	beq.n	8004896 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800483e:	f043 0220 	orr.w	r2, r3, #32
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e026      	b.n	8004898 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	2200      	movs	r2, #0
 8004852:	2101      	movs	r1, #1
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f7ff ff54 	bl	8004702 <SPI_WaitFlagStateUntilTimeout>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d01a      	beq.n	8004896 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004864:	f043 0220 	orr.w	r2, r3, #32
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e013      	b.n	8004898 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	9300      	str	r3, [sp, #0]
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	2200      	movs	r2, #0
 8004878:	2101      	movs	r1, #1
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f7ff ff41 	bl	8004702 <SPI_WaitFlagStateUntilTimeout>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d007      	beq.n	8004896 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800488a:	f043 0220 	orr.w	r2, r3, #32
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e000      	b.n	8004898 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3710      	adds	r7, #16
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b088      	sub	sp, #32
 80048a4:	af02      	add	r7, sp, #8
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80048ac:	4b1b      	ldr	r3, [pc, #108]	; (800491c <SPI_EndRxTxTransaction+0x7c>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a1b      	ldr	r2, [pc, #108]	; (8004920 <SPI_EndRxTxTransaction+0x80>)
 80048b2:	fba2 2303 	umull	r2, r3, r2, r3
 80048b6:	0d5b      	lsrs	r3, r3, #21
 80048b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80048bc:	fb02 f303 	mul.w	r3, r2, r3
 80048c0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048ca:	d112      	bne.n	80048f2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	9300      	str	r3, [sp, #0]
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	2200      	movs	r2, #0
 80048d4:	2180      	movs	r1, #128	; 0x80
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f7ff ff13 	bl	8004702 <SPI_WaitFlagStateUntilTimeout>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d016      	beq.n	8004910 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e6:	f043 0220 	orr.w	r2, r3, #32
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e00f      	b.n	8004912 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00a      	beq.n	800490e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	3b01      	subs	r3, #1
 80048fc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004908:	2b80      	cmp	r3, #128	; 0x80
 800490a:	d0f2      	beq.n	80048f2 <SPI_EndRxTxTransaction+0x52>
 800490c:	e000      	b.n	8004910 <SPI_EndRxTxTransaction+0x70>
        break;
 800490e:	bf00      	nop
  }

  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3718      	adds	r7, #24
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	2000002c 	.word	0x2000002c
 8004920:	165e9f81 	.word	0x165e9f81

08004924 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d101      	bne.n	8004936 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e01d      	b.n	8004972 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d106      	bne.n	8004950 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f7fc fb64 	bl	8001018 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2202      	movs	r2, #2
 8004954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	3304      	adds	r3, #4
 8004960:	4619      	mov	r1, r3
 8004962:	4610      	mov	r0, r2
 8004964:	f000 fca8 	bl	80052b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3708      	adds	r7, #8
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b082      	sub	sp, #8
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d101      	bne.n	800498c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e01d      	b.n	80049c8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004992:	b2db      	uxtb	r3, r3
 8004994:	2b00      	cmp	r3, #0
 8004996:	d106      	bne.n	80049a6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 f815 	bl	80049d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2202      	movs	r2, #2
 80049aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	3304      	adds	r3, #4
 80049b6:	4619      	mov	r1, r3
 80049b8:	4610      	mov	r0, r2
 80049ba:	f000 fc7d 	bl	80052b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3708      	adds	r7, #8
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80049d8:	bf00      	nop
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2201      	movs	r2, #1
 80049f4:	6839      	ldr	r1, [r7, #0]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f001 f872 	bl	8005ae0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a15      	ldr	r2, [pc, #84]	; (8004a58 <HAL_TIM_PWM_Start+0x74>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d004      	beq.n	8004a10 <HAL_TIM_PWM_Start+0x2c>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a14      	ldr	r2, [pc, #80]	; (8004a5c <HAL_TIM_PWM_Start+0x78>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d101      	bne.n	8004a14 <HAL_TIM_PWM_Start+0x30>
 8004a10:	2301      	movs	r3, #1
 8004a12:	e000      	b.n	8004a16 <HAL_TIM_PWM_Start+0x32>
 8004a14:	2300      	movs	r3, #0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d007      	beq.n	8004a2a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a28:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f003 0307 	and.w	r3, r3, #7
 8004a34:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2b06      	cmp	r3, #6
 8004a3a:	d007      	beq.n	8004a4c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f042 0201 	orr.w	r2, r2, #1
 8004a4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	40010000 	.word	0x40010000
 8004a5c:	40010400 	.word	0x40010400

08004a60 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e01d      	b.n	8004aae <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d106      	bne.n	8004a8c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f815 	bl	8004ab6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2202      	movs	r2, #2
 8004a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	3304      	adds	r3, #4
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	4610      	mov	r0, r2
 8004aa0:	f000 fc0a 	bl	80052b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3708      	adds	r7, #8
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004ab6:	b480      	push	{r7}
 8004ab8:	b083      	sub	sp, #12
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004abe:	bf00      	nop
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
	...

08004acc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	2b0c      	cmp	r3, #12
 8004ada:	d841      	bhi.n	8004b60 <HAL_TIM_IC_Start_IT+0x94>
 8004adc:	a201      	add	r2, pc, #4	; (adr r2, 8004ae4 <HAL_TIM_IC_Start_IT+0x18>)
 8004ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae2:	bf00      	nop
 8004ae4:	08004b19 	.word	0x08004b19
 8004ae8:	08004b61 	.word	0x08004b61
 8004aec:	08004b61 	.word	0x08004b61
 8004af0:	08004b61 	.word	0x08004b61
 8004af4:	08004b2b 	.word	0x08004b2b
 8004af8:	08004b61 	.word	0x08004b61
 8004afc:	08004b61 	.word	0x08004b61
 8004b00:	08004b61 	.word	0x08004b61
 8004b04:	08004b3d 	.word	0x08004b3d
 8004b08:	08004b61 	.word	0x08004b61
 8004b0c:	08004b61 	.word	0x08004b61
 8004b10:	08004b61 	.word	0x08004b61
 8004b14:	08004b4f 	.word	0x08004b4f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68da      	ldr	r2, [r3, #12]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f042 0202 	orr.w	r2, r2, #2
 8004b26:	60da      	str	r2, [r3, #12]
      break;
 8004b28:	e01b      	b.n	8004b62 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68da      	ldr	r2, [r3, #12]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f042 0204 	orr.w	r2, r2, #4
 8004b38:	60da      	str	r2, [r3, #12]
      break;
 8004b3a:	e012      	b.n	8004b62 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68da      	ldr	r2, [r3, #12]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f042 0208 	orr.w	r2, r2, #8
 8004b4a:	60da      	str	r2, [r3, #12]
      break;
 8004b4c:	e009      	b.n	8004b62 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68da      	ldr	r2, [r3, #12]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f042 0210 	orr.w	r2, r2, #16
 8004b5c:	60da      	str	r2, [r3, #12]
      break;
 8004b5e:	e000      	b.n	8004b62 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8004b60:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2201      	movs	r2, #1
 8004b68:	6839      	ldr	r1, [r7, #0]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f000 ffb8 	bl	8005ae0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f003 0307 	and.w	r3, r3, #7
 8004b7a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2b06      	cmp	r3, #6
 8004b80:	d007      	beq.n	8004b92 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f042 0201 	orr.w	r2, r2, #1
 8004b90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3710      	adds	r7, #16
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d122      	bne.n	8004bf8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	f003 0302 	and.w	r3, r3, #2
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d11b      	bne.n	8004bf8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f06f 0202 	mvn.w	r2, #2
 8004bc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	f003 0303 	and.w	r3, r3, #3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d003      	beq.n	8004be6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f7fd fc44 	bl	800246c <HAL_TIM_IC_CaptureCallback>
 8004be4:	e005      	b.n	8004bf2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 fb48 	bl	800527c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 fb4f 	bl	8005290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	f003 0304 	and.w	r3, r3, #4
 8004c02:	2b04      	cmp	r3, #4
 8004c04:	d122      	bne.n	8004c4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	f003 0304 	and.w	r3, r3, #4
 8004c10:	2b04      	cmp	r3, #4
 8004c12:	d11b      	bne.n	8004c4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f06f 0204 	mvn.w	r2, #4
 8004c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2202      	movs	r2, #2
 8004c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d003      	beq.n	8004c3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f7fd fc1a 	bl	800246c <HAL_TIM_IC_CaptureCallback>
 8004c38:	e005      	b.n	8004c46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 fb1e 	bl	800527c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 fb25 	bl	8005290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	f003 0308 	and.w	r3, r3, #8
 8004c56:	2b08      	cmp	r3, #8
 8004c58:	d122      	bne.n	8004ca0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	f003 0308 	and.w	r3, r3, #8
 8004c64:	2b08      	cmp	r3, #8
 8004c66:	d11b      	bne.n	8004ca0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f06f 0208 	mvn.w	r2, #8
 8004c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2204      	movs	r2, #4
 8004c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	69db      	ldr	r3, [r3, #28]
 8004c7e:	f003 0303 	and.w	r3, r3, #3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d003      	beq.n	8004c8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f7fd fbf0 	bl	800246c <HAL_TIM_IC_CaptureCallback>
 8004c8c:	e005      	b.n	8004c9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 faf4 	bl	800527c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 fafb 	bl	8005290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	f003 0310 	and.w	r3, r3, #16
 8004caa:	2b10      	cmp	r3, #16
 8004cac:	d122      	bne.n	8004cf4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f003 0310 	and.w	r3, r3, #16
 8004cb8:	2b10      	cmp	r3, #16
 8004cba:	d11b      	bne.n	8004cf4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f06f 0210 	mvn.w	r2, #16
 8004cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2208      	movs	r2, #8
 8004cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d003      	beq.n	8004ce2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f7fd fbc6 	bl	800246c <HAL_TIM_IC_CaptureCallback>
 8004ce0:	e005      	b.n	8004cee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 faca 	bl	800527c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 fad1 	bl	8005290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	f003 0301 	and.w	r3, r3, #1
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d10e      	bne.n	8004d20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	f003 0301 	and.w	r3, r3, #1
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d107      	bne.n	8004d20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f06f 0201 	mvn.w	r2, #1
 8004d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 faa4 	bl	8005268 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d2a:	2b80      	cmp	r3, #128	; 0x80
 8004d2c:	d10e      	bne.n	8004d4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d38:	2b80      	cmp	r3, #128	; 0x80
 8004d3a:	d107      	bne.n	8004d4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 fff2 	bl	8005d30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d56:	2b40      	cmp	r3, #64	; 0x40
 8004d58:	d10e      	bne.n	8004d78 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d64:	2b40      	cmp	r3, #64	; 0x40
 8004d66:	d107      	bne.n	8004d78 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 fa96 	bl	80052a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	f003 0320 	and.w	r3, r3, #32
 8004d82:	2b20      	cmp	r3, #32
 8004d84:	d10e      	bne.n	8004da4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	f003 0320 	and.w	r3, r3, #32
 8004d90:	2b20      	cmp	r3, #32
 8004d92:	d107      	bne.n	8004da4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f06f 0220 	mvn.w	r2, #32
 8004d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 ffbc 	bl	8005d1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004da4:	bf00      	nop
 8004da6:	3708      	adds	r7, #8
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d101      	bne.n	8004dc6 <HAL_TIM_IC_ConfigChannel+0x1a>
 8004dc2:	2302      	movs	r3, #2
 8004dc4:	e08a      	b.n	8004edc <HAL_TIM_IC_ConfigChannel+0x130>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2202      	movs	r2, #2
 8004dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d11b      	bne.n	8004e14 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6818      	ldr	r0, [r3, #0]
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	6819      	ldr	r1, [r3, #0]
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	685a      	ldr	r2, [r3, #4]
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	f000 fcb4 	bl	8005758 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	699a      	ldr	r2, [r3, #24]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f022 020c 	bic.w	r2, r2, #12
 8004dfe:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6999      	ldr	r1, [r3, #24]
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	689a      	ldr	r2, [r3, #8]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	430a      	orrs	r2, r1
 8004e10:	619a      	str	r2, [r3, #24]
 8004e12:	e05a      	b.n	8004eca <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2b04      	cmp	r3, #4
 8004e18:	d11c      	bne.n	8004e54 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6818      	ldr	r0, [r3, #0]
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	6819      	ldr	r1, [r3, #0]
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	f000 fd38 	bl	800589e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	699a      	ldr	r2, [r3, #24]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004e3c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	6999      	ldr	r1, [r3, #24]
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	021a      	lsls	r2, r3, #8
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	619a      	str	r2, [r3, #24]
 8004e52:	e03a      	b.n	8004eca <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b08      	cmp	r3, #8
 8004e58:	d11b      	bne.n	8004e92 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6818      	ldr	r0, [r3, #0]
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	6819      	ldr	r1, [r3, #0]
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	685a      	ldr	r2, [r3, #4]
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	f000 fd85 	bl	8005978 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	69da      	ldr	r2, [r3, #28]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f022 020c 	bic.w	r2, r2, #12
 8004e7c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	69d9      	ldr	r1, [r3, #28]
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	689a      	ldr	r2, [r3, #8]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	430a      	orrs	r2, r1
 8004e8e:	61da      	str	r2, [r3, #28]
 8004e90:	e01b      	b.n	8004eca <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6818      	ldr	r0, [r3, #0]
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	6819      	ldr	r1, [r3, #0]
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	685a      	ldr	r2, [r3, #4]
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	f000 fda5 	bl	80059f0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	69da      	ldr	r2, [r3, #28]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004eb4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	69d9      	ldr	r1, [r3, #28]
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	021a      	lsls	r2, r3, #8
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3710      	adds	r7, #16
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d101      	bne.n	8004efe <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004efa:	2302      	movs	r3, #2
 8004efc:	e0b4      	b.n	8005068 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2202      	movs	r2, #2
 8004f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2b0c      	cmp	r3, #12
 8004f12:	f200 809f 	bhi.w	8005054 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004f16:	a201      	add	r2, pc, #4	; (adr r2, 8004f1c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f1c:	08004f51 	.word	0x08004f51
 8004f20:	08005055 	.word	0x08005055
 8004f24:	08005055 	.word	0x08005055
 8004f28:	08005055 	.word	0x08005055
 8004f2c:	08004f91 	.word	0x08004f91
 8004f30:	08005055 	.word	0x08005055
 8004f34:	08005055 	.word	0x08005055
 8004f38:	08005055 	.word	0x08005055
 8004f3c:	08004fd3 	.word	0x08004fd3
 8004f40:	08005055 	.word	0x08005055
 8004f44:	08005055 	.word	0x08005055
 8004f48:	08005055 	.word	0x08005055
 8004f4c:	08005013 	.word	0x08005013
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68b9      	ldr	r1, [r7, #8]
 8004f56:	4618      	mov	r0, r3
 8004f58:	f000 fa4e 	bl	80053f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	699a      	ldr	r2, [r3, #24]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f042 0208 	orr.w	r2, r2, #8
 8004f6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	699a      	ldr	r2, [r3, #24]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f022 0204 	bic.w	r2, r2, #4
 8004f7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	6999      	ldr	r1, [r3, #24]
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	691a      	ldr	r2, [r3, #16]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	619a      	str	r2, [r3, #24]
      break;
 8004f8e:	e062      	b.n	8005056 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68b9      	ldr	r1, [r7, #8]
 8004f96:	4618      	mov	r0, r3
 8004f98:	f000 fa9e 	bl	80054d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	699a      	ldr	r2, [r3, #24]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004faa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	699a      	ldr	r2, [r3, #24]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	6999      	ldr	r1, [r3, #24]
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	021a      	lsls	r2, r3, #8
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	430a      	orrs	r2, r1
 8004fce:	619a      	str	r2, [r3, #24]
      break;
 8004fd0:	e041      	b.n	8005056 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68b9      	ldr	r1, [r7, #8]
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f000 faf3 	bl	80055c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	69da      	ldr	r2, [r3, #28]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f042 0208 	orr.w	r2, r2, #8
 8004fec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	69da      	ldr	r2, [r3, #28]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f022 0204 	bic.w	r2, r2, #4
 8004ffc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	69d9      	ldr	r1, [r3, #28]
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	691a      	ldr	r2, [r3, #16]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	430a      	orrs	r2, r1
 800500e:	61da      	str	r2, [r3, #28]
      break;
 8005010:	e021      	b.n	8005056 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68b9      	ldr	r1, [r7, #8]
 8005018:	4618      	mov	r0, r3
 800501a:	f000 fb47 	bl	80056ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	69da      	ldr	r2, [r3, #28]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800502c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	69da      	ldr	r2, [r3, #28]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800503c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	69d9      	ldr	r1, [r3, #28]
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	021a      	lsls	r2, r3, #8
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	430a      	orrs	r2, r1
 8005050:	61da      	str	r2, [r3, #28]
      break;
 8005052:	e000      	b.n	8005056 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005054:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2201      	movs	r2, #1
 800505a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3710      	adds	r7, #16
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005080:	2b01      	cmp	r3, #1
 8005082:	d101      	bne.n	8005088 <HAL_TIM_ConfigClockSource+0x18>
 8005084:	2302      	movs	r3, #2
 8005086:	e0a6      	b.n	80051d6 <HAL_TIM_ConfigClockSource+0x166>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80050a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050ae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2b40      	cmp	r3, #64	; 0x40
 80050be:	d067      	beq.n	8005190 <HAL_TIM_ConfigClockSource+0x120>
 80050c0:	2b40      	cmp	r3, #64	; 0x40
 80050c2:	d80b      	bhi.n	80050dc <HAL_TIM_ConfigClockSource+0x6c>
 80050c4:	2b10      	cmp	r3, #16
 80050c6:	d073      	beq.n	80051b0 <HAL_TIM_ConfigClockSource+0x140>
 80050c8:	2b10      	cmp	r3, #16
 80050ca:	d802      	bhi.n	80050d2 <HAL_TIM_ConfigClockSource+0x62>
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d06f      	beq.n	80051b0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80050d0:	e078      	b.n	80051c4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80050d2:	2b20      	cmp	r3, #32
 80050d4:	d06c      	beq.n	80051b0 <HAL_TIM_ConfigClockSource+0x140>
 80050d6:	2b30      	cmp	r3, #48	; 0x30
 80050d8:	d06a      	beq.n	80051b0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80050da:	e073      	b.n	80051c4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80050dc:	2b70      	cmp	r3, #112	; 0x70
 80050de:	d00d      	beq.n	80050fc <HAL_TIM_ConfigClockSource+0x8c>
 80050e0:	2b70      	cmp	r3, #112	; 0x70
 80050e2:	d804      	bhi.n	80050ee <HAL_TIM_ConfigClockSource+0x7e>
 80050e4:	2b50      	cmp	r3, #80	; 0x50
 80050e6:	d033      	beq.n	8005150 <HAL_TIM_ConfigClockSource+0xe0>
 80050e8:	2b60      	cmp	r3, #96	; 0x60
 80050ea:	d041      	beq.n	8005170 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80050ec:	e06a      	b.n	80051c4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80050ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050f2:	d066      	beq.n	80051c2 <HAL_TIM_ConfigClockSource+0x152>
 80050f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050f8:	d017      	beq.n	800512a <HAL_TIM_ConfigClockSource+0xba>
      break;
 80050fa:	e063      	b.n	80051c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6818      	ldr	r0, [r3, #0]
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	6899      	ldr	r1, [r3, #8]
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	685a      	ldr	r2, [r3, #4]
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	f000 fcc8 	bl	8005aa0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800511e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	609a      	str	r2, [r3, #8]
      break;
 8005128:	e04c      	b.n	80051c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6818      	ldr	r0, [r3, #0]
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	6899      	ldr	r1, [r3, #8]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	685a      	ldr	r2, [r3, #4]
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	f000 fcb1 	bl	8005aa0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	689a      	ldr	r2, [r3, #8]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800514c:	609a      	str	r2, [r3, #8]
      break;
 800514e:	e039      	b.n	80051c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6818      	ldr	r0, [r3, #0]
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	6859      	ldr	r1, [r3, #4]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	461a      	mov	r2, r3
 800515e:	f000 fb6f 	bl	8005840 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2150      	movs	r1, #80	; 0x50
 8005168:	4618      	mov	r0, r3
 800516a:	f000 fc7e 	bl	8005a6a <TIM_ITRx_SetConfig>
      break;
 800516e:	e029      	b.n	80051c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6818      	ldr	r0, [r3, #0]
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	6859      	ldr	r1, [r3, #4]
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	461a      	mov	r2, r3
 800517e:	f000 fbcb 	bl	8005918 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2160      	movs	r1, #96	; 0x60
 8005188:	4618      	mov	r0, r3
 800518a:	f000 fc6e 	bl	8005a6a <TIM_ITRx_SetConfig>
      break;
 800518e:	e019      	b.n	80051c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6818      	ldr	r0, [r3, #0]
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	6859      	ldr	r1, [r3, #4]
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	461a      	mov	r2, r3
 800519e:	f000 fb4f 	bl	8005840 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2140      	movs	r1, #64	; 0x40
 80051a8:	4618      	mov	r0, r3
 80051aa:	f000 fc5e 	bl	8005a6a <TIM_ITRx_SetConfig>
      break;
 80051ae:	e009      	b.n	80051c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4619      	mov	r1, r3
 80051ba:	4610      	mov	r0, r2
 80051bc:	f000 fc55 	bl	8005a6a <TIM_ITRx_SetConfig>
      break;
 80051c0:	e000      	b.n	80051c4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80051c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
	...

080051e0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80051ea:	2300      	movs	r3, #0
 80051ec:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	2b0c      	cmp	r3, #12
 80051f2:	d831      	bhi.n	8005258 <HAL_TIM_ReadCapturedValue+0x78>
 80051f4:	a201      	add	r2, pc, #4	; (adr r2, 80051fc <HAL_TIM_ReadCapturedValue+0x1c>)
 80051f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051fa:	bf00      	nop
 80051fc:	08005231 	.word	0x08005231
 8005200:	08005259 	.word	0x08005259
 8005204:	08005259 	.word	0x08005259
 8005208:	08005259 	.word	0x08005259
 800520c:	0800523b 	.word	0x0800523b
 8005210:	08005259 	.word	0x08005259
 8005214:	08005259 	.word	0x08005259
 8005218:	08005259 	.word	0x08005259
 800521c:	08005245 	.word	0x08005245
 8005220:	08005259 	.word	0x08005259
 8005224:	08005259 	.word	0x08005259
 8005228:	08005259 	.word	0x08005259
 800522c:	0800524f 	.word	0x0800524f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005236:	60fb      	str	r3, [r7, #12]

      break;
 8005238:	e00f      	b.n	800525a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005240:	60fb      	str	r3, [r7, #12]

      break;
 8005242:	e00a      	b.n	800525a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800524a:	60fb      	str	r3, [r7, #12]

      break;
 800524c:	e005      	b.n	800525a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005254:	60fb      	str	r3, [r7, #12]

      break;
 8005256:	e000      	b.n	800525a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005258:	bf00      	nop
  }

  return tmpreg;
 800525a:	68fb      	ldr	r3, [r7, #12]
}
 800525c:	4618      	mov	r0, r3
 800525e:	3714      	adds	r7, #20
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005298:	bf00      	nop
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a40      	ldr	r2, [pc, #256]	; (80053cc <TIM_Base_SetConfig+0x114>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d013      	beq.n	80052f8 <TIM_Base_SetConfig+0x40>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052d6:	d00f      	beq.n	80052f8 <TIM_Base_SetConfig+0x40>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a3d      	ldr	r2, [pc, #244]	; (80053d0 <TIM_Base_SetConfig+0x118>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d00b      	beq.n	80052f8 <TIM_Base_SetConfig+0x40>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a3c      	ldr	r2, [pc, #240]	; (80053d4 <TIM_Base_SetConfig+0x11c>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d007      	beq.n	80052f8 <TIM_Base_SetConfig+0x40>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a3b      	ldr	r2, [pc, #236]	; (80053d8 <TIM_Base_SetConfig+0x120>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d003      	beq.n	80052f8 <TIM_Base_SetConfig+0x40>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a3a      	ldr	r2, [pc, #232]	; (80053dc <TIM_Base_SetConfig+0x124>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d108      	bne.n	800530a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	4313      	orrs	r3, r2
 8005308:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a2f      	ldr	r2, [pc, #188]	; (80053cc <TIM_Base_SetConfig+0x114>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d02b      	beq.n	800536a <TIM_Base_SetConfig+0xb2>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005318:	d027      	beq.n	800536a <TIM_Base_SetConfig+0xb2>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a2c      	ldr	r2, [pc, #176]	; (80053d0 <TIM_Base_SetConfig+0x118>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d023      	beq.n	800536a <TIM_Base_SetConfig+0xb2>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a2b      	ldr	r2, [pc, #172]	; (80053d4 <TIM_Base_SetConfig+0x11c>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d01f      	beq.n	800536a <TIM_Base_SetConfig+0xb2>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a2a      	ldr	r2, [pc, #168]	; (80053d8 <TIM_Base_SetConfig+0x120>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d01b      	beq.n	800536a <TIM_Base_SetConfig+0xb2>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a29      	ldr	r2, [pc, #164]	; (80053dc <TIM_Base_SetConfig+0x124>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d017      	beq.n	800536a <TIM_Base_SetConfig+0xb2>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a28      	ldr	r2, [pc, #160]	; (80053e0 <TIM_Base_SetConfig+0x128>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d013      	beq.n	800536a <TIM_Base_SetConfig+0xb2>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a27      	ldr	r2, [pc, #156]	; (80053e4 <TIM_Base_SetConfig+0x12c>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d00f      	beq.n	800536a <TIM_Base_SetConfig+0xb2>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a26      	ldr	r2, [pc, #152]	; (80053e8 <TIM_Base_SetConfig+0x130>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d00b      	beq.n	800536a <TIM_Base_SetConfig+0xb2>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a25      	ldr	r2, [pc, #148]	; (80053ec <TIM_Base_SetConfig+0x134>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d007      	beq.n	800536a <TIM_Base_SetConfig+0xb2>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a24      	ldr	r2, [pc, #144]	; (80053f0 <TIM_Base_SetConfig+0x138>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d003      	beq.n	800536a <TIM_Base_SetConfig+0xb2>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a23      	ldr	r2, [pc, #140]	; (80053f4 <TIM_Base_SetConfig+0x13c>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d108      	bne.n	800537c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005370:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	4313      	orrs	r3, r2
 800537a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	4313      	orrs	r3, r2
 8005388:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	689a      	ldr	r2, [r3, #8]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a0a      	ldr	r2, [pc, #40]	; (80053cc <TIM_Base_SetConfig+0x114>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d003      	beq.n	80053b0 <TIM_Base_SetConfig+0xf8>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a0c      	ldr	r2, [pc, #48]	; (80053dc <TIM_Base_SetConfig+0x124>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d103      	bne.n	80053b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	691a      	ldr	r2, [r3, #16]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	615a      	str	r2, [r3, #20]
}
 80053be:	bf00      	nop
 80053c0:	3714      	adds	r7, #20
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	40010000 	.word	0x40010000
 80053d0:	40000400 	.word	0x40000400
 80053d4:	40000800 	.word	0x40000800
 80053d8:	40000c00 	.word	0x40000c00
 80053dc:	40010400 	.word	0x40010400
 80053e0:	40014000 	.word	0x40014000
 80053e4:	40014400 	.word	0x40014400
 80053e8:	40014800 	.word	0x40014800
 80053ec:	40001800 	.word	0x40001800
 80053f0:	40001c00 	.word	0x40001c00
 80053f4:	40002000 	.word	0x40002000

080053f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b087      	sub	sp, #28
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a1b      	ldr	r3, [r3, #32]
 8005406:	f023 0201 	bic.w	r2, r3, #1
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f023 0303 	bic.w	r3, r3, #3
 800542e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	4313      	orrs	r3, r2
 8005438:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	f023 0302 	bic.w	r3, r3, #2
 8005440:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	4313      	orrs	r3, r2
 800544a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a20      	ldr	r2, [pc, #128]	; (80054d0 <TIM_OC1_SetConfig+0xd8>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d003      	beq.n	800545c <TIM_OC1_SetConfig+0x64>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a1f      	ldr	r2, [pc, #124]	; (80054d4 <TIM_OC1_SetConfig+0xdc>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d10c      	bne.n	8005476 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	f023 0308 	bic.w	r3, r3, #8
 8005462:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	4313      	orrs	r3, r2
 800546c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	f023 0304 	bic.w	r3, r3, #4
 8005474:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a15      	ldr	r2, [pc, #84]	; (80054d0 <TIM_OC1_SetConfig+0xd8>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d003      	beq.n	8005486 <TIM_OC1_SetConfig+0x8e>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a14      	ldr	r2, [pc, #80]	; (80054d4 <TIM_OC1_SetConfig+0xdc>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d111      	bne.n	80054aa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800548c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005494:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	4313      	orrs	r3, r2
 800549e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	685a      	ldr	r2, [r3, #4]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	621a      	str	r2, [r3, #32]
}
 80054c4:	bf00      	nop
 80054c6:	371c      	adds	r7, #28
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr
 80054d0:	40010000 	.word	0x40010000
 80054d4:	40010400 	.word	0x40010400

080054d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054d8:	b480      	push	{r7}
 80054da:	b087      	sub	sp, #28
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	f023 0210 	bic.w	r2, r3, #16
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800550e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	021b      	lsls	r3, r3, #8
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	4313      	orrs	r3, r2
 800551a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	f023 0320 	bic.w	r3, r3, #32
 8005522:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	011b      	lsls	r3, r3, #4
 800552a:	697a      	ldr	r2, [r7, #20]
 800552c:	4313      	orrs	r3, r2
 800552e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a22      	ldr	r2, [pc, #136]	; (80055bc <TIM_OC2_SetConfig+0xe4>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d003      	beq.n	8005540 <TIM_OC2_SetConfig+0x68>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a21      	ldr	r2, [pc, #132]	; (80055c0 <TIM_OC2_SetConfig+0xe8>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d10d      	bne.n	800555c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005546:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	011b      	lsls	r3, r3, #4
 800554e:	697a      	ldr	r2, [r7, #20]
 8005550:	4313      	orrs	r3, r2
 8005552:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800555a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a17      	ldr	r2, [pc, #92]	; (80055bc <TIM_OC2_SetConfig+0xe4>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d003      	beq.n	800556c <TIM_OC2_SetConfig+0x94>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a16      	ldr	r2, [pc, #88]	; (80055c0 <TIM_OC2_SetConfig+0xe8>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d113      	bne.n	8005594 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005572:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800557a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	695b      	ldr	r3, [r3, #20]
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	693a      	ldr	r2, [r7, #16]
 8005584:	4313      	orrs	r3, r2
 8005586:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	699b      	ldr	r3, [r3, #24]
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	693a      	ldr	r2, [r7, #16]
 8005590:	4313      	orrs	r3, r2
 8005592:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	693a      	ldr	r2, [r7, #16]
 8005598:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	685a      	ldr	r2, [r3, #4]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	621a      	str	r2, [r3, #32]
}
 80055ae:	bf00      	nop
 80055b0:	371c      	adds	r7, #28
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	40010000 	.word	0x40010000
 80055c0:	40010400 	.word	0x40010400

080055c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b087      	sub	sp, #28
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	69db      	ldr	r3, [r3, #28]
 80055ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f023 0303 	bic.w	r3, r3, #3
 80055fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	4313      	orrs	r3, r2
 8005604:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800560c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	021b      	lsls	r3, r3, #8
 8005614:	697a      	ldr	r2, [r7, #20]
 8005616:	4313      	orrs	r3, r2
 8005618:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a21      	ldr	r2, [pc, #132]	; (80056a4 <TIM_OC3_SetConfig+0xe0>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d003      	beq.n	800562a <TIM_OC3_SetConfig+0x66>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a20      	ldr	r2, [pc, #128]	; (80056a8 <TIM_OC3_SetConfig+0xe4>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d10d      	bne.n	8005646 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005630:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	021b      	lsls	r3, r3, #8
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	4313      	orrs	r3, r2
 800563c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005644:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a16      	ldr	r2, [pc, #88]	; (80056a4 <TIM_OC3_SetConfig+0xe0>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d003      	beq.n	8005656 <TIM_OC3_SetConfig+0x92>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a15      	ldr	r2, [pc, #84]	; (80056a8 <TIM_OC3_SetConfig+0xe4>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d113      	bne.n	800567e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800565c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005664:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	011b      	lsls	r3, r3, #4
 800566c:	693a      	ldr	r2, [r7, #16]
 800566e:	4313      	orrs	r3, r2
 8005670:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	699b      	ldr	r3, [r3, #24]
 8005676:	011b      	lsls	r3, r3, #4
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	4313      	orrs	r3, r2
 800567c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	685a      	ldr	r2, [r3, #4]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	697a      	ldr	r2, [r7, #20]
 8005696:	621a      	str	r2, [r3, #32]
}
 8005698:	bf00      	nop
 800569a:	371c      	adds	r7, #28
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr
 80056a4:	40010000 	.word	0x40010000
 80056a8:	40010400 	.word	0x40010400

080056ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b087      	sub	sp, #28
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	69db      	ldr	r3, [r3, #28]
 80056d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	021b      	lsls	r3, r3, #8
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	031b      	lsls	r3, r3, #12
 80056fe:	693a      	ldr	r2, [r7, #16]
 8005700:	4313      	orrs	r3, r2
 8005702:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a12      	ldr	r2, [pc, #72]	; (8005750 <TIM_OC4_SetConfig+0xa4>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d003      	beq.n	8005714 <TIM_OC4_SetConfig+0x68>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a11      	ldr	r2, [pc, #68]	; (8005754 <TIM_OC4_SetConfig+0xa8>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d109      	bne.n	8005728 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800571a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	695b      	ldr	r3, [r3, #20]
 8005720:	019b      	lsls	r3, r3, #6
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	4313      	orrs	r3, r2
 8005726:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	685a      	ldr	r2, [r3, #4]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	693a      	ldr	r2, [r7, #16]
 8005740:	621a      	str	r2, [r3, #32]
}
 8005742:	bf00      	nop
 8005744:	371c      	adds	r7, #28
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop
 8005750:	40010000 	.word	0x40010000
 8005754:	40010400 	.word	0x40010400

08005758 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005758:	b480      	push	{r7}
 800575a:	b087      	sub	sp, #28
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	607a      	str	r2, [r7, #4]
 8005764:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6a1b      	ldr	r3, [r3, #32]
 800576a:	f023 0201 	bic.w	r2, r3, #1
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6a1b      	ldr	r3, [r3, #32]
 800577c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	4a28      	ldr	r2, [pc, #160]	; (8005824 <TIM_TI1_SetConfig+0xcc>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d01b      	beq.n	80057be <TIM_TI1_SetConfig+0x66>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800578c:	d017      	beq.n	80057be <TIM_TI1_SetConfig+0x66>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	4a25      	ldr	r2, [pc, #148]	; (8005828 <TIM_TI1_SetConfig+0xd0>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d013      	beq.n	80057be <TIM_TI1_SetConfig+0x66>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	4a24      	ldr	r2, [pc, #144]	; (800582c <TIM_TI1_SetConfig+0xd4>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d00f      	beq.n	80057be <TIM_TI1_SetConfig+0x66>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	4a23      	ldr	r2, [pc, #140]	; (8005830 <TIM_TI1_SetConfig+0xd8>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d00b      	beq.n	80057be <TIM_TI1_SetConfig+0x66>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	4a22      	ldr	r2, [pc, #136]	; (8005834 <TIM_TI1_SetConfig+0xdc>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d007      	beq.n	80057be <TIM_TI1_SetConfig+0x66>
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	4a21      	ldr	r2, [pc, #132]	; (8005838 <TIM_TI1_SetConfig+0xe0>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d003      	beq.n	80057be <TIM_TI1_SetConfig+0x66>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	4a20      	ldr	r2, [pc, #128]	; (800583c <TIM_TI1_SetConfig+0xe4>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d101      	bne.n	80057c2 <TIM_TI1_SetConfig+0x6a>
 80057be:	2301      	movs	r3, #1
 80057c0:	e000      	b.n	80057c4 <TIM_TI1_SetConfig+0x6c>
 80057c2:	2300      	movs	r3, #0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d008      	beq.n	80057da <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	f023 0303 	bic.w	r3, r3, #3
 80057ce:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80057d0:	697a      	ldr	r2, [r7, #20]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	617b      	str	r3, [r7, #20]
 80057d8:	e003      	b.n	80057e2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	f043 0301 	orr.w	r3, r3, #1
 80057e0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	011b      	lsls	r3, r3, #4
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	f023 030a 	bic.w	r3, r3, #10
 80057fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	f003 030a 	and.w	r3, r3, #10
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	4313      	orrs	r3, r2
 8005808:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	693a      	ldr	r2, [r7, #16]
 8005814:	621a      	str	r2, [r3, #32]
}
 8005816:	bf00      	nop
 8005818:	371c      	adds	r7, #28
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	40010000 	.word	0x40010000
 8005828:	40000400 	.word	0x40000400
 800582c:	40000800 	.word	0x40000800
 8005830:	40000c00 	.word	0x40000c00
 8005834:	40010400 	.word	0x40010400
 8005838:	40014000 	.word	0x40014000
 800583c:	40001800 	.word	0x40001800

08005840 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005840:	b480      	push	{r7}
 8005842:	b087      	sub	sp, #28
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6a1b      	ldr	r3, [r3, #32]
 8005850:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6a1b      	ldr	r3, [r3, #32]
 8005856:	f023 0201 	bic.w	r2, r3, #1
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800586a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	011b      	lsls	r3, r3, #4
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	4313      	orrs	r3, r2
 8005874:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	f023 030a 	bic.w	r3, r3, #10
 800587c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800587e:	697a      	ldr	r2, [r7, #20]
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	4313      	orrs	r3, r2
 8005884:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	693a      	ldr	r2, [r7, #16]
 800588a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	621a      	str	r2, [r3, #32]
}
 8005892:	bf00      	nop
 8005894:	371c      	adds	r7, #28
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr

0800589e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800589e:	b480      	push	{r7}
 80058a0:	b087      	sub	sp, #28
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	60f8      	str	r0, [r7, #12]
 80058a6:	60b9      	str	r1, [r7, #8]
 80058a8:	607a      	str	r2, [r7, #4]
 80058aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6a1b      	ldr	r3, [r3, #32]
 80058b0:	f023 0210 	bic.w	r2, r3, #16
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6a1b      	ldr	r3, [r3, #32]
 80058c2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	021b      	lsls	r3, r3, #8
 80058d0:	697a      	ldr	r2, [r7, #20]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	031b      	lsls	r3, r3, #12
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058f0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	011b      	lsls	r3, r3, #4
 80058f6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80058fa:	693a      	ldr	r2, [r7, #16]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	697a      	ldr	r2, [r7, #20]
 8005904:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	621a      	str	r2, [r3, #32]
}
 800590c:	bf00      	nop
 800590e:	371c      	adds	r7, #28
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005918:	b480      	push	{r7}
 800591a:	b087      	sub	sp, #28
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6a1b      	ldr	r3, [r3, #32]
 8005928:	f023 0210 	bic.w	r2, r3, #16
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005942:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	031b      	lsls	r3, r3, #12
 8005948:	697a      	ldr	r2, [r7, #20]
 800594a:	4313      	orrs	r3, r2
 800594c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005954:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	011b      	lsls	r3, r3, #4
 800595a:	693a      	ldr	r2, [r7, #16]
 800595c:	4313      	orrs	r3, r2
 800595e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	621a      	str	r2, [r3, #32]
}
 800596c:	bf00      	nop
 800596e:	371c      	adds	r7, #28
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005978:	b480      	push	{r7}
 800597a:	b087      	sub	sp, #28
 800597c:	af00      	add	r7, sp, #0
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	607a      	str	r2, [r7, #4]
 8005984:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6a1b      	ldr	r3, [r3, #32]
 800598a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	69db      	ldr	r3, [r3, #28]
 8005996:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6a1b      	ldr	r3, [r3, #32]
 800599c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	f023 0303 	bic.w	r3, r3, #3
 80059a4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059b4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	011b      	lsls	r3, r3, #4
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	697a      	ldr	r2, [r7, #20]
 80059be:	4313      	orrs	r3, r2
 80059c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80059c8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	021b      	lsls	r3, r3, #8
 80059ce:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80059d2:	693a      	ldr	r2, [r7, #16]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	697a      	ldr	r2, [r7, #20]
 80059dc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	693a      	ldr	r2, [r7, #16]
 80059e2:	621a      	str	r2, [r3, #32]
}
 80059e4:	bf00      	nop
 80059e6:	371c      	adds	r7, #28
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b087      	sub	sp, #28
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	607a      	str	r2, [r7, #4]
 80059fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6a1b      	ldr	r3, [r3, #32]
 8005a02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6a1b      	ldr	r3, [r3, #32]
 8005a14:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a1c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	021b      	lsls	r3, r3, #8
 8005a22:	697a      	ldr	r2, [r7, #20]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a2e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	031b      	lsls	r3, r3, #12
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	697a      	ldr	r2, [r7, #20]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005a42:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	031b      	lsls	r3, r3, #12
 8005a48:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	697a      	ldr	r2, [r7, #20]
 8005a56:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	621a      	str	r2, [r3, #32]
}
 8005a5e:	bf00      	nop
 8005a60:	371c      	adds	r7, #28
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr

08005a6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a6a:	b480      	push	{r7}
 8005a6c:	b085      	sub	sp, #20
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
 8005a72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a82:	683a      	ldr	r2, [r7, #0]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	f043 0307 	orr.w	r3, r3, #7
 8005a8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	609a      	str	r2, [r3, #8]
}
 8005a94:	bf00      	nop
 8005a96:	3714      	adds	r7, #20
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b087      	sub	sp, #28
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
 8005aac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005aba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	021a      	lsls	r2, r3, #8
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	431a      	orrs	r2, r3
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	697a      	ldr	r2, [r7, #20]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	697a      	ldr	r2, [r7, #20]
 8005ad2:	609a      	str	r2, [r3, #8]
}
 8005ad4:	bf00      	nop
 8005ad6:	371c      	adds	r7, #28
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b087      	sub	sp, #28
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	f003 031f 	and.w	r3, r3, #31
 8005af2:	2201      	movs	r2, #1
 8005af4:	fa02 f303 	lsl.w	r3, r2, r3
 8005af8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6a1a      	ldr	r2, [r3, #32]
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	43db      	mvns	r3, r3
 8005b02:	401a      	ands	r2, r3
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6a1a      	ldr	r2, [r3, #32]
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	f003 031f 	and.w	r3, r3, #31
 8005b12:	6879      	ldr	r1, [r7, #4]
 8005b14:	fa01 f303 	lsl.w	r3, r1, r3
 8005b18:	431a      	orrs	r2, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	621a      	str	r2, [r3, #32]
}
 8005b1e:	bf00      	nop
 8005b20:	371c      	adds	r7, #28
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr

08005b2a <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	b084      	sub	sp, #16
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
 8005b32:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2204      	movs	r2, #4
 8005b3a:	6839      	ldr	r1, [r7, #0]
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f000 f901 	bl	8005d44 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b50:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	f003 0307 	and.w	r3, r3, #7
 8005b5c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2b06      	cmp	r3, #6
 8005b62:	d007      	beq.n	8005b74 <HAL_TIMEx_PWMN_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f042 0201 	orr.w	r2, r2, #1
 8005b72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
	...

08005b80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d101      	bne.n	8005b98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b94:	2302      	movs	r3, #2
 8005b96:	e05a      	b.n	8005c4e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2202      	movs	r2, #2
 8005ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a21      	ldr	r2, [pc, #132]	; (8005c5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d022      	beq.n	8005c22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005be4:	d01d      	beq.n	8005c22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a1d      	ldr	r2, [pc, #116]	; (8005c60 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d018      	beq.n	8005c22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a1b      	ldr	r2, [pc, #108]	; (8005c64 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d013      	beq.n	8005c22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a1a      	ldr	r2, [pc, #104]	; (8005c68 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d00e      	beq.n	8005c22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a18      	ldr	r2, [pc, #96]	; (8005c6c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d009      	beq.n	8005c22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a17      	ldr	r2, [pc, #92]	; (8005c70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d004      	beq.n	8005c22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a15      	ldr	r2, [pc, #84]	; (8005c74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d10c      	bne.n	8005c3c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3714      	adds	r7, #20
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	40010000 	.word	0x40010000
 8005c60:	40000400 	.word	0x40000400
 8005c64:	40000800 	.word	0x40000800
 8005c68:	40000c00 	.word	0x40000c00
 8005c6c:	40010400 	.word	0x40010400
 8005c70:	40014000 	.word	0x40014000
 8005c74:	40001800 	.word	0x40001800

08005c78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005c82:	2300      	movs	r3, #0
 8005c84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d101      	bne.n	8005c94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005c90:	2302      	movs	r3, #2
 8005c92:	e03d      	b.n	8005d10 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	695b      	ldr	r3, [r3, #20]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	69db      	ldr	r3, [r3, #28]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3714      	adds	r7, #20
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d24:	bf00      	nop
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d38:	bf00      	nop
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b087      	sub	sp, #28
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	f003 031f 	and.w	r3, r3, #31
 8005d56:	2204      	movs	r2, #4
 8005d58:	fa02 f303 	lsl.w	r3, r2, r3
 8005d5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6a1a      	ldr	r2, [r3, #32]
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	43db      	mvns	r3, r3
 8005d66:	401a      	ands	r2, r3
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6a1a      	ldr	r2, [r3, #32]
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	f003 031f 	and.w	r3, r3, #31
 8005d76:	6879      	ldr	r1, [r7, #4]
 8005d78:	fa01 f303 	lsl.w	r3, r1, r3
 8005d7c:	431a      	orrs	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	621a      	str	r2, [r3, #32]
}
 8005d82:	bf00      	nop
 8005d84:	371c      	adds	r7, #28
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr
	...

08005d90 <__libc_init_array>:
 8005d90:	b570      	push	{r4, r5, r6, lr}
 8005d92:	4e0d      	ldr	r6, [pc, #52]	; (8005dc8 <__libc_init_array+0x38>)
 8005d94:	4c0d      	ldr	r4, [pc, #52]	; (8005dcc <__libc_init_array+0x3c>)
 8005d96:	1ba4      	subs	r4, r4, r6
 8005d98:	10a4      	asrs	r4, r4, #2
 8005d9a:	2500      	movs	r5, #0
 8005d9c:	42a5      	cmp	r5, r4
 8005d9e:	d109      	bne.n	8005db4 <__libc_init_array+0x24>
 8005da0:	4e0b      	ldr	r6, [pc, #44]	; (8005dd0 <__libc_init_array+0x40>)
 8005da2:	4c0c      	ldr	r4, [pc, #48]	; (8005dd4 <__libc_init_array+0x44>)
 8005da4:	f000 f82c 	bl	8005e00 <_init>
 8005da8:	1ba4      	subs	r4, r4, r6
 8005daa:	10a4      	asrs	r4, r4, #2
 8005dac:	2500      	movs	r5, #0
 8005dae:	42a5      	cmp	r5, r4
 8005db0:	d105      	bne.n	8005dbe <__libc_init_array+0x2e>
 8005db2:	bd70      	pop	{r4, r5, r6, pc}
 8005db4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005db8:	4798      	blx	r3
 8005dba:	3501      	adds	r5, #1
 8005dbc:	e7ee      	b.n	8005d9c <__libc_init_array+0xc>
 8005dbe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005dc2:	4798      	blx	r3
 8005dc4:	3501      	adds	r5, #1
 8005dc6:	e7f2      	b.n	8005dae <__libc_init_array+0x1e>
 8005dc8:	08005e40 	.word	0x08005e40
 8005dcc:	08005e40 	.word	0x08005e40
 8005dd0:	08005e40 	.word	0x08005e40
 8005dd4:	08005e44 	.word	0x08005e44

08005dd8 <memcpy>:
 8005dd8:	b510      	push	{r4, lr}
 8005dda:	1e43      	subs	r3, r0, #1
 8005ddc:	440a      	add	r2, r1
 8005dde:	4291      	cmp	r1, r2
 8005de0:	d100      	bne.n	8005de4 <memcpy+0xc>
 8005de2:	bd10      	pop	{r4, pc}
 8005de4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005de8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005dec:	e7f7      	b.n	8005dde <memcpy+0x6>

08005dee <memset>:
 8005dee:	4402      	add	r2, r0
 8005df0:	4603      	mov	r3, r0
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d100      	bne.n	8005df8 <memset+0xa>
 8005df6:	4770      	bx	lr
 8005df8:	f803 1b01 	strb.w	r1, [r3], #1
 8005dfc:	e7f9      	b.n	8005df2 <memset+0x4>
	...

08005e00 <_init>:
 8005e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e02:	bf00      	nop
 8005e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e06:	bc08      	pop	{r3}
 8005e08:	469e      	mov	lr, r3
 8005e0a:	4770      	bx	lr

08005e0c <_fini>:
 8005e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e0e:	bf00      	nop
 8005e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e12:	bc08      	pop	{r3}
 8005e14:	469e      	mov	lr, r3
 8005e16:	4770      	bx	lr
